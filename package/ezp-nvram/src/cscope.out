cscope 15 $HOME/aximcom/ALLIS/package/ezp-nvram/src               0000983649
	@G/nvram_data_G.h

1 { "w™_num_G", 
x°r
(
WAN_NUM_G
),

2 
	gNVRAM_NONE
,

5 #i‡–
WAN_NUM_G
 >= 1 )

6 { "w™0_i‚ame_G", 
	gWAN0_IFNAME_G
,

7 
	gNVRAM_NONE
,

10 { "w™0_devi˚_G", 
	gWAN0_DEVICE_G
,

11 
	gNVRAM_NONE
,

14 { "w™0_¥Ÿo_G", 
	gWAN0_PROTO_G
,

15 
	gNVRAM_NONE
,

19 #i‡–
WAN_NUM_G
 >= 2 )

20 { "w™1_i‚ame_G", 
	gWAN1_IFNAME_G
,

21 
	gNVRAM_NONE
,

24 { "w™1_devi˚_G", 
	gWAN1_DEVICE_G
,

25 
	gNVRAM_NONE
,

28 { "w™1_¥Ÿo_G", 
	gWAN1_PROTO_G
,

29 
	gNVRAM_NONE
,

33 #i‡–
WAN_NUM_G
 >= 3 )

34 { "w™2_i‚ame_G", 
	gWAN2_IFNAME_G
,

35 
	gNVRAM_NONE
,

38 { "w™2_devi˚_G", 
	gWAN2_DEVICE_G
,

39 
	gNVRAM_NONE
,

42 { "w™2_¥Ÿo_G", 
	gWAN2_PROTO_G
,

43 
	gNVRAM_NONE
,

47 #i‡–
WAN_NUM_G
 >= 4 )

48 { "w™3_i‚ame_G", 
	gWAN3_IFNAME_G
,

49 
	gNVRAM_NONE
,

52 { "w™3_devi˚_G", 
	gWAN3_DEVICE_G
,

53 
	gNVRAM_NONE
,

56 { "w™3_¥Ÿo_G", 
	gWAN3_PROTO_G
,

57 
	gNVRAM_NONE
,

61 #i‡–
WAN_NUM_G
 >= 5 )

62 { "w™4_i‚ame_G", 
	gWAN4_IFNAME_G
,

63 
	gNVRAM_NONE
,

66 { "w™4_devi˚_G", 
	gWAN4_DEVICE_G
,

67 
	gNVRAM_NONE
,

70 { "w™4_¥Ÿo_G", 
	gWAN4_PROTO_G
,

71 
	gNVRAM_NONE
,

75 { "br_ruÀ_G", 
	gBR_RULE_G
,

76 
	gNVRAM_NONE
,

80 { "w™_maö_ruÀ_G", 
	gWAN_MAIN_RULE_G
,

81 
	gNVRAM_NONE
,

85 { "≠pmgr_ruÀ_G", 
x°r
(
APPMBG_RULE_G
),

86 
	gNVRAM_NONE
,

	@G/nvram_ezpacket-app_G.h

1 #i‚de‡
NVRAM_EZPACKET_APP_G_H


2 
	#NVRAM_EZPACKET_APP_G_H


	)

3 #i‡(
WL_NUM
 == 0)

4 
	#APPMGR_WLAN_G
 0

	)

6 
	#APPMGR_WLAN_G
 1

	)

9 #i‡(
EZP_PROD_SUBCAT
 == 2)

10 
	#APPMGR_ISCSI_G
 0

	)

11 
	#APPMGR_PPTP_G
 0

	)

12 
	#APPMGR_L2TP_G
 0

	)

13 
	#APPMGR_IPSEC_G
 0

	)

14 
	#APPMGR_STORAGE_G
 1

	)

15 
	#APPMGR_WWAN_G
 0

	)

16 
	#APPMGR_WISP_G
 1

	)

17 
	#APPMGR_PORTCFG_G
 0

	)

18 #ñi‡(
EZP_PROD_SUBCAT
 == 3)

19 
	#APPMGR_ISCSI_G
 1

	)

20 
	#APPMGR_PPTP_G
 1

	)

21 
	#APPMGR_L2TP_G
 0

	)

22 
	#APPMGR_IPSEC_G
 0

	)

23 
	#APPMGR_STORAGE_G
 1

	)

24 
	#APPMGR_WWAN_G
 0

	)

25 
	#APPMGR_WISP_G
 1

	)

26 
	#APPMGR_PORTCFG_G
 0

	)

28 
	#APPMGR_ISCSI_G
 0

	)

29 
	#APPMGR_PPTP_G
 0

	)

30 
	#APPMGR_L2TP_G
 0

	)

31 
	#APPMGR_IPSEC_G
 0

	)

32 
	#APPMGR_STORAGE_G
 1

	)

33 
	#APPMGR_WWAN_G
 0

	)

34 
	#APPMGR_WISP_G
 0

	)

35 
	#APPMGR_PORTCFG_G
 0

	)

37 
	#APPMGR_HWNAT_G
 1

	)

38 
	#APPMGR_FIRMWARE_G
 1

	)

39 
	#APPMGR_IPHONE_G
 0

	)

40 
	#APPMGR_BARRY_G
 0

	)

41 
	#APPMGR_SMART_G
 0

	)

42 
	#APPMGR_USBLED_G
 0

	)

43 
	#APPMGR_WIMAX_G
 0

	)

44 
	#APPMGR_BECEEM_G
 0

	)

45 
	#APPMGR_GUEST_LAN_G
 1

	)

46 
	#APPMGR_VPNC_G
 1

	)

47 
	#APPMGR_WIRE_G
 1

	)

54 
	#APPMBG_RULE_G
 
APPMGR_WLAN_G
^
APPMGR_ISCSI_G
^
APPMGR_PPTP_G
^
APPMGR_L2TP_G
^
APPMGR_IPSEC_G
^
APPMGR_STORAGE_G
^
APPMGR_WWAN_G
^
APPMGR_WISP_G
^
APPMGR_PORTCFG_G
^
APPMGR_HWNAT_G
^
APPMGR_FIRMWARE_G
^
APPMGR_IPHONE_G
^
APPMGR_BARRY_G
^
APPMGR_SMART_G
^
APPMGR_USBLED_G
^
APPMGR_WIMAX_G
^
APPMGR_BECEEM_G
^
APPMGR_GUEST_LAN_G
^
APPMGR_VPNC_G
^
APPMGR_WIRE_G


	)

	@G/nvram_ezpacket-rt305x_G.h

1 #ifde‡
CONFIG_EZP_ARCH_RT305X


2 #i‡–
WAN_NUM_G
 == 1)

3 
	#WAN0_IFNAME_G
 "vœn2"

	)

4 
	#WAN0_DEVICE_G
 "vœn2"

	)

5 
	#BR_RULE_G
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^"

	)

6 #ñi‡–
WAN_NUM_G
 == 2)

7 
	#WAN0_IFNAME_G
 "vœn2"

	)

8 
	#WAN0_DEVICE_G
 "vœn2"

	)

9 
	#WAN1_IFNAME_G
 "vœn3"

	)

10 
	#WAN1_DEVICE_G
 "vœn3"

	)

11 
	#BR_RULE_G
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

12 #ñi‡–
WAN_NUM_G
 == 3)

13 
	#WAN0_IFNAME_G
 "vœn2"

	)

14 
	#WAN0_DEVICE_G
 "vœn2"

	)

15 
	#WAN1_IFNAME_G
 "vœn3"

	)

16 
	#WAN1_DEVICE_G
 "vœn3"

	)

17 
	#WAN2_IFNAME_G
 "vœn4"

	)

18 
	#WAN2_DEVICE_G
 "vœn4"

	)

19 
	#BR_RULE_G
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^|WAN2^0^vœn3^|WAN3^0^vœn4^"

	)

20 #ñi‡–
WAN_NUM_G
 == 4)

21 
	#WAN0_IFNAME_G
 "vœn2"

	)

22 
	#WAN0_DEVICE_G
 "vœn2"

	)

23 
	#WAN1_IFNAME_G
 "vœn3"

	)

24 
	#WAN1_DEVICE_G
 "vœn3"

	)

25 
	#WAN2_IFNAME_G
 "vœn4"

	)

26 
	#WAN2_DEVICE_G
 "vœn4"

	)

27 
	#WAN3_IFNAME_G
 "vœn5"

	)

28 
	#WAN3_DEVICE_G
 "vœn5"

	)

29 
	#BR_RULE_G
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^|WAN2^0^vœn3^|WAN3^0^vœn4^|WAN4^0^vœn5^"

	)

30 #ñi‡–
WAN_NUM_G
 == 5)

31 
	#WAN0_IFNAME_G
 "vœn2"

	)

32 
	#WAN0_DEVICE_G
 "vœn2"

	)

33 
	#WAN1_IFNAME_G
 "vœn3"

	)

34 
	#WAN1_DEVICE_G
 "vœn3"

	)

35 
	#WAN2_IFNAME_G
 "vœn4"

	)

36 
	#WAN2_DEVICE_G
 "vœn4"

	)

37 
	#WAN3_IFNAME_G
 "vœn5"

	)

38 
	#WAN3_DEVICE_G
 "vœn5"

	)

39 
	#WAN4_IFNAME_G
 "vœn6"

	)

40 
	#WAN4_DEVICE_G
 "vœn6"

	)

41 
	#BR_RULE_G
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^|WAN2^0^vœn3^|WAN3^0^vœn4^|WAN4^0^vœn5^|WAN5^0^vœn6^"

	)

	@G/nvram_ezpacket_G.h

22 #i‚de‡
_NVRAM_EZPACKET_G_H


23 
	#_NVRAM_EZPACKET_G_H


	)

25 #i‡–
WAN_NUM_G
 == 1 )

26 
	#WAN0_PROTO_G
 "dh˝"

	)

27 
	#WAN_MAIN_RULE_G
 "WAN1^1^1500^1^10"

	)

28 #ñi‡–
WAN_NUM_G
 == 2 )

29 
	#WAN0_PROTO_G
 "dh˝"

	)

30 
	#WAN1_PROTO_G
 "dh˝"

	)

31 
	#WAN_MAIN_RULE_G
 "WAN1^1^1500^1^10|WAN2^1^1500^1^10"

	)

32 #ñi‡–
WAN_NUM_G
 == 3 )

33 
	#WAN0_PROTO_G
 "dh˝"

	)

34 
	#WAN1_PROTO_G
 "dh˝"

	)

35 
	#WAN2_PROTO_G
 "dh˝"

	)

36 
	#WAN_MAIN_RULE_G
 "WAN1^1^1500^1^10|WAN2^1^1500^1^10|WAN3^1^1500^1^10"

	)

37 #ñi‡–
WAN_NUM_G
 == 4 )

38 
	#WAN0_PROTO_G
 "dh˝"

	)

39 
	#WAN1_PROTO_G
 "dh˝"

	)

40 
	#WAN2_PROTO_G
 "dh˝"

	)

41 
	#WAN3_PROTO_G
 "dh˝"

	)

42 
	#WAN_MAIN_RULE_G
 "WAN1^1^1500^1^10|WAN2^1^1500^1^10|WAN3^1^1500^1^10|WAN4^1^1500^1^10"

	)

	@I/nvram_data_I.h

1 { "w™_num_I", 
x°r
(
WAN_NUM_I
),

2 
	gNVRAM_NONE
,

5 #i‡–
WAN_NUM_I
 >= 1 )

6 { "w™0_i‚ame_I", 
	gWAN0_IFNAME_I
,

7 
	gNVRAM_NONE
,

10 { "w™0_devi˚_I", 
	gWAN0_DEVICE_I
,

11 
	gNVRAM_NONE
,

14 { "w™0_¥Ÿo_I", 
	gWAN0_PROTO_I
,

15 
	gNVRAM_NONE
,

19 #i‡–
WAN_NUM_I
 >= 2 )

20 { "w™1_i‚ame_I", 
	gWAN1_IFNAME_I
,

21 
	gNVRAM_NONE
,

24 { "w™1_devi˚_I", 
	gWAN1_DEVICE_I
,

25 
	gNVRAM_NONE
,

28 { "w™1_¥Ÿo_I", 
	gWAN1_PROTO_I
,

29 
	gNVRAM_NONE
,

33 #i‡–
WAN_NUM_I
 >= 3 )

34 { "w™2_i‚ame_I", 
	gWAN2_IFNAME_I
,

35 
	gNVRAM_NONE
,

38 { "w™2_devi˚_I", 
	gWAN2_DEVICE_I
,

39 
	gNVRAM_NONE
,

42 { "w™2_¥Ÿo_I", 
	gWAN2_PROTO_I
,

43 
	gNVRAM_NONE
,

47 #i‡–
WAN_NUM_I
 >= 4 )

48 { "w™3_i‚ame_I", 
	gWAN3_IFNAME_I
,

49 
	gNVRAM_NONE
,

52 { "w™3_devi˚_I", 
	gWAN3_DEVICE_I
,

53 
	gNVRAM_NONE
,

56 { "w™3_¥Ÿo_I", 
	gWAN3_PROTO_I
,

57 
	gNVRAM_NONE
,

61 #i‡–
WAN_NUM_I
 >= 5 )

62 { "w™4_i‚ame_I", 
	gWAN4_IFNAME_I
,

63 
	gNVRAM_NONE
,

66 { "w™4_devi˚_I", 
	gWAN4_DEVICE_I
,

67 
	gNVRAM_NONE
,

70 { "w™4_¥Ÿo_I", 
	gWAN4_PROTO_I
,

71 
	gNVRAM_NONE
,

75 { "br_ruÀ_I", 
	gBR_RULE_I
,

76 
	gNVRAM_NONE
,

80 { "w™_maö_ruÀ_I", 
	gWAN_MAIN_RULE_I
,

81 
	gNVRAM_NONE
,

85 { "≠pmgr_ruÀ_I", 
x°r
(
APPMBG_RULE_I
),

86 
	gNVRAM_NONE
,

	@I/nvram_ezpacket-app_I.h

1 #i‚de‡
NVRAM_EZPACKET_APP_I_H


2 
	#NVRAM_EZPACKET_APP_I_H


	)

3 #i‡(
WL_NUM
 == 0)

4 
	#APPMGR_WLAN_I
 0

	)

6 
	#APPMGR_WLAN_I
 1

	)

9 #i‡(
EZP_PROD_SUBCAT
 == 2)

10 
	#APPMGR_ISCSI_I
 0

	)

11 
	#APPMGR_PPTP_I
 0

	)

12 
	#APPMGR_L2TP_I
 0

	)

13 
	#APPMGR_IPSEC_I
 0

	)

14 
	#APPMGR_STORAGE_I
 0

	)

15 
	#APPMGR_WWAN_I
 1

	)

16 
	#APPMGR_WISP_I
 1

	)

17 
	#APPMGR_PORTCFG_I
 0

	)

18 #ñi‡(
EZP_PROD_SUBCAT
 == 3)

19 
	#APPMGR_ISCSI_I
 0

	)

20 
	#APPMGR_PPTP_I
 1

	)

21 
	#APPMGR_L2TP_I
 0

	)

22 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

23 
	#APPMGR_IPSEC_I
 1

	)

25 
	#APPMGR_IPSEC_I
 0

	)

27 
	#APPMGR_STORAGE_I
 0

	)

28 
	#APPMGR_WWAN_I
 1

	)

29 
	#APPMGR_WISP_I
 1

	)

30 
	#APPMGR_PORTCFG_I
 0

	)

32 
	#APPMGR_ISCSI_I
 0

	)

33 
	#APPMGR_PPTP_I
 0

	)

34 
	#APPMGR_L2TP_I
 0

	)

35 
	#APPMGR_IPSEC_I
 0

	)

36 
	#APPMGR_STORAGE_I
 0

	)

37 
	#APPMGR_WWAN_I
 1

	)

38 
	#APPMGR_WISP_I
 0

	)

39 
	#APPMGR_PORTCFG_I
 0

	)

41 
	#APPMGR_HWNAT_I
 1

	)

42 
	#APPMGR_FIRMWARE_I
 1

	)

43 
	#APPMGR_IPHONE_I
 0

	)

44 
	#APPMGR_BARRY_I
 0

	)

45 
	#APPMGR_SMART_I
 0

	)

46 
	#APPMGR_USBLED_I
 0

	)

47 
	#APPMGR_WIMAX_I
 0

	)

48 
	#APPMGR_BECEEM_I
 0

	)

49 
	#APPMGR_GUEST_LAN_I
 1

	)

50 
	#APPMGR_VPNC_I
 1

	)

51 
	#APPMGR_WIRE_I
 1

	)

58 
	#APPMBG_RULE_I
 
APPMGR_WLAN_I
^
APPMGR_ISCSI_I
^
APPMGR_PPTP_I
^
APPMGR_L2TP_I
^
APPMGR_IPSEC_I
^
APPMGR_STORAGE_I
^
APPMGR_WWAN_I
^
APPMGR_WISP_I
^
APPMGR_PORTCFG_I
^
APPMGR_HWNAT_I
^
APPMGR_FIRMWARE_I
^
APPMGR_IPHONE_I
^
APPMGR_BARRY_I
^
APPMGR_SMART_I
^
APPMGR_USBLED_I
^
APPMGR_WIMAX_I
^
APPMGR_BECEEM_I
^
APPMGR_GUEST_LAN_I
^
APPMGR_VPNC_I
^
APPMGR_WIRE_I


	)

	@I/nvram_ezpacket-rt305x_I.h

1 #ifde‡
CONFIG_EZP_ARCH_RT305X


4 #i‡–
WAN_NUM_I
 == 1)

5 
	#WAN0_IFNAME_I
 "µp0"

	)

6 
	#WAN0_DEVICE_I
 "vœn2"

	)

7 
	#BR_RULE_I
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^"

	)

8 #ñi‡–
WAN_NUM_I
 == 2)

9 
	#WAN0_IFNAME_I
 "vœn2"

	)

10 
	#WAN0_DEVICE_I
 "vœn2"

	)

11 
	#WAN1_IFNAME_I
 "µp1"

	)

12 
	#WAN1_DEVICE_I
 "µp1"

	)

13 
	#BR_RULE_I
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^"

	)

14 #ñi‡–
WAN_NUM_I
 == 3)

15 
	#WAN0_IFNAME_I
 "vœn2"

	)

16 
	#WAN0_DEVICE_I
 "vœn2"

	)

17 
	#WAN1_IFNAME_I
 "vœn3"

	)

18 
	#WAN1_DEVICE_I
 "vœn3"

	)

19 
	#WAN2_IFNAME_I
 "µp2"

	)

20 
	#WAN2_DEVICE_I
 "µp2"

	)

21 
	#BR_RULE_I
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

22 #ñi‡–
WAN_NUM_I
 == 4)

23 
	#WAN0_IFNAME_I
 "vœn2"

	)

24 
	#WAN0_DEVICE_I
 "vœn2"

	)

25 
	#WAN1_IFNAME_I
 "vœn3"

	)

26 
	#WAN1_DEVICE_I
 "vœn3"

	)

27 
	#WAN2_IFNAME_I
 "vœn4"

	)

28 
	#WAN2_DEVICE_I
 "vœn4"

	)

29 
	#WAN3_IFNAME_I
 "µp3"

	)

30 
	#WAN3_DEVICE_I
 "µp3"

	)

31 
	#BR_RULE_I
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^|WAN2^0^vœn3^|WAN3^0^vœn4"

	)

32 #ñi‡–
WAN_NUM_I
 == 5)

33 
	#WAN0_IFNAME_I
 "vœn2"

	)

34 
	#WAN0_DEVICE_I
 "vœn2"

	)

35 
	#WAN1_IFNAME_I
 "vœn3"

	)

36 
	#WAN1_DEVICE_I
 "vœn3"

	)

37 
	#WAN2_IFNAME_I
 "vœn4"

	)

38 
	#WAN2_DEVICE_I
 "vœn4"

	)

39 
	#WAN3_IFNAME_I
 "vœn5"

	)

40 
	#WAN3_DEVICE_I
 "vœn5"

	)

41 
	#WAN4_IFNAME_I
 "µp4"

	)

42 
	#WAN4_DEVICE_I
 "µp4"

	)

43 
	#BR_RULE_I
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^|WAN2^0^vœn3^|WAN3^0^vœn4^|WAN4^0^vœn5^"

	)

	@I/nvram_ezpacket_I.h

22 #i‚de‡
_NVRAM_EZPACKET_I_H


23 
	#_NVRAM_EZPACKET_I_H


	)

24 #i‡–
WAN_NUM_I
 == 1 )

25 
	#WAN0_PROTO_I
 "ww™"

	)

26 
	#WAN_MAIN_RULE_I
 "WAN1^1^1500^1^20"

	)

27 #ñi‡–
WAN_NUM_I
 == 2 )

28 
	#WAN0_PROTO_I
 "dh˝"

	)

29 
	#WAN1_PROTO_I
 "ww™"

	)

30 
	#WAN_MAIN_RULE_I
 "WAN1^1^1500^1^10|WAN2^1^1500^1^20"

	)

31 #ñi‡–
WAN_NUM_I
 == 3 )

32 
	#WAN0_PROTO_I
 "dh˝"

	)

33 
	#WAN1_PROTO_I
 "dh˝"

	)

34 
	#WAN2_PROTO_I
 "ww™"

	)

35 
	#WAN_MAIN_RULE_I
 "WAN1^1^1500^1^10|WAN2^1^1500^1^10|WAN3^1^1500^1^20"

	)

36 #ñi‡–
WAN_NUM_I
 == 4 )

37 
	#WAN0_PROTO_I
 "dh˝"

	)

38 
	#WAN1_PROTO_I
 "dh˝"

	)

39 
	#WAN2_PROTO_I
 "dh˝"

	)

40 
	#WAN3_PROTO_I
 "ww™"

	)

41 
	#WAN_MAIN_RULE_I
 "WAN1^1^1500^1^10|WAN2^1^1500^1^10|WAN3^1^1500^1^10|WAN4^1^1500^1^20"

	)

42 #ñi‡–
WAN_NUM_I
 == 5 )

43 
	#WAN0_PROTO_I
 "dh˝"

	)

44 
	#WAN1_PROTO_I
 "dh˝"

	)

45 
	#WAN2_PROTO_I
 "dh˝"

	)

46 
	#WAN3_PROTO_I
 "dh˝"

	)

47 
	#WAN4_PROTO_I
 "ww™"

	)

48 
	#WAN_MAIN_RULE_I
 "WAN1^1^1500^1^10|WAN2^1^1500^1^10|WAN3^1^1500^1^10|WAN4^1^1500^1^10|WAN5^1^1500^1^20"

	)

	@K/nvram_data_K.h

1 { "w™_num_K", 
x°r
(
WAN_NUM_K
),

2 
	gNVRAM_NONE
,

5 #i‡–
WAN_NUM_K
 >= 1 )

6 { "w™0_i‚ame_K", 
	gWAN0_IFNAME_K
,

7 
	gNVRAM_NONE
,

10 { "w™0_devi˚_K", 
	gWAN0_DEVICE_K
,

11 
	gNVRAM_NONE
,

14 { "w™0_¥Ÿo_K", 
	gWAN0_PROTO_K
,

15 
	gNVRAM_NONE
,

19 { "br_ruÀ_K", 
	gBR_RULE_K
,

20 
	gNVRAM_NONE
,

24 { "w™_maö_ruÀ_K", 
	gWAN_MAIN_RULE_K
,

25 
	gNVRAM_NONE
,

29 { "≠pmgr_ruÀ_K", 
x°r
(
APPMBG_RULE_K
),

30 
	gNVRAM_NONE
,

	@K/nvram_ezpacket-app_K.h

1 #i‚de‡
NVRAM_EZPACKET_APP_K_H


2 
	#NVRAM_EZPACKET_APP_K_H


	)

3 #i‡(
WL_NUM
 == 0)

4 
	#APPMGR_WLAN_K
 0

	)

6 
	#APPMGR_WLAN_K
 1

	)

9 
	#APPMGR_ISCSI_K
 0

	)

10 
	#APPMGR_PPTP_K
 0

	)

11 
	#APPMGR_L2TP_K
 0

	)

12 
	#APPMGR_IPSEC_K
 0

	)

13 
	#APPMGR_STORAGE_K
 1

	)

14 
	#APPMGR_WWAN_K
 0

	)

15 
	#APPMGR_WISP_K
 1

	)

16 
	#APPMGR_PORTCFG_K
 0

	)

17 
	#APPMGR_HWNAT_K
 0

	)

18 
	#APPMGR_FIRMWARE_K
 1

	)

19 
	#APPMGR_IPHONE_K
 0

	)

20 
	#APPMGR_BARRY_K
 0

	)

21 
	#APPMGR_SMART_K
 0

	)

22 
	#APPMGR_USBLED_K
 0

	)

23 
	#APPMGR_WIMAX_K
 0

	)

24 
	#APPMGR_BECEEM_K
 0

	)

25 
	#APPMGR_GUEST_LAN_K
 1

	)

26 
	#APPMGR_VPNC_K
 1

	)

27 
	#APPMGR_WIRE_K
 1

	)

34 
	#APPMBG_RULE_K
 
APPMGR_WLAN_K
^
APPMGR_ISCSI_K
^
APPMGR_PPTP_K
^
APPMGR_L2TP_K
^
APPMGR_IPSEC_K
^
APPMGR_STORAGE_K
^
APPMGR_WWAN_K
^
APPMGR_WISP_K
^
APPMGR_PORTCFG_K
^
APPMGR_HWNAT_K
^
APPMGR_FIRMWARE_K
^
APPMGR_IPHONE_K
^
APPMGR_BARRY_K
^
APPMGR_SMART_K
^
APPMGR_USBLED_K
^
APPMGR_WIMAX_K
^
APPMGR_BECEEM_K
^
APPMGR_GUEST_LAN_K
^
APPMGR_VPNC_K
^
APPMGR_WIRE_K


	)

	@K/nvram_ezpacket-rt305x_K.h

1 #ifde‡
CONFIG_EZP_ARCH_RT305X


3 #i‡–
WAN_NUM_P
 == 1)

4 
	#WAN0_IFNAME_K
 "vœn2"

	)

5 
	#WAN0_DEVICE_K
 "vœn2"

	)

6 
	#BR_RULE_K
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^"

	)

	@K/nvram_ezpacket_K.h

22 #i‚de‡
_NVRAM_EZPACKET_K_H


23 
	#_NVRAM_EZPACKET_K_H


	)

25 #i‡–
WAN_NUM_K
 == 1 )

26 
	#WAN0_PROTO_K
 "dh˝"

	)

27 
	#WAN_MAIN_RULE_K
 "WAN1^1^1500^1^10"

	)

	@P/nvram_data_P.h

1 { "w™_num_P", 
x°r
(
WAN_NUM_P
),

2 
	gNVRAM_NONE
,

5 #i‡–
WAN_NUM_P
 >= 1 )

6 { "w™0_i‚ame_P", 
	gWAN0_IFNAME_P
,

7 
	gNVRAM_NONE
,

10 { "w™0_devi˚_P", 
	gWAN0_DEVICE_P
,

11 
	gNVRAM_NONE
,

14 { "w™0_¥Ÿo_P", 
	gWAN0_PROTO_P
,

15 
	gNVRAM_NONE
,

19 { "br_ruÀ_P", 
	gBR_RULE_P
,

20 
	gNVRAM_NONE
,

24 { "w™_maö_ruÀ_P", 
	gWAN_MAIN_RULE_P
,

25 
	gNVRAM_NONE
,

29 { "≠pmgr_ruÀ_P", 
x°r
(
APPMBG_RULE_P
),

30 
	gNVRAM_NONE
,

	@P/nvram_ezpacket-app_P.h

1 #i‚de‡
NVRAM_EZPACKET_APP_P_H


2 
	#NVRAM_EZPACKET_APP_P_H


	)

3 #i‡(
WL_NUM
 == 0)

4 
	#APPMGR_WLAN_P
 0

	)

6 
	#APPMGR_WLAN_P
 1

	)

9 #i‡(
EZP_PROD_SUBCAT_P
 == 0)

10 
	#APPMGR_ISCSI_P
 0

	)

11 
	#APPMGR_PPTP_P
 0

	)

12 
	#APPMGR_L2TP_P
 0

	)

13 
	#APPMGR_IPSEC_P
 0

	)

14 
	#APPMGR_STORAGE_P
 0

	)

15 
	#APPMGR_WWAN_P
 1

	)

16 
	#APPMGR_WISP_P
 1

	)

17 
	#APPMGR_PORTCFG_P
 0

	)

18 #ñi‡(
EZP_PROD_SUBCAT_P
 == 1)

19 
	#APPMGR_ISCSI_P
 0

	)

20 
	#APPMGR_PPTP_P
 0

	)

21 
	#APPMGR_L2TP_P
 0

	)

22 
	#APPMGR_IPSEC_P
 0

	)

23 
	#APPMGR_STORAGE_P
 0

	)

24 
	#APPMGR_WWAN_P
 1

	)

25 
	#APPMGR_WISP_P
 1

	)

26 
	#APPMGR_PORTCFG_P
 1

	)

28 
	#APPMGR_ISCSI_P
 0

	)

29 
	#APPMGR_PPTP_P
 0

	)

30 
	#APPMGR_L2TP_P
 0

	)

31 
	#APPMGR_IPSEC_P
 0

	)

32 
	#APPMGR_STORAGE_P
 0

	)

33 
	#APPMGR_WWAN_P
 1

	)

34 
	#APPMGR_WISP_P
 0

	)

35 
	#APPMGR_PORTCFG_P
 0

	)

37 
	#APPMGR_HWNAT_P
 0

	)

38 
	#APPMGR_FIRMWARE_P
 1

	)

39 
	#APPMGR_IPHONE_P
 1

	)

40 
	#APPMGR_BARRY_P
 1

	)

41 
	#APPMGR_SMART_P
 1

	)

42 
	#APPMGR_USBLED_P
 0

	)

43 
	#APPMGR_WIMAX_P
 0

	)

44 
	#APPMGR_BECEEM_P
 0

	)

45 
	#APPMGR_GUEST_LAN_P
 1

	)

46 
	#APPMGR_VPNC_P
 1

	)

47 
	#APPMGR_WIRE_P
 1

	)

54 
	#APPMBG_RULE_P
 
APPMGR_WLAN_P
^
APPMGR_ISCSI_P
^
APPMGR_PPTP_P
^
APPMGR_L2TP_P
^
APPMGR_IPSEC_P
^
APPMGR_STORAGE_P
^
APPMGR_WWAN_P
^
APPMGR_WISP_P
^
APPMGR_PORTCFG_P
^
APPMGR_HWNAT_P
^
APPMGR_FIRMWARE_P
^
APPMGR_IPHONE_P
^
APPMGR_BARRY_P
^
APPMGR_SMART_P
^
APPMGR_USBLED_P
^
APPMGR_WIMAX_P
^
APPMGR_BECEEM_P
^
APPMGR_GUEST_LAN_P
^
APPMGR_VPNC_P
^
APPMGR_WIRE_P


	)

	@P/nvram_ezpacket-rt305x_P.h

1 #ifde‡
CONFIG_EZP_ARCH_RT305X


4 #i‡–
WAN_NUM_P
 == 1)

5 
	#WAN0_IFNAME_P
 "µp0"

	)

6 
	#WAN0_DEVICE_P
 "vœn2"

	)

7 
	#BR_RULE_P
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^"

	)

	@P/nvram_ezpacket_P.h

22 #i‚de‡
_NVRAM_EZPACKET_P_H


23 
	#_NVRAM_EZPACKET_P_H


	)

25 #i‡–
WAN_NUM_P
 == 1 )

26 
	#WAN0_PROTO_P
 "ww™"

	)

27 
	#WAN_MAIN_RULE_P
 "WAN1^1^1500^1^20"

	)

	@base64.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

8 
	mCRYPT_OK
=0,

9 
	mCRYPT_ERROR
,

10 
	mCRYPT_NOP
,

12 
	mCRYPT_INVALID_KEYSIZE
,

13 
	mCRYPT_INVALID_ROUNDS
,

14 
	mCRYPT_FAIL_TESTVECTOR
,

16 
	mCRYPT_BUFFER_OVERFLOW
,

17 
	mCRYPT_INVALID_PACKET
,

19 
	mCRYPT_INVALID_PRNGSIZE
,

20 
	mCRYPT_ERROR_READPRNG
,

22 
	mCRYPT_INVALID_CIPHER
,

23 
	mCRYPT_INVALID_HASH
,

24 
	mCRYPT_INVALID_PRNG
,

26 
	mCRYPT_MEM
,

28 
	mCRYPT_PK_TYPE_MISMATCH
,

29 
	mCRYPT_PK_NOT_PRIVATE
,

31 
	mCRYPT_INVALID_ARG
,

32 
	mCRYPT_FILE_NOTFOUND
,

34 
	mCRYPT_PK_INVALID_TYPE
,

35 
	mCRYPT_PK_INVALID_SYSTEM
,

36 
	mCRYPT_PK_DUP
,

37 
	mCRYPT_PK_NOT_FOUND
,

38 
	mCRYPT_PK_INVALID_SIZE
,

40 
	mCRYPT_INVALID_PRIME_SIZE


43 c⁄° *
	gcodes
 =

54 
	$ba£64_ícode
(c⁄° *
ö
, 
öÀn
,

55 *
out
, *
ouéí
)

57 
i
, 
Àn2
, 
Àví
;

58 *
p
;

61 
Àn2
 = 4 * ((
öÀn
 + 2) / 3);

62 i‡(*
ouéí
 < 
Àn2
 + 1) {

63  
CRYPT_BUFFER_OVERFLOW
;

65 
p
 = 
out
;

66 
Àví
 = 3*(
öÀn
 / 3);

67 
i
 = 0; i < 
Àví
; i += 3) {

68 *
p
++ = 
codes
[(
ö
[0] >> 2) & 0x3F];

69 *
p
++ = 
codes
[(((
ö
[0] & 3) << 4) + (in[1] >> 4)) & 0x3F];

70 *
p
++ = 
codes
[(((
ö
[1] & 0xf) << 2) + (in[2] >> 6)) & 0x3F];

71 *
p
++ = 
codes
[
ö
[2] & 0x3F];

72 
ö
 += 3;

75 i‡(
i
 < 
öÀn
) {

76 
a
 = 
ö
[0];

77 
b
 = (
i
+1 < 
öÀn
Ë? 
ö
[1] : 0;

79 *
p
++ = 
codes
[(
a
 >> 2) & 0x3F];

80 *
p
++ = 
codes
[(((
a
 & 3Ë<< 4Ë+ (
b
 >> 4)) & 0x3F];

81 *
p
++ = (
i
+1 < 
öÀn
Ë? 
codes
[(((
b
 & 0xf) << 2)) & 0x3F] : '=';

82 *
p
++ = '=';

86 *
p
 = '\0';

89 *
ouéí
 = 
p
 - 
out
;

90  
CRYPT_OK
;

91 
	}
}

92 c⁄° 
	gm≠
[256] = {

126 
	$ba£64_decode
(c⁄° *
ö
, 
öÀn
,

127 *
out
, *
ouéí
)

129 
t
, 
x
, 
y
, 
z
;

130 
c
;

131 
g
;

133 
g
 = 3;

134 
x
 = 
y
 = 
z
 = 
t
 = 0; x < 
öÀn
; x++) {

135 
c
 = 
m≠
[
ö
[
x
]&0xFF];

136 i‡(
c
 == 255) ;

137 i‡(
c
 =254Ë{ c = 0; 
g
--; }

138 
t
 = (t<<6)|
c
;

139 i‡(++
y
 == 4) {

140 i‡(
z
 + 
g
 > *
ouéí
) {

141  
CRYPT_BUFFER_OVERFLOW
;

143 
out
[
z
++] = ()((
t
>>16)&255);

144 i‡(
g
 > 1Ë
out
[
z
++] = ()((
t
>>8)&255);

145 i‡(
g
 > 2Ë
out
[
z
++] = ()(
t
&255);

146 
y
 = 
t
 = 0;

149 i‡(
y
 != 0) {

150  
CRYPT_INVALID_PACKET
;

152 *
ouéí
 = 
z
;

153  
CRYPT_OK
;

154 
	}
}

	@bcmtimer.h

17 #i‚de‡
__bcmtimî_h__


18 
	#__bcmtimî_h__


	)

21 
	~<time.h
>

24 
	tbcm_timî_moduÀ_id
;

25 
	tbcm_timî_id
;

28 (*
	tbcm_timî_cb
)(
	tbcm_timî_id
 
	tid
, 
	td©a
);

31 
	`bcm_timî_moduÀ_öô
(
timî_íåõs
, 
bcm_timî_moduÀ_id
 *
moduÀ_id
);

32 
	`bcm_timî_moduÀ_˛ónup
(
bcm_timî_moduÀ_id
 
moduÀ_id
);

33 
	`bcm_timî_moduÀ_íabÀ
(
bcm_timî_moduÀ_id
 
moduÀ_id
, 
íabÀ
);

34 
	`bcm_timî_¸óã
(
bcm_timî_moduÀ_id
 
moduÀ_id
, 
bcm_timî_id
 *
timî_id
);

35 
	`bcm_timî_dñëe
(
bcm_timî_id
 
timî_id
);

36 
	`bcm_timî_gëtime
(
bcm_timî_id
 
timî_id
, 
ôimî•ec
 *
vÆue
);

37 
	`bcm_timî_£âime
(
bcm_timî_id
 
timî_id
, c⁄° 
ôimî•ec
 *
vÆue
);

38 
	`bcm_timî_c⁄√˘
(
bcm_timî_id
 
timî_id
, 
bcm_timî_cb
 
func
, 
d©a
);

39 
	`bcm_timî_ˇn˚l
(
bcm_timî_id
 
timî_id
);

40 
	`bcm_timî_ch™ge_expúytime
(
bcm_timî_id
 
timî_id
, c⁄° 
ôimî•ec
 *
timî_•ec
);

	@crc32.c

1 
	~"zlib.h
"

3 
	#loˇl
 

	)

4 
	#ZEXPORT


	)

5 
¸c32
 (, const *, );

7 
loˇl
 
	g¸c_èbÀ_em±y
 = 1;

8 
loˇl
 
uL⁄gf
 
	g¸c_èbÀ
[256];

9 
loˇl
 
make_¸c_èbÀ
 
OF
(());

35 
loˇl
 
	$make_¸c_èbÀ
()

37 
uL⁄g
 
c
;

38 
n
, 
k
;

39 
uL⁄g
 
pﬁy
;

41 c⁄° 
Byã
 
p
[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};

44 
pﬁy
 = 0L;

45 
n
 = 0;Ç < (
p
)/(
Byã
);Ç++)

46 
pﬁy
 |1L << (31 - 
p
[
n
]);

48 
n
 = 0;Ç < 256;Ç++)

50 
c
 = (
uL⁄g
)
n
;

51 
k
 = 0; k < 8; k++)

52 
c
 = c & 1 ? 
pﬁy
 ^ (c >> 1) : c >> 1;

53 
¸c_èbÀ
[
n
] = 
c
;

55 
¸c_èbÀ_em±y
 = 0;

56 
	}
}

58 
	#DO1
(
buf
Ë
¸c
 = 
¸c_èbÀ
[(()¸¯^ (*buf++)Ë& 0xff] ^ (¸¯>> 8);

	)

59 
	#DO2
(
buf
Ë
	`DO1
(buf); DO1(buf);

	)

60 
	#DO4
(
buf
Ë
	`DO2
(buf); DO2(buf);

	)

61 
	#DO8
(
buf
Ë
	`DO4
(buf); DO4(buf);

	)

64 
uL⁄g
 
ZEXPORT
 
	$¸c32
(
¸c
, 
buf
, 
Àn
)

65 
uL⁄g
 
¸c
;

66 c⁄° 
Byãf
 *
buf
;

67 
uI¡
 
Àn
;

69 i‡(
¸c_èbÀ_em±y
)

70 
	`make_¸c_èbÀ
();

71 
¸c
 = crc ^ 0xffffffffL;

72 
Àn
 >= 8)

74 
	`DO8
(
buf
);

75 
Àn
 -= 8;

77 i‡(
Àn
) do {

78 
	`DO1
(
buf
);

79 } --
Àn
);

80  
¸c
 ^ 0xffffffffL;

81 
	}
}

	@ezp-lib.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<√töë/ö.h
>

5 
	~<bcmnvøm.h
>

6 
	~<as£π.h
>

7 
	~"ezp-lib.h
"

8 
	~"sh¨ed.h
"

11 
	s©å
 {

12 *
	m«me
;

13 (*
	mfunc_‹ig
)(*, *, *, );

14 (*
	mfunc_wøp
)(*, *, *, );

18 
	$show_íabÀ_vÆue
(*
ty≥
, *
vÆ
, *
buf
, 
bsize
)

20 i‡(!
vÆ
) {

21  
EZPLIB_NO_ATTRIBUTE
;

24 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%s",

25 !
	`°rcmp
(
vÆ
, "1"Ë? "íabÀd" : "dißbÀd"Ë>
bsize
) {

26  
EZPLIB_VAL_TRUNC
;

29  
	`°æí
(
buf
);

30 
	}
}

33 
	$show_vÆue
(*
ty≥
, *
vÆ
, *
buf
, 
bsize
)

35 i‡(!
vÆ
) {

36  
EZPLIB_NO_ATTRIBUTE
;

39 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%s", 
vÆ
) >= bsize) {

40  
EZPLIB_VAL_TRUNC
;

42  
	`°æí
(
buf
);

43 
	}
}

45 *
	gi·y≥
[] = { "w™", "œn", 
NULL
 };

48 
	$show_if_vÆue
(*
ty≥
, *
vÆ
, *
buf
, 
bsize
)

50 *
±r
;

51 
i
, 
Àn
, 
idx
;

53 i‡(!
vÆ
) {

54  
EZPLIB_NO_ATTRIBUTE
;

57 
i
 = 0; 
i·y≥
[i]; i++) {

58 
Àn
 = 
	`°æí
(
i·y≥
[
i
]);

59 i‡(!
	`°rcmp
(
vÆ
, 
i·y≥
[
i
])) {

64 i‡(!
i·y≥
[
i
]) {

65 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%s", 
vÆ
) >= bsize) {

66  
EZPLIB_VAL_TRUNC
;

69 
±r
 = 
vÆ
 + 
Àn
;

71 
idx
 = 
	`©oi
(
±r
) + 1;

72 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%s%d", 
i·y≥
[
i
], 
idx
) >= bsize) {

73  
EZPLIB_VAL_TRUNC
;

77  
	`°æí
(
buf
);

78 
	}
}

81 
	$show_¥Ÿo_vÆue
(*
ty≥
, *
vÆ
, *
buf
, 
bsize
)

83 i‡(!
vÆ
) {

84  
EZPLIB_NO_ATTRIBUTE
;

87 i‡(!
	`°rcmp
(
vÆ
, "both")) {

88 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "UDP/TCP") >= bsize) {

89  
EZPLIB_VAL_TRUNC
;

91 } i‡(!
	`°rcmp
(
vÆ
, "tcp")) {

92 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "TCP") >= bsize) {

93  
EZPLIB_VAL_TRUNC
;

95 } i‡(!
	`°rcmp
(
vÆ
, "udp")) {

96 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "UDP") >= bsize) {

97  
EZPLIB_VAL_TRUNC
;

100 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%s", 
vÆ
) >= bsize) {

101  
EZPLIB_VAL_TRUNC
;

104  
	`°æí
(
buf
);

105 
	}
}

109 
	$show_mask_vÆue
(*
ty≥
, *
vÆ
, *
buf
, 
bsize
)

111 
i
;

112 
mask
;

113 
ö_addr
 
√tmask
;

115 i‡(!
vÆ
) {

116  
EZPLIB_NO_ATTRIBUTE
;

119 
maskbôs
 = 
	`©oi
(
vÆ
);

121 i‡(1 <
maskbôs
 && maskbits <= 32) {

122 
mask
 = 0;

123  
i
=0 ; i<
maskbôs
 ; i++ )

124 
mask
 |1<<(31-
i
);

125 
√tmask
.
s_addr
 = 
	`ht⁄l
(
mask
);

126 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%s", 
	`öë_¡ﬂ
(
√tmask
)) >= bsize) {

127  
EZPLIB_VAL_TRUNC
;

130 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "") >= bsize) {

131  
EZPLIB_VAL_TRUNC
;

135  
	`°æí
(
buf
);

136 
	}
}

140 
	$show_mask2öt_vÆue
(*
ty≥
, *
vÆ
, *
buf
, 
bsize
)

142 
ö_addr
 
√tmask
;

143 
mask
;

144 
maskbôs
;

146 i‡(!
vÆ
) {

147  
EZPLIB_NO_ATTRIBUTE
;

149 i‡(
	`öë_©⁄
(
vÆ
,&
√tmask
)) {

150 
mask
 = 
	`¡ohl
(
√tmask
.
s_addr
);

151  
maskbôs
=32 ; (
mask
 & (1L<<(32-maskbits))) == 0 ; maskbits-- );

152 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%d", 
maskbôs
) >= bsize) {

153  
EZPLIB_VAL_TRUNC
;

156 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "") >= bsize) {

157  
EZPLIB_VAL_TRUNC
;

160  
	`°æí
(
buf
);

161 
	}
}

164 
	$show_b64_vÆue
(*
ty≥
, *
vÆ
, *
buf
, 
bsize
)

166 
ouéí
 = 
EZPLIB_BUF_LEN
;

167 
tmp
[
EZPLIB_BUF_LEN
];

168 i‡(!
vÆ
) {

169  
EZPLIB_NO_ATTRIBUTE
;

172 
	`ba£64_decode
((*)
vÆ
, 
	`°æí
(val),

173 (*)
tmp
, &
ouéí
);

174 
tmp
[
ouéí
] = '\0';

175 i‡(
	`¢¥ötf
(
buf
, 
bsize
, "%s", 
tmp
) >= bsize) {

176  
EZPLIB_VAL_TRUNC
;

178  
	`°æí
(
buf
);

179 
	}
}

180 #ifde‡
AXIMDDNS


183 
©å
 
	gaximddns_ruÀ_©å
[] = {

184 { "u£r_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

185 { "u£r_«me", 
show_vÆue
, 
show_íabÀ_vÆue
 },

186 { "u£r_cou¡î", 
show_vÆue
, 
show_íabÀ_vÆue
 },

187 { "deÁu…_cou¡î", 
show_vÆue
, 
show_íabÀ_vÆue
 },

188 { "åy˙¡_cou¡down", 
show_vÆue
, 
show_íabÀ_vÆue
 },

189 { 
NULL
, NULL, NULL }

194 
©å
 
	gaximddns_tmp_ruÀ_©å
[] = {

195 { "u£r_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

196 { "u£r_«me", 
show_vÆue
, 
show_íabÀ_vÆue
 },

197 { "u£r_cou¡î", 
show_vÆue
, 
show_íabÀ_vÆue
 },

198 { "w™_ù", 
show_vÆue
, 
show_íabÀ_vÆue
 },

199 { 
NULL
, NULL, NULL }

203 #ifde‡
QFILE_CGI


205 
©å
 
	gcgi_¥ogªss_©å
[] = {

206 { "pid", 
show_vÆue
, show_value },

207 { "c›y_fûe", 
show_vÆue
, show_value },

208 { "c›y_numbî", 
show_vÆue
, show_value },

209 { "fûes_cou¡", 
show_vÆue
, show_value },

210 { "c›y_size", 
show_vÆue
, show_value },

211 { "≥r˚¡", 
show_vÆue
, show_value },

212 { "c›yög", 
show_vÆue
, show_value },

213 { "c›y_°©us", 
show_vÆue
, show_value },

214 { 
NULL
, NULL, NULL }

219 
©å
 
	gmac_£n£_©å
[] = {

220 { "¥Ÿo", 
show_vÆue
, show_value },

221 { "£rvî_ù", 
show_vÆue
, show_value },

222 { "£rvî_p‹t", 
show_vÆue
, show_value },

223 { "£rvî_time", 
show_vÆue
, show_value },

224 { "£rvî_timeout", 
show_vÆue
, show_value },

225 { "wds_íabÀ", 
show_vÆue
, show_value },

226 { "ªmŸe_ù", 
show_vÆue
, show_value },

227 { 
NULL
, NULL, NULL }

230 #i‡
deföed
 (
PLATFORM_ALS
)

231 
©å
 
	gfûe_mode_©å
[] = {

232 { "íabÀ", 
show_vÆue
, show_value },

233 { "sd", 
show_vÆue
, show_value },

234 { "usb", 
show_vÆue
, show_value },

235 { "ªc‹d_1", 
show_vÆue
, show_value },

236 { "ªc‹d_2", 
show_vÆue
, show_value },

237 { "ªc‹d_3", 
show_vÆue
, show_value },

238 { 
NULL
, NULL, NULL }

240 
©å
 
	gªœy_scheduÀ_©å
[] = {

241 { "sun", 
show_vÆue
, show_value },

242 { "m⁄", 
show_vÆue
, show_value },

243 { "tue", 
show_vÆue
, show_value },

244 { "wed", 
show_vÆue
, show_value },

245 { "thu", 
show_vÆue
, show_value },

246 { "‰i", 
show_vÆue
, show_value },

247 { "ßt", 
show_vÆue
, show_value },

248 { 
NULL
, NULL, NULL }

250 
©å
 
	gmaû_©å
[] = {

251 { "b©ãry", 
show_vÆue
, show_value },

252 { "sd", 
show_vÆue
, show_value },

253 { "usb", 
show_vÆue
, show_value },

254 { "ªœy", 
show_vÆue
, show_value },

255 { "gpio", 
show_vÆue
, show_value },

256 { "sms", 
show_vÆue
, show_value },

257 { "maû", 
show_vÆue
, show_value },

258 { "addªss_1", 
show_vÆue
, show_value },

259 { "addªss_2", 
show_vÆue
, show_value },

260 { "£nd_maû", 
show_vÆue
, show_value },

261 { "emaû", 
show_vÆue
, show_value },

262 { "ph⁄e", 
show_vÆue
, show_value },

263 { "£rvî", 
show_vÆue
, show_value },

264 { "a˘", 
show_vÆue
, show_value },

265 { "pwd", 
show_vÆue
, show_value },

266 { 
NULL
, NULL, NULL }

268 
©å
 
	gÁûovî_©å
[] = {

269 { "íabÀ", 
show_vÆue
, show_value },

270 { "ty≥", 
show_vÆue
, show_value },

271 { "cou¡", 
show_vÆue
, show_value },

272 { 
NULL
, NULL, NULL }

274 
©å
 
	gÆît_©å
[] = {

275 { "b©ãry", 
show_vÆue
, show_value },

276 { "sd", 
show_vÆue
, show_value },

277 { "usb", 
show_vÆue
, show_value },

278 { "ªœy", 
show_vÆue
, show_value },

279 { "gpio", 
show_vÆue
, show_value },

280 { 
NULL
, NULL, NULL }

282 
©å
 
	gªœy_©å
[] = {

283 { "íabÀ", 
show_vÆue
, show_value },

284 { "›ti⁄", 
show_vÆue
, show_value },

285 { 
NULL
, NULL, NULL }

287 
©å
 
	gÆs_b©ãry_ruÀ_©å
[] = {

288 {"b©ãry", 
show_vÆue
, show_value},

289 { 
NULL
, NULL, NULL }

291 
©å
 
	gÆs_°©us_ruÀ_©å
[] = {

292 {"íabÀ", 
show_vÆue
, show_value},

293 {"mode", 
show_vÆue
, show_value},

294 {"tx", 
show_vÆue
, show_value},

295 {"rx", 
show_vÆue
, show_value},

296 {"i•1", 
show_vÆue
, show_value},

297 {"i•2", 
show_vÆue
, show_value},

298 {"i•3", 
show_vÆue
, show_value},

299 {"i•4", 
show_vÆue
, show_value},

300 { 
NULL
, NULL, NULL }

302 
©å
 
	gÆs_£rül_ruÀ_©å
[] = {

303 {"Æüs", 
show_vÆue
, show_value},

304 {"baudøã", 
show_vÆue
, show_value},

305 {"d©abô", 
show_vÆue
, show_value},

306 {"°›bô", 
show_vÆue
, show_value},

307 {"∑rôy", 
show_vÆue
, show_value},

308 {"Êow", 
show_vÆue
, show_value},

309 {"fifo", 
show_vÆue
, show_value},

310 {"devi˚", 
show_vÆue
, show_value},

311 { 
NULL
, NULL, NULL }

313 
©å
 
	gÆs_›î©ög_ruÀ_©å
[] = {

314 {"mode", 
show_vÆue
, show_value},

315 {"Æive", 
show_vÆue
, show_value},

316 {"öa˘ive", 
show_vÆue
, show_value},

317 {"max_c⁄√˘", 
show_vÆue
, show_value},

318 {"jammed_ù", 
show_vÆue
, show_value},

319 { 
NULL
, NULL, NULL }

322 
©å
 
	gÆs_›î©ög_d©a_∑ckög_ruÀ_©å
[] = {

323 {"Àngth", 
show_vÆue
, show_value},

324 {"å™smô", 
show_vÆue
, show_value},

325 { 
NULL
, NULL, NULL }

328 
©å
 
	gÆs_›î©ög_›ti⁄_ruÀ_©å
[] = {

329 {"t˝_p‹t", 
show_vÆue
, show_value},

330 {"ù_1", 
show_vÆue
, show_value},

331 {"ù_p‹t_1", 
show_vÆue
, show_value},

332 {"ù_2", 
show_vÆue
, show_value},

333 {"ù_p‹t_2", 
show_vÆue
, show_value},

334 {"ù_3", 
show_vÆue
, show_value},

335 {"ù_p‹t_3", 
show_vÆue
, show_value},

336 {"ù_4", 
show_vÆue
, show_value},

337 {"ù_p‹t_4", 
show_vÆue
, show_value},

338 {"p‹t_1", 
show_vÆue
, show_value},

339 {"p‹t_2", 
show_vÆue
, show_value},

340 {"p‹t_3", 
show_vÆue
, show_value},

341 {"p‹t_4", 
show_vÆue
, show_value},

342 {"udp_p‹t", 
show_vÆue
, show_value},

343 { 
NULL
, NULL, NULL }

348 
©å
 
	g∂ug_ruÀ_©å
[] = {

349 { "ëhî√t", 
show_vÆue
, show_value },

350 { "wi•", 
show_vÆue
, show_value },

351 { "usb", 
show_vÆue
, show_value },

352 { 
NULL
, NULL, NULL }

355 
©å
 
	g˙¡_ruÀ_©å
[] = {

356 { "ex∑nd", 
show_vÆue
, show_value },

357 { "«me", 
show_vÆue
, show_value },

358 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

359 { "c⁄√˘i⁄", 
show_vÆue
, show_value },

360 { "¥Ÿo", 
show_vÆue
, show_value },

361 { 
NULL
, NULL, NULL }

365 
©å
 
	g‰_ruÀ_©å
[] = {

366 { "«me", 
show_vÆue
, show_value },

367 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

368 { "extif", 
show_vÆue
, show_value },

369 { "¥Ÿo", 
show_vÆue
, 
show_¥Ÿo_vÆue
 },

370 { "exç‹t_°¨t", 
show_vÆue
, show_value },

371 { "exç‹t_íd", 
show_vÆue
, show_value },

372 { "ùaddr", 
show_vÆue
, show_value },

373 { "öp‹t_°¨t", 
show_vÆue
, show_value },

374 { "öp‹t_íd", 
show_vÆue
, show_value },

375 { 
NULL
, NULL, NULL }

379 
©å
 
	gwiz¨d_ruÀ_©å
[] = {

380 { "£t_wiz¨d", 
show_vÆue
, show_value },

381 { "admö", 
show_vÆue
, show_value },

382 { "mode", 
show_vÆue
, show_value },

383 { "w™_åad", 
show_vÆue
, show_value },

384 { "w™_ww™", 
show_vÆue
, show_value },

385 { "bw", 
show_vÆue
, show_value },

386 { "time", 
show_vÆue
, show_value },

387 { "wifi", 
show_vÆue
, show_value },

388 { 
NULL
, NULL, NULL }

392 
©å
 
	gvs_ruÀ_©å
[] = {

393 { "«me", 
show_vÆue
, show_value },

394 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

395 { "extif", 
show_vÆue
, show_value },

396 { "ödex", 
show_vÆue
, show_value },

397 { "w™_ùaddr", 
show_vÆue
, show_value },

398 { "m≠≥d_ùaddr", 
show_vÆue
, show_value },

399 { 
NULL
, NULL, NULL }

403 
©å
 
	gw™_maö_ruÀ_©å
[] = {

404 { "«me", 
show_vÆue
, show_value },

405 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

406 { "mtu", 
show_vÆue
, show_value },

407 { "°p", 
show_vÆue
, show_value },

408 { "maxcou¡", 
show_vÆue
, show_value },

409 { 
NULL
, NULL, NULL }

413 
©å
 
	gw™_dëe˘_ruÀ_©å
[] = {

414 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

415 { "thªshﬁd", 
show_vÆue
, show_value },

416 { "timeout", 
show_vÆue
, show_value },

417 { "ty≥", 
show_vÆue
, show_value },

418 { "ho°_ty≥", 
show_vÆue
, show_value },

419 { "ho°", 
show_vÆue
, show_value },

420 { 
NULL
, NULL, NULL }

424 
©å
 
	gw™_lb_ruÀ_©å
[] = {

425 { "ty≥", 
show_vÆue
, show_value },

426 { "weight", 
show_vÆue
, show_value },

427 { "èrgë", 
show_vÆue
, show_value },

428 { "backup", 
show_vÆue
, show_value },

429 { "Áûback", 
show_vÆue
, show_value },

430 { 
NULL
, NULL, NULL }

434 
©å
 
	gw™_°©us_ruÀ_©å
[] = {

435 { "°©e", 
show_vÆue
, show_value },

436 { "åycou¡", 
show_vÆue
, show_value },

437 { "a˘i⁄", 
show_vÆue
, show_value },

438 { "u±ime", 
show_vÆue
, show_value },

439 #i‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
Ë|| deföed (
PLATFORM_ALS
)

440 { "wi•_åycou¡", 
show_vÆue
, show_value },

442 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

443 { "usb_åycou¡", 
show_vÆue
, show_value },

445 #i‡
deföed
 (
EZP_SUB_BRAND_GARMIN
)

446 { "¥i‹ôy_ödex", 
show_vÆue
, show_value },

447 { "¥i‹ôy_num", 
show_vÆue
, show_value },

449 { 
NULL
, NULL, NULL }

454 
©å
 
	gw™_a˘i⁄_°yÀ_ruÀ_©å
[] = {

455 { "upfb", 
show_vÆue
, show_value },

456 { "downfb", 
show_vÆue
, show_value },

457 { 
NULL
, NULL, NULL }

461 
©å
 
	g°‹age_devi˚_mou¡_ruÀ_©å
[] = {

462 { "up‹t", 
show_vÆue
, show_value },

463 { "m¡", 
show_vÆue
, show_value },

464 { "smb_¸óã_mask", 
show_vÆue
, show_value },

465 { "smb_dú_mask", 
show_vÆue
, show_value },

466 { "smb_gue°_ok", 
show_vÆue
, show_value },

467 { "smb_ªad_⁄ly", 
show_vÆue
, show_value },

468 { 
NULL
, NULL, NULL }

471 
©å
 
	gcou¡down_ruÀ_©å
[] = {

472 { "w_íabÀ", 
show_vÆue
, show_value },

473 { "w_cou¡down", 
show_vÆue
, show_value },

474 { "w_cou¡", 
show_vÆue
, show_value },

475 { "p_íabÀ", 
show_vÆue
, show_value },

476 { "p_cou¡down", 
show_vÆue
, show_value },

477 { "p_cou¡", 
show_vÆue
, show_value },

478 { 
NULL
, NULL, NULL }

482 
©å
 
	gli˚n£_°©us_ruÀ_©å
[] = {

483 { "°©e", 
show_vÆue
, show_value },

484 { "åycou¡", 
show_vÆue
, show_value },

485 { 
NULL
, NULL, NULL }

489 
©å
 
	gw™_u≤p_°©us_ruÀ_©å
[] = {

490 { "°©e", 
show_vÆue
, show_value },

491 { "a˘i⁄", 
show_vÆue
, show_value },

492 { "¥Ÿo", 
show_vÆue
, show_value },

493 { 
NULL
, NULL, NULL }

497 
©å
 
	gw™_bw_ruÀ_©å
[] = {

498 { "ty≥", 
show_vÆue
, show_value },

499 { "dl", 
show_vÆue
, show_value },

500 { "ul", 
show_vÆue
, show_value },

501 { "ex≥π_dl", 
show_vÆue
, show_value },

502 { "ex≥π_ul", 
show_vÆue
, show_value },

503 { "lök_≥r˚¡", 
show_vÆue
, show_value },

504 { "globÆ_≥r˚¡", 
show_vÆue
, show_value },

505 { "u£r_≥r˚¡", 
show_vÆue
, show_value },

506 { "dbm_upmax", 
show_vÆue
, show_value },

507 { "dbm_upmö", 
show_vÆue
, show_value },

508 { "dbm_downmax", 
show_vÆue
, show_value },

509 { "dbm_downmö", 
show_vÆue
, show_value },

510 { 
NULL
, NULL, NULL }

515 
©å
 
	gw™_°©ic_ruÀ_©å
[] = {

516 { "ùaddr", 
show_vÆue
, show_value },

517 { "mask", 
show_vÆue
, show_value },

518 { "g©eway", 
show_vÆue
, show_value },

519 { "dns1", 
show_vÆue
, show_value },

520 { "dns2", 
show_vÆue
, show_value },

521 { "wös", 
show_vÆue
, show_value },

522 { 
NULL
, NULL, NULL }

526 
©å
 
	gw™_dh˝_ruÀ_©å
[] = {

527 { "ho°«me", 
show_vÆue
, show_value },

528 { "domaö", 
show_vÆue
, show_value },

529 { "Àa£", 
show_vÆue
, show_value },

530 { 
NULL
, NULL, NULL }

534 
©å
 
	gw™_µp€_ruÀ_©å
[] = {

535 { "auth", 
show_vÆue
, show_value },

536 { "u£∫ame", 
show_b64_vÆue
, 
show_vÆue
 },

537 { "∑sswd", 
show_b64_vÆue
, 
show_vÆue
 },

538 { "dem™d", 
show_vÆue
, show_value },

539 { "idÀtime", 
show_vÆue
, show_value },

540 { "echo_Áûuª", 
show_vÆue
, show_value },

541 { "ªdüÕîiod", 
show_vÆue
, show_value },

542 { "mru", 
show_vÆue
, show_value },

543 { "mtu", 
show_vÆue
, show_value },

544 { 
NULL
, NULL, NULL }

548 
©å
 
	gw™_bigp⁄d_ruÀ_©å
[] = {

549 { "íabÀ", 
show_vÆue
, show_value },

550 { "£rvî", 
show_vÆue
, show_value },

551 { "u£∫ame", 
show_vÆue
, show_value },

552 { "∑sswd", 
show_vÆue
, show_value },

553 { 
NULL
, NULL, NULL }

559 
©å
 
	gw™_ww™_ruÀ_©å
[] = {

560 { "≠n_ty≥", 
show_vÆue
, show_value },

561 { "loˇti⁄", 
show_vÆue
, show_value },

562 { "i•", 
show_vÆue
, show_value },

563 { "≠n", 
show_vÆue
, show_value },

564 { "pö", 
show_vÆue
, show_value },

565 { "mode", 
show_vÆue
, show_value },

566 { "auth", 
show_vÆue
, show_value },

567 { "u£∫ame", 
show_vÆue
, show_value },

568 { "∑sswd", 
show_vÆue
, show_value },

569 { "dem™d", 
show_vÆue
, show_value },

570 { "idÀtime", 
show_vÆue
, show_value },

571 { "echo_Áûuª", 
show_vÆue
, show_value },

572 { "ªdüÕîiod", 
show_vÆue
, show_value },

573 { "mru", 
show_vÆue
, show_value },

574 { "mtu", 
show_vÆue
, show_value },

575 { "dül°r", 
show_vÆue
, show_value },

576 { "bønd", 
show_vÆue
, show_value },

577 { "modñ", 
show_vÆue
, show_value },

578 { "âynum", 
show_vÆue
, show_value },

579 { "d©©ty", 
show_vÆue
, show_value },

580 { "˘æây", 
show_vÆue
, show_value },

581 { "dev«me", 
show_vÆue
, show_value },

582 { "Êag", 
show_vÆue
, show_value },

583 { "turbﬁök", 
show_vÆue
, 
show_íabÀ_vÆue
 },

584 { 
NULL
, NULL, NULL }

588 
©å
 
	gw™_b¨ry_ruÀ_©å
[] = {

589 { "b¨ry∑sswd", 
show_vÆue
, show_value },

590 { "≠n_ty≥", 
show_vÆue
, show_value },

591 { "loˇti⁄", 
show_vÆue
, show_value },

592 { "i•", 
show_vÆue
, show_value },

593 { "≠n", 
show_vÆue
, show_value },

594 { "u£∫ame", 
show_vÆue
, show_value },

595 { "∑ssw‹d", 
show_vÆue
, show_value },

596 { "dül°r", 
show_vÆue
, show_value },

597 { "turbﬁök", 
show_vÆue
, 
show_íabÀ_vÆue
 },

598 { 
NULL
, NULL, NULL }

602 
©å
 
	gw™_htc_ruÀ_©å
[] = {

603 { "ho°«me", 
show_vÆue
, show_value },

604 { "domaö", 
show_vÆue
, show_value },

605 { "Àa£", 
show_vÆue
, show_value },

606 { "mtu", 
show_vÆue
, show_value },

607 { "turbﬁök", 
show_vÆue
, 
show_íabÀ_vÆue
 },

608 { 
NULL
, NULL, NULL }

612 
©å
 
	gw™_be˚em_ruÀ_©å
[] = {

613 { "i•", 
show_vÆue
, show_value },

614 { "u£∫ame", 
show_vÆue
, show_value },

615 { "∑ssw‹d", 
show_vÆue
, show_value },

616 { 
NULL
, NULL, NULL }

620 
©å
 
	gw™_wimax_ruÀ_©å
[] = {

621 { "mtu", 
show_vÆue
, show_value },

622 { "turbﬁök", 
show_vÆue
, 
show_íabÀ_vÆue
 },

623 { 
NULL
, NULL, NULL }

627 
©å
 
	gw™_ùh⁄e_ruÀ_©å
[] = {

628 { "ho°«me", 
show_vÆue
, show_value },

629 { "domaö", 
show_vÆue
, show_value },

630 { "Àa£", 
show_vÆue
, show_value },

631 { "mtu", 
show_vÆue
, show_value },

632 { "turbﬁök", 
show_vÆue
, 
show_íabÀ_vÆue
 },

633 { 
NULL
, NULL, NULL }

637 
©å
 
	gw™_ww™_¥obe_ruÀ_©å
[] = {

638 { "bønd", 
show_vÆue
, show_value },

639 { "modñ", 
show_vÆue
, show_value },

640 { "sig«l", 
show_vÆue
, show_value },

641 { "âynum", 
show_vÆue
, show_value },

642 { "d©©ty", 
show_vÆue
, show_value },

643 { "˘æây", 
show_vÆue
, show_value },

644 { "dev«me", 
show_vÆue
, show_value },

645 { "Êag", 
show_vÆue
, show_value },

646 { "sig", 
show_vÆue
, show_value },

647 { "imei", 
show_vÆue
, show_value },

648 { "¥ovidî", 
show_vÆue
, show_value },

649 { "fúmw¨e", 
show_vÆue
, show_value },

650 { "≠n", 
show_vÆue
, show_value },

651 { "víd‹", 
show_vÆue
, show_value },

652 { "¥odu˘", 
show_vÆue
, show_value },

653 { "°ayfg", 
show_vÆue
, show_value },

654 { 
NULL
, NULL, NULL }

658 
©å
 
	gw™_hwaddr_ruÀ_deÁu…_©å
[] = {

659 { "hwaddr", 
show_vÆue
, show_value },

660 { 
NULL
, NULL, NULL }

664 
©å
 
	gw™_hwaddr_˛⁄e_ruÀ_©å
[] = {

665 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

666 { "hwaddr", 
show_vÆue
, show_value },

667 { 
NULL
, NULL, NULL }

674 
©å
 
	gw™_ddns_ruÀ_©å
[] = {

675 { "«me", 
show_vÆue
, show_value },

676 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

677 { "ty≥", 
show_vÆue
, show_value },

678 { "u£∫ame", 
show_vÆue
, show_value },

679 { "∑sswd", 
show_vÆue
, show_value },

680 { "ho°«me", 
show_vÆue
, show_value },

681 { "£rvî", 
show_vÆue
, show_value },

682 { 
NULL
, NULL, NULL }

686 
©å
 
	gw™_≠∂e_fûãr_ruÀ_©å
[] = {

687 { "ho°", 
show_vÆue
, show_value },

688 { "ùaddr", 
show_vÆue
, show_value },

689 { 
NULL
, NULL, NULL }

697 
©å
 
	gw™_›ídns_ruÀ_©å
[] = {

698 { "«me", 
show_vÆue
, show_value },

699 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

700 { "u£∫ame", 
show_vÆue
, show_value },

701 { "∑sswd", 
show_vÆue
, show_value },

702 { "ªdúe˘", 
show_vÆue
, show_value },

703 { "œbñ", 
show_vÆue
, show_value },

704 { 
NULL
, NULL, NULL }

708 
©å
 
	gœn_maö_ruÀ_©å
[] = {

709 { "«me", 
show_vÆue
, show_value },

710 { "íabÀ", 
show_vÆue
, show_value },

711 { "mtu", 
show_vÆue
, show_value },

712 { "°p", 
show_vÆue
, show_value },

713 { "weight", 
show_vÆue
, show_value },

714 { 
NULL
, NULL, NULL }

722 
©å
 
	gw™_µç_l2ç_globÆ_ruÀ_©å
[] = {

723 { "íabÀ", 
show_vÆue
, show_value },

724 { "£À˘ed", 
show_vÆue
, show_value },

725 { "íabÀd", 
show_vÆue
, show_value },

731 
©å
 
	gw™_µç_l2ç_ruÀ_©å
[] = {

732 { "íabÀ", 
show_vÆue
, show_value },

733 { "«me", 
show_vÆue
, show_value },

734 { "v≤_ty≥", 
show_vÆue
, show_value },

735 { "ho°", 
show_vÆue
, show_value },

736 { "ùaddr", 
show_vÆue
, show_value },

737 { "√tmask", 
show_vÆue
, show_value },

738 { "g©eway", 
show_vÆue
, show_value },

739 { "u£∫ame", 
show_vÆue
, show_value },

740 { "∑sswd", 
show_vÆue
, show_value },

741 { "«ûup", 
show_vÆue
, show_value },

742 { "timeout", 
show_vÆue
, show_value },

743 { "µpùty≥", 
show_vÆue
, show_value },

744 { "cu°om_ùaddr", 
show_vÆue
, show_value },

745 { "ícmode", 
show_vÆue
, show_value },

746 { "auth", 
show_vÆue
, show_value },

747 { 
NULL
, NULL, NULL }

751 
©å
 
	gw™_l2ç_°©us_ruÀ_©å
[] = {

752 { "fú°_°¨t", 
show_vÆue
, show_value },

753 { 
NULL
, NULL, NULL }

757 
©å
 
	gœn_hwaddr_ruÀ_deÁu…_©å
[] = {

758 { "hwaddr", 
show_vÆue
, show_value },

759 { 
NULL
, NULL, NULL }

763 
©å
 
	gœn_hwaddr_˛⁄e_ruÀ_©å
[] = {

764 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

765 { "hwaddr", 
show_vÆue
, show_value },

766 { 
NULL
, NULL, NULL }

770 
©å
 
	g«t_ruÀ_©å
[] = {

771 { "hw_íabÀ", 
show_vÆue
, show_value },

772 { 
NULL
, NULL, NULL }

776 
©å
 
	ggue°_œn_ruÀ_©å
[] = {

777 { "íabÀ", 
show_vÆue
, show_value },

778 { "ùaddr", 
show_vÆue
, show_value },

779 { "mask", 
show_vÆue
, show_value },

780 { 
NULL
, NULL, NULL }

784 
©å
 
	gœn_°©ic_ruÀ_©å
[] = {

785 { "ùaddr", 
show_vÆue
, show_value },

786 { "mask", 
show_vÆue
, show_value },

787 { "g©eway", 
show_vÆue
, show_value },

788 { "dns", 
show_vÆue
, show_value },

789 { "wös", 
show_vÆue
, show_value },

790 { 
NULL
, NULL, NULL }

796 
©å
 
	gœn_dh˝s_ruÀ_©å
[] = {

797 { "«me", 
show_vÆue
, show_value },

798 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

799 { "°¨t", 
show_vÆue
, show_value },

800 { "num", 
show_vÆue
, show_value },

801 { "Àa£", 
show_vÆue
, show_value },

802 { "domaö", 
show_vÆue
, show_value },

803 { "wös", 
show_vÆue
, show_value },

804 { "dn°y≥", 
show_vÆue
, show_value},

805 { "dnßddr1", 
show_vÆue
, show_value},

806 { "dnßddr2", 
show_vÆue
, show_value},

807 { "dnßddr3", 
show_vÆue
, show_value},

808 { "dnßddr4", 
show_vÆue
, show_value},

809 { 
NULL
, NULL, NULL }

815 
©å
 
	gwl0_wds_©å
[] = {

816 { "hwaddr0", 
show_vÆue
, show_value },

817 { "hwaddr1", 
show_vÆue
, show_value },

818 { "hwaddr2", 
show_vÆue
, show_value },

819 { "hwaddr3", 
show_vÆue
, show_value },

820 { 
NULL
, NULL, NULL }

825 
©å
 
	gwl_wps_°a_ruÀ_©å
[] = {

826 { "mode", 
show_vÆue
, show_value },

827 { "pö", 
show_vÆue
, show_value },

828 { "ªg_ssid", 
show_vÆue
, show_value },

829 { "ªg_auth", 
show_vÆue
, show_value },

830 { "ªg_íc", 
show_vÆue
, show_value },

831 { "ªg_keyödex", 
show_vÆue
, show_value },

832 { "ªg_key", 
show_vÆue
, show_value },

833 { 
NULL
, NULL, NULL }

837 
©å
 
	gwl_wps_ruÀ_©å
[] = {

838 { "mode", 
show_vÆue
, show_value },

839 { "pö", 
show_vÆue
, show_value },

840 { "c⁄figuªd", 
show_vÆue
, show_value },

841 { "di•œy", 
show_vÆue
, show_value },

842 { 
NULL
, NULL, NULL }

845 
©å
 
	gbw_sbm_ruÀ_©å
[] = {

846 { "«me", 
show_vÆue
, show_value },

847 { "íabÀ", 
show_vÆue
, show_value },

848 { "öùaddr_°¨t", 
show_vÆue
, show_value },

849 { "öùaddr_íd", 
show_vÆue
, show_value },

850 { "öùaddr_num", 
show_vÆue
, show_value },

851 { "¥Ÿo", 
show_vÆue
, show_value },

852 { "p‹t_°¨t", 
show_vÆue
, show_value },

853 { "p‹t_íd", 
show_vÆue
, show_value },

854 { "extif", 
show_vÆue
, show_value },

855 { "bw_Æloc", 
show_vÆue
, show_value },

856 { "bw_øtio", 
show_vÆue
, show_value },

857 { "bw_u∂ﬂd", 
show_vÆue
, show_value },

858 { "bw_dow∆ﬂd", 
show_vÆue
, show_value },

859 { "sched_idx", 
show_vÆue
, show_value },

860 { "ex˚ss", 
show_vÆue
, show_value },

861 { "ex˚ss_øtio", 
show_vÆue
, show_value },

862 { "ex˚ss_u∂ﬂd", 
show_vÆue
, show_value },

863 { "ex˚ss_dow∆ﬂd", 
show_vÆue
, show_value },

864 #ifde‡
EZP_PROD_BRAND_PLANET


865 { "ds˝id", 
show_vÆue
, show_value },

866 { "ªm¨kds˝id", 
show_vÆue
, show_value },

867 { "groupid", 
show_vÆue
, show_value },

869 { 
NULL
, NULL, NULL }

872 
©å
 
	gbw_dbm_ruÀ_©å
[] = {

873 { "«me", 
show_vÆue
, show_value },

874 { "íabÀ", 
show_vÆue
, show_value },

875 { "öùaddr_°¨t", 
show_vÆue
, show_value },

876 { "öùaddr_íd", 
show_vÆue
, show_value },

877 { "öùaddr_num", 
show_vÆue
, show_value },

878 { "sched_idx", 
show_vÆue
, show_value }

882 
©å
 
	gbw_group_ruÀ_©å
[] = {

883 { "«me", 
show_vÆue
, show_value },

884 { "íabÀ", 
show_vÆue
, show_value },

885 { "bw_u¥©e", 
show_vÆue
, show_value },

886 { "bw_up˚û", 
show_vÆue
, show_value },

887 { "¥io", 
show_vÆue
, show_value },

888 { 
NULL
, NULL, NULL }

894 
©å
 
	gπ_ruÀ_©å
[] = {

895 { "«me", 
show_vÆue
, show_value },

896 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

897 { "§cùaddr_°¨t", 
show_vÆue
, show_value },

898 { "§cùaddr_íd", 
show_vÆue
, show_value },

899 { "d°ùaddr_°¨t", 
show_vÆue
, show_value },

900 { "d°ùaddr_íd", 
show_vÆue
, show_value },

901 { "¥Ÿo", 
show_vÆue
, 
show_¥Ÿo_vÆue
 },

902 { "§˝‹t_°¨t", 
show_vÆue
, show_value },

903 { "§˝‹t_íd", 
show_vÆue
, show_value },

904 { "d°p‹t_°¨t", 
show_vÆue
, show_value },

905 { "d°p‹t_íd", 
show_vÆue
, show_value },

906 { "extif", 
show_vÆue
, show_value },

907 { "routög_ty≥", 
show_vÆue
, show_value },

908 { "g©eway_ùaddr", 
show_vÆue
, show_value },

909 { 
NULL
, NULL, NULL }

913 
©å
 
	gwf_c⁄ã¡_ruÀ_©å
[] = {

914 { "a˘ivex_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

915 { "java_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

916 { "¥oxy_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

920 
©å
 
	gwf_ruÀ_©å
[] = {

921 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

922 { "keyw‹d", 
show_vÆue
, show_value },

923 { "ty≥", 
show_vÆue
, show_value },

924 { "ac˚ss", 
show_vÆue
, show_value },

928 
©å
 
	gsched_ruÀ_©å
[] = {

929 { "«me", 
show_vÆue
, show_value },

930 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

931 { "u£d", 
show_vÆue
, show_value },

932 { "°¨t_hour", 
show_vÆue
, show_value },

933 { "°¨t_mö", 
show_vÆue
, show_value },

934 { "°›_hour", 
show_vÆue
, show_value },

935 { "°›_mö", 
show_vÆue
, show_value },

936 { "sun", 
show_vÆue
, show_value },

937 { "m⁄", 
show_vÆue
, show_value },

938 { "tue", 
show_vÆue
, show_value },

939 { "wed", 
show_vÆue
, show_value },

940 { "thu", 
show_vÆue
, show_value },

941 { "‰i", 
show_vÆue
, show_value },

942 { "ßt", 
show_vÆue
, show_value },

943 { 
NULL
, NULL, NULL }

947 
©å
 
	g¸⁄_ruÀ_©å
[] = {

948 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

949 { "¡p_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

950 { "¡p_öãrvÆ", 
show_vÆue
, show_value },

951 { "ªboŸ_öãrvÆ", 
show_vÆue
, show_value },

952 { "ªboŸ_cou¡down", 
show_vÆue
, show_value },

953 { "ªboŸ_hour", 
show_vÆue
, show_value },

954 { "ddns_cou¡down", 
show_vÆue
, show_value },

955 { 
NULL
, NULL, NULL }

959 
©å
 
	g¡p_ruÀ_©å
[] = {

960 { "«me", 
show_vÆue
, show_value },

961 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

962 { "ty≥", 
show_vÆue
, show_value },

963 { "poﬁ", 
show_vÆue
, show_value },

964 { "ùaddr", 
show_vÆue
, show_value },

965 { "z⁄e", 
show_vÆue
, show_value },

966 { "daylight", 
show_vÆue
, show_value },

967 { 
NULL
, NULL, NULL }

971 
©å
 
	gvœn_ruÀ_©å
[] = {

972 { "«me", 
show_vÆue
, show_value },

973 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

974 { "i‚ame", 
show_vÆue
, show_value },

975 { "vid", 
show_vÆue
, show_value },

976 { "p‹tmembî", 
show_vÆue
, show_value },

977 #i‡
deföed
(
AR8316
Ë|| deföed(
AR8328
)

979 { "èg", 
show_vÆue
, show_value },

981 { "¥io", 
show_vÆue
, show_value },

983 { 
NULL
, NULL, NULL }

987 
©å
 
	gvœ≈‹t_ruÀ_©å
[] = {

988 { "«me", 
show_vÆue
, show_value },

989 { "p‹tid", 
show_vÆue
, show_value },

990 { "pvid", 
show_vÆue
, show_value },

992 { "èg", 
show_vÆue
, show_value },

993 #i‡
deföed
(
AR8316
Ë|| deföed(
AR8328
)

994 { "mode", 
show_vÆue
, show_value },

995 { "gmemb", 
show_vÆue
, show_value },

998 { "¥io", 
show_vÆue
, show_value },

999 { 
NULL
, NULL, NULL }

1003 
©å
 
	gbr_ruÀ_©å
[] = {

1004 { "«me", 
show_vÆue
, show_value },

1005 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1006 { "i‚ames", 
show_vÆue
, show_value },

1007 { "Êag", 
show_vÆue
, show_value },

1008 { 
NULL
, NULL, NULL }

1012 
©å
 
	gssh_ruÀ_©å
[] = {

1013 { "«me", 
show_vÆue
, show_value },

1014 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1015 { "p‹t", 
show_vÆue
, show_value },

1016 { 
NULL
, NULL, NULL }

1022 
©å
 
	glog_ruÀ_©å
[] = {

1023 { "«me", 
show_vÆue
, show_value },

1024 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1025 { "ùaddr", 
show_vÆue
, show_value },

1026 { "ùt_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1027 { "web_mgmt", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1028 { "dns", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1029 { "µp", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1030 { "u≤p", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1031 { "wúñess", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1032 { "¡p", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1033 { "sys_w¨nög", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1034 { "dh˝_£rv", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1035 { "dh˝_˛i", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1036 { "ddns", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1037 { "fúewÆl", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1038 { "ªmŸe_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1039 { "ªmŸe_ù", 
show_vÆue
, show_value },

1040 { "¥Ÿo", 
show_vÆue
, show_value },

1041 { "ªmŸe_p‹t", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1042 { 
NULL
, NULL, NULL }

1046 
©å
 
	gu≤p_ruÀ_©å
[] = {

1047 { "«me", 
show_vÆue
, show_value },

1048 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1049 { "pmp_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1050 { "extif", 
show_vÆue
, show_value },

1051 { "öif", 
show_vÆue
, show_value },

1052 { "p‹t", 
show_vÆue
, show_value },

1053 { 
NULL
, NULL, NULL }

1060 
©å
 
	gÊ_ruÀ_©å
[] = {

1061 { "«me", 
show_vÆue
, show_value },

1062 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1063 { "extif", 
show_vÆue
, 
show_if_vÆue
 },

1064 { "öif", 
show_vÆue
, 
show_if_vÆue
 },

1065 { "§cùaddr_°¨t", 
show_vÆue
, show_value },

1066 { "§cùaddr_íd", 
show_vÆue
, 
show_mask_vÆue
 },

1067 { "d°ùaddr_°¨t", 
show_vÆue
, show_value },

1068 { "d°ùaddr_íd", 
show_vÆue
, 
show_mask_vÆue
},

1069 { "¥Ÿo", 
show_vÆue
, 
show_¥Ÿo_vÆue
 },

1070 { "§˝‹t_°¨t", 
show_vÆue
, show_value },

1071 { "§˝‹t_íd", 
show_vÆue
, show_value },

1072 { "d°p‹t_°¨t", 
show_vÆue
, show_value },

1073 { "d°p‹t_íd", 
show_vÆue
, show_value },

1074 { "a˘i⁄", 
show_vÆue
, show_value },

1075 { "m¨k", 
show_vÆue
, show_value },

1076 { "bw_idx", 
show_vÆue
, show_value },

1077 { "sched_idx", 
show_vÆue
, show_value },

1078 { 
NULL
, NULL, NULL }

1083 
©å
 
	gÊ_hwaddr_ruÀ_©å
[] = {

1084 { "«me", 
show_vÆue
, show_value },

1085 { "hwaddr", 
show_vÆue
, show_value },

1086 { "a˘i⁄", 
show_vÆue
, show_value },

1087 { "a˛_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1088 { "¨p_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1089 { "dh˝_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1090 { "ùaddr", 
show_vÆue
, show_value },

1091 { 
NULL
, NULL, NULL }

1095 
©å
 
	g‰_dmz_ruÀ_©å
[] = {

1096 { "«me", 
show_vÆue
, show_value },

1097 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1098 { "ùaddr", 
show_vÆue
, show_value },

1099 { 
NULL
, NULL, NULL }

1104 
©å
 
	gtos_ruÀ_©å
[] = {

1105 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1106 { "icmp_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1107 { "dns_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1108 { "ssh_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1109 { "ã ë_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1110 { "check_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1111 { "ack_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1112 { 
NULL
, NULL, NULL }

1116 
©å
 
	gâl_ruÀ_©å
[] = {

1117 { "«me", 
show_vÆue
, show_value },

1118 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1119 { "vÆue", 
show_vÆue
, show_value },

1120 { 
NULL
, NULL, NULL }

1124 
©å
 
	gu£r_ruÀ_©å
[] = {

1125 { "u£r", 
show_vÆue
, show_value },

1126 { "≥rmissi⁄_˛ass", 
show_vÆue
, show_value },

1127 { 
NULL
, NULL, NULL }

1131 
©å
 
	ghâp_ruÀ_©å
[] = {

1132 { "«me", 
show_vÆue
, show_value },

1133 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1134 { "rmgt_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1135 { "u£∫ame", 
show_vÆue
, show_value },

1136 { "∑sswd", 
show_vÆue
, show_value },

1137 { "p‹t", 
show_vÆue
, show_value },

1138 { 
NULL
, NULL, NULL }

1142 
©å
 
	ghâp_ªdúe˘_ruÀ_©å
[] = {

1143 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1144 { 
NULL
, NULL, NULL }

1149 
©å
 
	g¢mp_ruÀ_©å
[] = {

1150 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1151 { "udµ‹t", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1152 { "t˝p‹t", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1153 { "communôy", 
show_vÆue
, show_value },

1154 { "víd‹", 
show_vÆue
, show_value },

1155 { "sy¢ame", 
show_vÆue
, show_value },

1156 { "loˇti⁄", 
show_vÆue
, show_value },

1157 { "c⁄è˘", 
show_b64_vÆue
, 
show_vÆue
 },

1158 { "timeout", 
show_vÆue
, show_value },

1159 { "auth", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1160 { 
NULL
, NULL, NULL }

1165 
©å
 
	gadtoﬁ_ruÀ_©å
[] = {

1166 { "pögiÁ˚", 
show_vÆue
, show_value },

1167 { "pögho°", 
show_vÆue
, show_value },

1168 { "pög˙t", 
show_vÆue
, show_value },

1169 { "¨pögiÁ˚", 
show_vÆue
, show_value },

1170 { "¨pögho°", 
show_vÆue
, show_value },

1171 { "¨pög˙t", 
show_vÆue
, show_value },

1172 { "åa˚rouãiÁ˚", 
show_vÆue
, show_value },

1173 { "åa˚rouãho°", 
show_vÆue
, show_value },

1174 { "åa˚rouã˙t", 
show_vÆue
, show_value },

1175 { 
NULL
, NULL, NULL }

1179 
©å
 
	g°©s_ruÀ_©å
[] = {

1180 { "«me", 
show_vÆue
, show_value },

1181 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1182 { "°ime", 
show_vÆue
, show_value },

1183 { "i‚ames", 
show_vÆue
, show_value },

1184 { 
NULL
, NULL, NULL }

1188 
©å
 
	gvnc_ruÀ_©å
[] = {

1189 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1190 { "vp‹t", 
show_vÆue
, show_value },

1191 { "•‹t", 
show_vÆue
, show_value },

1192 { "ùaddr", 
show_vÆue
, show_value },

1193 { "mode", 
show_vÆue
, show_value },

1194 { "evít_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1195 { "evít_ùaddr", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1196 { "evít_p‹t", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1197 { 
NULL
, NULL, NULL }

1201 
©å
 
	gvnc_Ælow_ruÀ_©å
[] = {

1202 { "ùaddr", 
show_vÆue
, show_value },

1203 { 
NULL
, NULL, NULL }

1207 
©å
 
	gµçd_ruÀ_©å
[] = {

1208 { "íabÀ", 
show_vÆue
, show_value },

1209 { "«me", 
show_vÆue
, show_value },

1210 { "ªdüÕîiod", 
show_vÆue
, show_value },

1211 { "mtu", 
show_vÆue
, show_value },

1212 { "mru", 
show_vÆue
, show_value },

1213 { "loˇlù", 
show_vÆue
, show_value },

1214 { "loˇlù_ønge", 
show_vÆue
, show_value },

1215 { "ªmŸeù", 
show_vÆue
, show_value },

1216 { "ªmŸeù_ønge", 
show_vÆue
, show_value },

1217 { "dns_auto_íabÀ", 
show_vÆue
, show_value },

1218 { "dns", 
show_vÆue
, show_value },

1219 { "ch≠_íabÀ", 
show_vÆue
, show_value },

1220 { "msch≠_íabÀ", 
show_vÆue
, show_value },

1221 { "msch≠v2_íabÀ", 
show_vÆue
, show_value },

1222 { "óp_íabÀ", 
show_vÆue
, show_value },

1223 { "∑p_íabÀ", 
show_vÆue
, show_value },

1224 { "mµe128_íabÀ", 
show_vÆue
, show_value },

1225 { "¥oxy¨p_íabÀ", 
show_vÆue
, show_value },

1226 { "«t_íabÀ", 
show_vÆue
, show_value },

1227 { 
NULL
, NULL, NULL }

1230 
©å
 
	gµçd_u£r_ruÀ_©å
[] = {

1231 { "íabÀ", 
show_vÆue
, show_value },

1232 { "u£∫ame", 
show_vÆue
, show_value },

1233 { "¥ovidî", 
show_vÆue
, show_value },

1234 { "∑sswd", 
show_vÆue
, show_value },

1235 { "ùaddr", 
show_vÆue
, show_value },

1236 { 
NULL
, NULL, NULL }

1240 
©å
 
	gl2çd_ruÀ_©å
[] = {

1241 { "íabÀ", 
show_vÆue
, show_value },

1242 { "«me", 
show_vÆue
, show_value },

1243 { "mtu", 
show_vÆue
, show_value },

1244 { "mru", 
show_vÆue
, show_value },

1245 { "loˇlù", 
show_vÆue
, show_value },

1246 { "loˇlù_ønge", 
show_vÆue
, show_value },

1247 { "ªmŸeù", 
show_vÆue
, show_value },

1248 { "ªmŸeù_ønge", 
show_vÆue
, show_value },

1249 { "dns_auto_íabÀ", 
show_vÆue
, show_value },

1250 { "dns", 
show_vÆue
, show_value },

1251 { "ch≠_íabÀ", 
show_vÆue
, show_value },

1252 { "∑p_íabÀ", 
show_vÆue
, show_value },

1253 { "¥oxy¨p_íabÀ", 
show_vÆue
, show_value },

1254 { "«t_íabÀ", 
show_vÆue
, show_value },

1255 { 
NULL
, NULL, NULL }

1257 
©å
 
	gl2çd_u£r_ruÀ_©å
[] = {

1258 { "íabÀ", 
show_vÆue
, show_value },

1259 { "u£∫ame", 
show_vÆue
, show_value },

1260 { "¥ovidî", 
show_vÆue
, show_value },

1261 { "∑sswd", 
show_vÆue
, show_value },

1262 { "ùaddr", 
show_vÆue
, show_value },

1263 { 
NULL
, NULL, NULL }

1266 
©å
 
	gwﬁ_ruÀ_©å
[] = {

1267 { "«me", 
show_vÆue
, show_value },

1268 { "íabÀ", 
show_vÆue
, show_value },

1269 { "bˇ°", 
show_vÆue
, show_value },

1270 { "hwaddr", 
show_vÆue
, show_value },

1271 { "iÁ˚", 
show_vÆue
, show_value },

1272 { "∑sswd", 
show_vÆue
, show_value },

1273 { 
NULL
, NULL, NULL }

1282 
©å
 
	gù£c_ruÀ_©å
[] = {

1283 { "«me", 
show_vÆue
, show_value },

1284 { "íabÀ", 
show_vÆue
, show_value },

1285 { "mode", 
show_vÆue
, show_value },

1286 { "l2ç", 
show_vÆue
, show_value },

1287 { "loˇl_extif", 
show_vÆue
, show_value },

1288 { "loˇl_öùaddr", 
show_vÆue
, show_value },

1289 { "loˇl_√tmask", 
show_vÆue
, show_value },

1290 { "ªmŸe_g©eway", 
show_vÆue
, show_value },

1291 { "ªmŸe_öùaddr", 
show_vÆue
, show_value },

1292 { "ªmŸe_√tmask", 
show_vÆue
, show_value },

1293 { "c⁄n_öô", 
show_vÆue
, show_value },

1294 { "ike_keymode", 
show_vÆue
, show_value },

1295 { "psk", 
show_vÆue
, show_value },

1296 { "rß", 
show_vÆue
, show_value },

1297 { "ˇ", 
show_vÆue
, show_value },

1298 { "adv", 
show_vÆue
, show_value },

1299 { "pha£1_mode", 
show_vÆue
, show_value },

1300 { "pha£1_À·_id", 
show_vÆue
, show_value },

1301 { "pha£1_right_id", 
show_vÆue
, show_value },

1302 { "pha£1_li„time", 
show_vÆue
, show_value },

1303 { "pha£2_li„time", 
show_vÆue
, show_value },

1304 { "pha£1_auth", 
show_vÆue
, show_value },

1305 { "pha£1_í¸y±", 
show_vÆue
, show_value },

1306 { "pha£1_group", 
show_vÆue
, show_value },

1307 { "pha£2_auth", 
show_vÆue
, show_value },

1308 { "pha£2_í¸y±", 
show_vÆue
, show_value },

1309 { "pha£2_group", 
show_vÆue
, show_value },

1310 { "dpd_íabÀ", 
show_vÆue
, show_value },

1311 { "dpd_öãrvÆ", 
show_vÆue
, show_value },

1312 { "dpd_timeout", 
show_vÆue
, show_value },

1313 { "ddns_g©eway", 
show_vÆue
, show_value },

1314 #ifde‡
EZP_PROD_BRAND_PROX


1315 { "•lô_tu¬ñ", 
show_vÆue
, show_value },

1317 { 
NULL
, NULL, NULL }

1321 
©å
 
	gù£c_°©us_ruÀ_©å
[] = {

1322 { "pha£1", 
show_vÆue
, show_value },

1323 { "pha£2", 
show_vÆue
, show_value },

1324 { 
NULL
, NULL, NULL }

1328 
©å
 
	gauth_£rvî_ruÀ_©å
[] = {

1329 { "web_£rv_ùaddr" , 
show_vÆue
, show_value },

1330 { "web_£rv_p‹t", 
show_vÆue
, show_value },

1331 { "log⁄_∑ge" , 
show_vÆue
, show_value },

1332 { "°©us_∑ge" , 
show_vÆue
, show_value },

1333 { "logoff_∑ge" , 
show_vÆue
, show_value },

1334 { "admö_ùaddr" , 
show_vÆue
, show_value },

1335 { "dns_ty≥" , 
show_vÆue
, show_value },

1336 { "dns_ùaddr" , 
show_vÆue
, show_value },

1337 { "ødius_íabÀ" , 
show_vÆue
, 
show_íabÀ_vÆue
 },

1338 { "ødius_ùaddr" , 
show_vÆue
, show_value },

1339 { "ødius_auth_p‹t", 
show_vÆue
, show_value },

1340 { "ødius_ac˝_p‹t", 
show_vÆue
, show_value },

1341 { "ødius_£¸ë" , 
show_vÆue
, show_value },

1342 { "«sid" , 
show_vÆue
, show_value },

1343 { "locid" , 
show_vÆue
, show_value },

1344 { "æo˙ame" , 
show_vÆue
, show_value },

1345 { "æocid" , 
show_vÆue
, show_value },

1346 { "u£rdb" , 
show_vÆue
, show_value },

1347 { 
NULL
, NULL, NULL }

1351 
©å
 
	gauth_u£r_ruÀ_©å
[] = {

1352 { "«me" , 
show_vÆue
, show_value },

1353 { "∑ssw‹d", 
show_vÆue
, show_value },

1354 { "vÆid_time" , 
show_vÆue
, show_value },

1355 { 
NULL
, NULL, NULL }

1360 
©å
 
	gfw_ruÀ_©å
[] = {

1361 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1362 { "syn_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1363 { "icmp_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1364 { "icmp_ªdú_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1365 { "Ωfûãr_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1366 { "°©e_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1367 { "bc_°‹m_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1368 { 
NULL
, NULL, NULL }

1373 
©å
 
	g«t_∑ss_ruÀ_©å
[] = {

1374 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1375 { "ù£c_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1376 { "µç_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1377 { "l2ç_ªdú_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1378 { "h323_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1379 { "π•_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1380 { "mms_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1381 { 
NULL
, NULL, NULL }

1387 
©å
 
	gwl_basic_ruÀ_©å
[] = {

1388 { "íabÀ", 
show_vÆue
, show_value },

1389 { "√t_mode", 
show_vÆue
, show_value },

1390 { "txpowî", 
show_vÆue
, show_value },

1391 { "ch™√l", 
show_vÆue
, show_value },

1392 { "bisﬁ©i⁄", 
show_vÆue
, show_value },

1393 { 
NULL
, NULL, NULL }

1398 
©å
 
	gwl_adv™˚d_ruÀ_©å
[] = {

1399 { "ö‰a", 
show_vÆue
, show_value },

1400 { "≠_mode", 
show_vÆue
, show_value },

1401 { "øã£t", 
show_vÆue
, show_value },

1402 { "møã", 
show_vÆue
, show_value },

1403 { "‰ag", 
show_vÆue
, show_value },

1404 { "πs", 
show_vÆue
, show_value },

1405 { "dtim", 
show_vÆue
, show_value },

1406 { "b˙", 
show_vÆue
, show_value },

1407 { "∂˝hdr", 
show_vÆue
, show_value },

1408 { "™tdiv", 
show_vÆue
, show_value },

1409 { "gmode", 
show_vÆue
, show_value },

1410 { "gmode_¥Ÿe˘i⁄", 
show_vÆue
, show_value },

1411 { "a·îbu∫î", 
show_vÆue
, show_value },

1412 { "‰amebur°", 
show_vÆue
, show_value },

1413 { "txbur°", 
show_vÆue
, 
show_íabÀ_vÆue
},

1414 { "pkèggr", 
show_vÆue
, 
show_íabÀ_vÆue
},

1415 { "txmode", 
show_vÆue
, show_value},

1417 { "rdg", 
show_vÆue
, 
show_íabÀ_vÆue
},

1418 { "lökad≠t", 
show_vÆue
, 
show_íabÀ_vÆue
},

1419 { "htc", 
show_vÆue
, 
show_íabÀ_vÆue
},

1421 { "htbw", 
show_vÆue
, 
show_íabÀ_vÆue
},

1422 { "gi", 
show_vÆue
, 
show_íabÀ_vÆue
},

1423 { "›mode", 
show_vÆue
, show_value},

1424 { "mcs", 
show_vÆue
, show_value},

1425 { "mpdu", 
show_vÆue
, show_value},

1426 { "amsdu", 
show_vÆue
, 
show_íabÀ_vÆue
},

1427 { "autoba", 
show_vÆue
, 
show_íabÀ_vÆue
},

1428 { "bawösize", 
show_vÆue
, show_value},

1429 { "bade˛öe", 
show_vÆue
, 
show_íabÀ_vÆue
},

1430 { "extcha", 
show_vÆue
, show_value},

1431 { "wd°xmode", 
show_vÆue
, show_value},

1432 { 
NULL
, NULL, NULL }

1437 
©å
 
	gwl_wds_ruÀ_©å
[] = {

1438 { "mode", 
show_vÆue
, show_value },

1439 { "timeout", 
show_vÆue
, show_value },

1440 { 
NULL
, NULL, NULL }

1444 
©å
 
	gwl_wme_ruÀ_©å
[] = {

1445 { "°a_bk", 
show_vÆue
, show_value },

1446 { "°a_be", 
show_vÆue
, show_value },

1447 { "°a_vi", 
show_vÆue
, show_value },

1448 { "°a_vo", 
show_vÆue
, show_value },

1449 { "≠_bk", 
show_vÆue
, show_value },

1450 { "≠_be", 
show_vÆue
, show_value },

1451 { "≠_vi", 
show_vÆue
, show_value },

1452 { "≠_vo", 
show_vÆue
, show_value },

1453 { "no_ack", 
show_vÆue
, show_value },

1454 { "max_assoc", 
show_vÆue
, show_value },

1455 { 
NULL
, NULL, NULL }

1460 
©å
 
	gwlv_basic_ruÀ_©å
[] = {

1461 { "íabÀ", 
show_vÆue
, show_value },

1462 { "hiddí", 
show_vÆue
, show_value },

1463 { "øã", 
show_vÆue
, show_value },

1464 { "wme", 
show_vÆue
, show_value },

1465 { "isﬁ©i⁄", 
show_vÆue
, show_value },

1466 { 
NULL
, NULL, NULL }

1470 
©å
 
	gwlv_i‚ame_ruÀ_©å
[] = {

1471 { "i‚ame", 
show_vÆue
, show_value },

1472 { 
NULL
, NULL, NULL }

1476 
©å
 
	gwlv_ssid_ruÀ_©å
[] = {

1477 { "ssid", 
show_vÆue
, show_value },

1478 { 
NULL
, NULL, NULL }

1482 
©å
 
	gwlv_£c_ruÀ_©å
[] = {

1483 { "£cmode", 
show_vÆue
, show_value },

1484 { 
NULL
, NULL, NULL }

1489 
©å
 
	gwlv_£c_wï_ruÀ_©å
[] = {

1490 { "key_ödex", 
show_vÆue
, show_value },

1491 { "key1", 
show_b64_vÆue
, 
show_vÆue
 },

1492 { "key2", 
show_b64_vÆue
, 
show_vÆue
 },

1493 { "key3", 
show_b64_vÆue
, 
show_vÆue
 },

1494 { "key4", 
show_b64_vÆue
, 
show_vÆue
 },

1495 { "keyty≥", 
show_vÆue
, show_value },

1496 { "ícmode", 
show_vÆue
, show_value },

1497 { 
NULL
, NULL, NULL }

1503 
©å
 
	gsmbd_ruÀ_©å
[] = {

1504 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1505 { "«me", 
show_vÆue
, show_value },

1506 { "w‹kgroup", 
show_vÆue
, show_value },

1507 { "des¸ùti⁄", 
show_vÆue
, show_value },

1508 { "¸óã_mask", 
show_vÆue
, show_value },

1509 { "dú_mask", 
show_vÆue
, show_value },

1510 { "£curôy", 
show_vÆue
, show_value },

1511 { "sh¨e_«me", 
show_vÆue
, show_value },

1512 { "sh¨e_∑th", 
show_vÆue
, show_value },

1513 { "sh¨e_u£rs", 
show_vÆue
, show_value },

1514 { "ªad_⁄ly", 
show_vÆue
, show_value },

1515 { "gue°_ok", 
show_vÆue
, show_value },

1516 { "ext_ac˚ss", 
show_vÆue
, show_value },

1517 { "codïage", 
show_vÆue
, show_value },

1518 { 
NULL
, NULL, NULL }

1523 
©å
 
	gsmbd_u£r_ruÀ_©å
[] = {

1524 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1525 { "«me", 
show_vÆue
, show_value },

1526 { "∑sswd", 
show_vÆue
, show_value },

1527 { 
NULL
, NULL, NULL }

1532 
©å
 
	gtogo_ruÀ_©å
[] = {

1533 { "°©us", 
show_vÆue
, show_value },

1534 { "«me", 
show_vÆue
, show_value },

1535 { "¥Ÿo", 
show_vÆue
, show_value },

1536 { "ù", 
show_vÆue
, show_value },

1537 { "p‹t", 
show_vÆue
, show_value },

1538 { "mac", 
show_vÆue
, show_value },

1539 { "c⁄fig", 
show_vÆue
, show_value },

1540 { 
NULL
, NULL, NULL }

1545 
©å
 
	gˇmîa_ruÀ_©å
[] = {

1546 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1547 { "p‹t", 
show_vÆue
, show_value },

1548 { "f‹m©", 
show_vÆue
, show_value },

1549 { "auth_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1550 { "u£r", 
show_vÆue
, show_value },

1551 { "∑sswd", 
show_vÆue
, show_value },

1552 { "c⁄fig", 
show_vÆue
, show_value },

1553 { "ªsﬁuti⁄", 
show_vÆue
, show_value },

1554 { 
NULL
, NULL, NULL }

1559 
©å
 
	gdrive_ruÀ_©å
[] = {

1560 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1561 { "gue°", 
show_vÆue
, show_value },

1562 { "p‹t", 
show_vÆue
, show_value },

1563 { "ext_ac˚ss", 
show_vÆue
, show_value },

1564 { "«me", 
show_vÆue
, show_value },

1565 { "∑ssw‹d", 
show_vÆue
, show_value },

1566 { "c⁄fig", 
show_vÆue
, show_value },

1567 { 
NULL
, NULL, NULL }

1572 
©å
 
	gmusic_ruÀ_©å
[] = {

1573 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1574 { 
NULL
, NULL, NULL }

1579 
©å
 
	gÀd_ruÀ_©å
[] = {

1580 { "boŸ", 
show_vÆue
, show_value },

1581 { "usb", 
show_vÆue
, show_value },

1582 { 
NULL
, NULL, NULL }

1587 
©å
 
	gbt_ruÀ_©å
[] = {

1588 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1589 { "≥î", 
show_vÆue
, show_value },

1590 { "max_≥î", 
show_vÆue
, show_value },

1591 { "max_èsk", 
show_vÆue
, show_value },

1592 { "dow∆ﬂd_øã", 
show_vÆue
, show_value },

1593 { "u∂ﬂd_øã", 
show_vÆue
, show_value },

1594 { "dúe˘‹y", 
show_vÆue
, show_value },

1595 { "£ssi⁄", 
show_vÆue
, show_value },

1596 { "lﬂd_°¨t", 
show_vÆue
, show_value },

1597 { "p‹t_ønge_°¨t", 
show_vÆue
, show_value },

1598 { "p‹t_ønge_íd", 
show_vÆue
, show_value },

1599 { "dht_p‹t", 
show_vÆue
, show_value },

1600 { "check_hash", 
show_vÆue
, show_value },

1601 { 
NULL
, NULL, NULL }

1606 
©å
 
	g·pd_ruÀ_©å
[] = {

1607 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1608 { "p‹t", 
show_vÆue
, show_value },

1609 { "nﬂn⁄yous", 
show_vÆue
, show_value },

1610 { "chroŸevîy⁄e", 
show_vÆue
, show_value },

1611 { "max˛õ¡•îù", 
show_vÆue
, show_value },

1612 { "max˛õ¡numbî", 
show_vÆue
, show_value },

1613 { "≥ru£æimôs", 
show_vÆue
, show_value },

1614 { "umask", 
show_vÆue
, show_value },

1615 { "u£rb™dwidth", 
show_vÆue
, show_value },

1616 { "timeout", 
show_vÆue
, show_value },

1617 { "Ælow_ext_ac˚ss", 
show_vÆue
, show_value },

1618 { 
NULL
, NULL, NULL }

1623 
©å
 
	g·pd_u£r_ruÀ_©å
[] = {

1624 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1625 { "u£∫ame", 
show_vÆue
, show_value },

1626 { "∑sswd", 
show_vÆue
, show_value },

1627 { "u∂ﬂd", 
show_vÆue
, show_value },

1628 { "dow∆ﬂd", 
show_vÆue
, show_value },

1629 { "ùaddr", 
show_vÆue
, show_value },

1630 { 
NULL
, NULL, NULL }

1635 
©å
 
	gôu√s_ruÀ_©å
[] = {

1636 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1637 { "p‹t", 
show_vÆue
, show_value },

1638 { "admö∑sswd", 
show_vÆue
, show_value },

1639 { "mp3dú", 
show_vÆue
, show_value },

1640 { "£rvî«me", 
show_vÆue
, show_value },

1641 { "ru«s", 
show_vÆue
, show_value },

1642 { "∑ssw‹d", 
show_vÆue
, show_value },

1643 { "exãnsi⁄s", 
show_vÆue
, show_value },

1648 
©å
 
	g°‹age_ruÀ_©å
[] = {

1649 { "codïage", 
show_vÆue
, show_value },

1650 { "sw≠_size", 
show_vÆue
, show_value },

1651 { "block_size", 
show_vÆue
, show_value },

1652 { "ext_íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1653 { "èrgë_ù", 
show_vÆue
, show_value },

1654 { "èrgë_dú", 
show_vÆue
, show_value },

1655 { "u£r", 
show_vÆue
, show_value },

1656 { "pw", 
show_vÆue
, show_value },

1657 { "gp", 
show_vÆue
, show_value },

1658 { 
NULL
, NULL, NULL }

1664 
©å
 
	g°‹age_°©e_ruÀ_©å
[] = {

1665 { "dev_«me", 
show_vÆue
, show_value },

1666 { "f‹m©", 
show_vÆue
, show_value },

1667 { "mou¡_°©e", 
show_vÆue
, show_value },

1668 { "ö£π_°©e", 
show_vÆue
, show_value },

1669 { 
NULL
, NULL, NULL }

1675 
©å
 
	g°‹age_u£d_°©e_ruÀ_©å
[] = {

1676 { "dev_«me", 
show_vÆue
, show_value },

1677 { "mou¡_°©e", 
show_vÆue
, show_value },

1678 { "‰ì_°©e", 
show_vÆue
, show_value },

1679 { "tŸÆ_°©e", 
show_vÆue
, show_value },

1680 { "diff_°©e", 
show_vÆue
, show_value },

1681 { 
NULL
, NULL, NULL }

1686 
©å
 
	gmyq«p˛oud_id_ruÀ_©å
[] = {

1687 { "vîsi⁄", 
show_vÆue
, show_value },

1688 { "≠p_tokí", 
show_vÆue
, show_value },

1689 { "ª‰esh_tokí", 
show_vÆue
, show_value },

1690 { "auth_tokí", 
show_vÆue
, show_value },

1691 { "tokí_vÆid_≥riod", 
show_vÆue
, show_value },

1692 { "œ°_tokí_upd©e", 
show_vÆue
, show_value },

1693 { "qid", 
show_vÆue
, show_value },

1694 { "devi˚_id", 
show_vÆue
, show_value },

1695 { "devi˚_tokí", 
show_vÆue
, show_value },

1696 { "devi˚_«me", 
show_vÆue
, show_value },

1697 { "°©us", 
show_vÆue
, show_value },

1698 { "ddns_°©us", 
show_vÆue
, show_value },

1699 { 
NULL
, NULL, NULL }

1701 
©å
 
	gmodñ_«me_©å
[] = {

1702 { "modñ«me", 
show_vÆue
, show_value },

1703 { 
NULL
, NULL, NULL }

1708 
©å
 
	gis_ruÀ_©å
[] = {

1709 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1710 { "i¢s_£rv", 
show_vÆue
, show_value },

1711 { "isid", 
show_vÆue
, show_value },

1712 { "Æüs", 
show_vÆue
, show_value },

1713 { "max_c⁄n", 
show_vÆue
, show_value },

1714 { "max_tx", 
show_vÆue
, show_value },

1715 { "max_rx", 
show_vÆue
, show_value },

1716 { 
NULL
, NULL, NULL }

1722 
©å
 
	gisho°_ruÀ_©å
[] = {

1723 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1724 { "ho°", 
show_vÆue
, show_value },

1725 { "a˘i⁄", 
show_vÆue
, show_value },

1726 { 
NULL
, NULL, NULL }

1732 
©å
 
	gisu£r_ruÀ_©å
[] = {

1733 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1734 { "u£∫ame", 
show_vÆue
, show_value },

1735 { "∑ssw‹d", 
show_vÆue
, show_value },

1736 { 
NULL
, NULL, NULL }

1742 
©å
 
	g≠pmgr_ruÀ_©å
[] = {

1743 { "wœn", 
show_vÆue
, show_value },

1744 { "iscsi", 
show_vÆue
, show_value },

1745 { "µç", 
show_vÆue
, show_value },

1746 { "l2ç", 
show_vÆue
, show_value },

1747 { "ù£c", 
show_vÆue
, show_value },

1748 { "°‹age", 
show_vÆue
, show_value },

1749 { "ww™", 
show_vÆue
, show_value },

1750 { "wi•", 
show_vÆue
, show_value },

1751 { "p‹tcfg", 
show_vÆue
, show_value },

1752 { "hw«t", 
show_vÆue
, show_value },

1753 { "fúmw¨e", 
show_vÆue
, show_value },

1754 { "ùh⁄e", 
show_vÆue
, show_value },

1755 { "b¨ry", 
show_vÆue
, show_value },

1756 { "sm¨t", 
show_vÆue
, show_value },

1757 { "usbÀd", 
show_vÆue
, show_value },

1758 { "wimax", 
show_vÆue
, show_value },

1759 { "be˚em", 
show_vÆue
, show_value },

1760 { "gue°_œn", 
show_vÆue
, show_value },

1761 { "v≤c", 
show_vÆue
, show_value },

1762 { "wúe", 
show_vÆue
, show_value },

1763 { 
NULL
, NULL, NULL }

1768 
©å
 
	gwlv_£c_w∑_ruÀ_©å
[] = {

1769 { "key", 
show_b64_vÆue
, 
show_vÆue
 },

1770 { "¸y±o", 
show_vÆue
, show_value },

1771 { "ødius_key", 
show_b64_vÆue
, 
show_vÆue
 },

1772 { "ødius_ùaddr", 
show_vÆue
, show_value },

1773 { "ødius_p‹t", 
show_vÆue
, show_value },

1774 { "ªkey_mode", 
show_vÆue
, show_value },

1775 { "ªkey_time_öãrvÆ", 
show_vÆue
, show_value },

1776 { "ªkey_pkt_öãrvÆ", 
show_vÆue
, show_value },

1777 { "£ssi⁄_timeout", 
show_vÆue
, show_value },

1778 { 
NULL
, NULL, NULL }

1783 
©å
 
	gwlv_£c_w∑2_ruÀ_©å
[] = {

1784 { "key", 
show_b64_vÆue
, 
show_vÆue
 },

1785 { "¸y±o", 
show_vÆue
, show_value },

1786 { "ødius_key", 
show_b64_vÆue
, 
show_vÆue
 },

1787 { "ødius_ùaddr", 
show_vÆue
, show_value },

1788 { "ødius_p‹t", 
show_vÆue
, show_value },

1789 { "ªkey_mode", 
show_vÆue
, show_value },

1790 { "ªkey_time_öãrvÆ", 
show_vÆue
, show_value },

1791 { "ªkey_pkt_öãrvÆ", 
show_vÆue
, show_value },

1792 { "¥óuth", 
show_vÆue
, show_value },

1793 { "pmk≥riod", 
show_vÆue
, show_value },

1794 { "£ssi⁄_timeout", 
show_vÆue
, show_value },

1795 { "w∑ˇp", 
show_vÆue
, show_value },

1796 { 
NULL
, NULL, NULL }

1800 
©å
 
	gwlv_a˛_basic_ruÀ_©å
[] = {

1801 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1802 { "deÂﬁicy", 
show_vÆue
, show_value },

1803 { 
NULL
, NULL, NULL }

1807 
©å
 
	gwlv_a˛_ruÀ_©å
[] = {

1808 { "«me", 
show_vÆue
, show_value },

1809 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1810 { "mac", 
show_vÆue
, show_value },

1811 { "pﬁicy", 
show_vÆue
, show_value },

1812 { 
NULL
, NULL, NULL }

1817 
©å
 
	gwl_wds_basic_ruÀ_©å
[] = {

1818 { "hwaddr", 
show_vÆue
, show_value },

1819 { "£cmode", 
show_vÆue
, show_value },

1820 { 
NULL
, NULL, NULL }

1824 
©å
 
	gwl_wds_£c_wï_ruÀ_©å
[] = {

1825 { "key", 
show_b64_vÆue
, 
show_vÆue
 },

1826 { 
NULL
, NULL, NULL }

1830 
©å
 
	gwl_wds_£c_w∑_ruÀ_©å
[] = {

1831 { "key", 
show_b64_vÆue
, 
show_vÆue
 },

1832 { "¸y±o", 
show_vÆue
, show_value },

1833 { 
NULL
, NULL, NULL }

1837 
©å
 
	gwl_≠˛i_ruÀ_©å
[] = {

1838 { "íabÀ", 
show_vÆue
, show_value },

1839 { "ssid", 
show_vÆue
, show_value },

1840 { "bssid", 
show_vÆue
, show_value },

1841 { "£cmode", 
show_vÆue
, show_value },

1842 { "wifiw™", 
show_vÆue
, show_value },

1843 #i‡
deföed
(
EZP_SUB_BRAND_APOLLO
Ë|| deföed(
EZP_PROD_BRAND_PROX
)

1844 { "ù_ty≥", 
show_vÆue
, show_value },

1846 { 
NULL
, NULL, NULL }

1850 
©å
 
	gwl_≠˛i_£c_wï_ruÀ_©å
[] = {

1851 { "key_ödex", 
show_vÆue
, show_value },

1852 { "key1", 
show_b64_vÆue
, 
show_vÆue
 },

1853 { "key2", 
show_b64_vÆue
, 
show_vÆue
 },

1854 { "key3", 
show_b64_vÆue
, 
show_vÆue
 },

1855 { "key4", 
show_b64_vÆue
, 
show_vÆue
 },

1856 { "keyty≥", 
show_vÆue
, show_value },

1857 { "ícmode", 
show_vÆue
, show_value },

1858 { 
NULL
, NULL, NULL }

1862 
©å
 
	gwl_≠˛i_£c_w∑_ruÀ_©å
[] = {

1863 { "key", 
show_b64_vÆue
, 
show_vÆue
 },

1864 { "¸y±o", 
show_vÆue
, show_value },

1865 { 
NULL
, NULL, NULL }

1869 
©å
 
	gwl_≠˛i_sw≠_basic_ruÀ_©å
[] = {

1870 { "íabÀ", 
show_vÆue
, show_value },

1871 { "max", 
show_vÆue
, show_value },

1872 { "ödex", 
show_vÆue
, show_value },

1873 { 
NULL
, NULL, NULL }

1877 
©å
 
	gwl_≠˛i_sw≠_ch™√l_ruÀ_©å
[] = {

1878 { "ch™√l", 
show_vÆue
, show_value },

1879 { "extcha", 
show_vÆue
, show_value },

1880 { 
NULL
, NULL, NULL }

1884 
©å
 
	gwl_≠˛i_sw≠_ruÀ_©å
[] = {

1885 { "íabÀ", 
show_vÆue
, show_value },

1886 { "ssid", 
show_vÆue
, show_value },

1887 { "bssid", 
show_vÆue
, show_value },

1888 { "£cmode", 
show_vÆue
, show_value },

1889 { "wifiw™", 
show_vÆue
, show_value },

1890 #i‡
deföed
(
EZP_SUB_BRAND_APOLLO
Ë|| deföed(
EZP_PROD_BRAND_PROX
)

1891 { "ù_ty≥", 
show_vÆue
, show_value },

1893 { 
NULL
, NULL, NULL }

1897 
©å
 
	gwl_≠˛i_sw≠_£c_wï_ruÀ_©å
[] = {

1898 { "key_ödex", 
show_vÆue
, show_value },

1899 { "key1", 
show_b64_vÆue
, 
show_vÆue
 },

1900 { "key2", 
show_b64_vÆue
, 
show_vÆue
 },

1901 { "key3", 
show_b64_vÆue
, 
show_vÆue
 },

1902 { "key4", 
show_b64_vÆue
, 
show_vÆue
 },

1903 { "keyty≥", 
show_vÆue
, show_value },

1904 { "ícmode", 
show_vÆue
, show_value },

1905 { 
NULL
, NULL, NULL }

1909 
©å
 
	gwl_≠˛i_sw≠_£c_w∑_ruÀ_©å
[] = {

1910 { "key", 
show_b64_vÆue
, 
show_vÆue
 },

1911 { "¸y±o", 
show_vÆue
, show_value },

1912 { 
NULL
, NULL, NULL }

1917 
©å
 
	gx_mode_d©a_©å
[] = {

1918 { "«me", 
show_vÆue
, show_value },

1919 { "¥od_ˇt", 
show_vÆue
, show_value },

1920 { 
NULL
, NULL, NULL }

1924 
©å
 
	gp‹tcfg_ruÀ_©å
[] = {

1925 { "«me", 
show_vÆue
, show_value },

1926 { "íabÀ", 
show_vÆue
, show_value },

1927 { "di•°r", 
show_vÆue
, show_value },

1928 { "œn_membî", 
show_vÆue
, show_value },

1929 { "w™_membî", 
show_vÆue
, show_value },

1930 { 
NULL
, NULL, NULL }

1935 
©å
 
	g≠p_íabÀ_ruÀ_©å
[] = {

1936 { "sbm", 
show_vÆue
, show_value },

1937 { "dbm", 
show_vÆue
, show_value },

1938 { "gbm", 
show_vÆue
, show_value },

1939 { 
NULL
, NULL, NULL }

1944 
©å
 
	g£rül_num_ruÀ_©å
[] = {

1945 { "£rül_num", 
show_vÆue
, show_value },

1946 { 
NULL
, NULL, NULL }

1951 
©å
 
	gmfg_ã°_ªsu…_ruÀ_©å
[] = {

1952 { "ôem", 
show_vÆue
, show_value },

1953 { "ªsu…", 
show_vÆue
, show_value },

1954 { 
NULL
, NULL, NULL }

1956 #i‡
deföed
 (
PLATFORM_GMA
)

1961 
©å
 
	gWISP_dt˘_ˇ±ive_p‹èl_ruÀ_©å
[] = {

1962 { "ˇ±ive_p‹èl", 
show_vÆue
, show_value },

1963 { "°©us", 
show_vÆue
, show_value },

1964 { 
NULL
, NULL, NULL }

1969 
©å
 
	gigmp_¥oxy_ruÀ_©å
[] = {

1970 { "íabÀ", 
show_vÆue
, show_value },

1971 { 
NULL
, NULL, NULL }

1976 
©å
 
	gµp_c⁄åﬁ_ruÀ_©å
[] = {

1977 { "g©eway_vÆid", 
show_vÆue
, show_value },

1978 { 
NULL
, NULL, NULL }

1981 
©å
 
	gw™_¥i‹ôy_ruÀ_©å
[] = {

1982 { "¥Ÿo", 
show_vÆue
, show_value },

1983 { 
NULL
, NULL, NULL }

1987 
©å
 
	gˇ±ive_ruÀ_©å
[] = {

1988 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1989 { "p‹t", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1990 { 
NULL
, NULL, NULL }

1997 
©å
 
	gˇrd_ªadî_h¨dw¨e_ruÀ_©å
[] = {

1998 { "dev", 
show_vÆue
, 
show_íabÀ_vÆue
 },

1999 { "gpio", 
show_vÆue
, 
show_íabÀ_vÆue
 },

2000 { "gpi›ﬁ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

2001 { 
NULL
, NULL, NULL }

2004 #i‡
deföed
 (
PLATFORM_M2E
)

2018 
©å
 
	ggpiodef_ruÀ_©å
[] = {

2019 { "num", 
show_vÆue
, show_value },

2020 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

2021 { "func", 
show_vÆue
, show_value },

2022 { "öôvÆ", 
show_vÆue
, show_value },

2023 { "desc", 
show_vÆue
, show_value },

2024 { 
NULL
, NULL, NULL }

2034 
©å
 
	gu≤pc_£âög_ruÀ_©å
[] = {

2035 { "«me", 
show_vÆue
, show_value },

2036 { "íabÀ", 
show_vÆue
, 
show_íabÀ_vÆue
 },

2037 { "öp‹t", 
show_vÆue
, show_value },

2038 { "ouç‹t", 
show_vÆue
, show_value },

2039 { "¥Ÿo", 
show_vÆue
, show_value },

2040 { 
NULL
, NULL, NULL }

2044 
©å
 
	gu≤pc_°©us_ruÀ_©å
[] = {

2045 { "«me", 
show_vÆue
, show_value },

2046 { "a˘iv©ed", 
show_vÆue
, show_value },

2047 { "öp‹t", 
show_vÆue
, show_value },

2048 { "ouç‹t", 
show_vÆue
, show_value },

2049 { "„tch_ªsu…", 
show_vÆue
, show_value },

2050 { 
NULL
, NULL, NULL }

2054 
©å
 
	g°_deÂ©h_ruÀ_©å
[] = {

2055 { "deÂ©h", 
show_vÆue
, show_value },

2056 { "dev", 
show_vÆue
, show_value },

2057 { "lökp", 
show_vÆue
, show_value },

2058 { 
NULL
, NULL, NULL }

2062 #i‡
deföed
 (
PLATFORM_GMA
)

2065 
©å
 
	ggmn_«t_ruÀ_©å
[] = {

2066 {"‹ig_ötf", 
show_vÆue
, show_value},

2067 {"‹ig_ù", 
show_vÆue
, show_value},

2068 {"èrg_ötf", 
show_vÆue
, show_value},

2069 {"èrg_ù", 
show_vÆue
, show_value},

2070 { 
NULL
, NULL, NULL }

2075 
©å
 
	ggmn_fûãr_ruÀ_©å
[] = {

2076 {"§c_ötf", 
show_vÆue
, show_value},

2077 {"d°_ötf", 
show_vÆue
, show_value},

2078 {"p‹t_‰om", 
show_vÆue
, show_value},

2079 {"p‹t_to", 
show_vÆue
, show_value},

2080 { 
NULL
, NULL, NULL }

2085 
©å
 
	ggmn_mˇ°_ruÀ_©å
[] = {

2086 {"‹ig_ötf", 
show_vÆue
, show_value},

2087 {"‹ig_ù", 
show_vÆue
, show_value},

2088 {"mˇ°_ötf", 
show_vÆue
, show_value},

2089 {"mˇ°_group", 
show_vÆue
, show_value},

2090 { 
NULL
, NULL, NULL }

2094 
	sruÀ
 {

2095 *
	m«me
;

2096 
©å
 *
	m©å
;

2099 
ruÀ
 
	gruÀs
[] = {

2100 { "‰_ruÀ", 
‰_ruÀ_©å
 },

2101 { "∂ug_ruÀ", 
∂ug_ruÀ_©å
 },

2102 { "˙¡_ruÀ", 
˙¡_ruÀ_©å
 },

2103 { "wiz¨d_ruÀ", 
wiz¨d_ruÀ_©å
 },

2104 { "vs_ruÀ", 
vs_ruÀ_©å
 },

2105 { "Ê_ruÀ", 
Ê_ruÀ_©å
 },

2106 { "‰_dmz_ruÀ", 
‰_dmz_ruÀ_©å
 },

2107 { "Ê_hwaddr_ruÀ", 
Ê_hwaddr_ruÀ_©å
 },

2108 #ifde‡
AXIMDDNS


2109 { "aximddns_ruÀ", 
aximddns_ruÀ_©å
 },

2110 { "aximddns_tmp_ruÀ", 
aximddns_tmp_ruÀ_©å
 },

2112 #ifde‡
QFILE_CGI


2113 { "cgi_¥ogªss", 
cgi_¥ogªss_©å
 },

2115 { "mac_£n£_ruÀ", 
mac_£n£_©å
 },

2116 #i‡
deföed
(
PLATFORM_ALS
)

2117 { "Æs_Áûovî", 
Áûovî_©å
 },

2118 { "Æît_ruÀ", 
Æît_©å
 },

2119 { "maû_ruÀ", 
maû_©å
 },

2120 { "ªœy_ruÀ", 
ªœy_©å
 },

2121 { "ªœy_scheduÀ_ruÀ", 
ªœy_scheduÀ_©å
 },

2122 { "fûe_mode_ruÀ", 
fûe_mode_©å
 },

2123 { "Æs_b©ãry_ruÀ", 
Æs_b©ãry_ruÀ_©å
},

2124 { "Æs_°©us_ruÀ", 
Æs_°©us_ruÀ_©å
},

2125 { "Æs_£rül_ruÀ", 
Æs_£rül_ruÀ_©å
},

2126 { "Æs_›î©ög_ruÀ", 
Æs_›î©ög_ruÀ_©å
},

2127 { "Æs_›î©ög_d©a_∑ckög_ruÀ", 
Æs_›î©ög_d©a_∑ckög_ruÀ_©å
},

2128 { "Æs_›î©ög_›ti⁄_ruÀ", 
Æs_›î©ög_›ti⁄_ruÀ_©å
},

2130 { "w™_maö_ruÀ", 
w™_maö_ruÀ_©å
 },

2131 { "w™_lb_ruÀ", 
w™_lb_ruÀ_©å
 },

2132 { "w™_dëe˘_ruÀ", 
w™_dëe˘_ruÀ_©å
 },

2133 { "w™_°©us_ruÀ", 
w™_°©us_ruÀ_©å
 },

2134 { "w™_a˘i⁄_°yÀ_ruÀ", 
w™_a˘i⁄_°yÀ_ruÀ_©å
 },

2135 { "°‹age_devi˚_mou¡_ruÀ", 
°‹age_devi˚_mou¡_ruÀ_©å
 },

2136 { "cou¡down_ruÀ", 
cou¡down_ruÀ_©å
 },

2137 { "li˚n£_°©us_ruÀ", 
li˚n£_°©us_ruÀ_©å
 },

2138 { "v≤_°©us_ruÀ", 
w™_°©us_ruÀ_©å
 },

2139 { "w™_u≤p_°©us_ruÀ", 
w™_u≤p_°©us_ruÀ_©å
 },

2140 { "w™_bw_ruÀ", 
w™_bw_ruÀ_©å
 },

2141 { "w™_°©ic_ruÀ", 
w™_°©ic_ruÀ_©å
 },

2142 { "w™_dh˝_ruÀ", 
w™_dh˝_ruÀ_©å
 },

2143 { "w™_µp€_ruÀ", 
w™_µp€_ruÀ_©å
 },

2144 { "w™_ww™_ruÀ", 
w™_ww™_ruÀ_©å
 },

2145 { "w™_b¨ry_ruÀ", 
w™_b¨ry_ruÀ_©å
 },

2146 { "w™_µç_l2ç_globÆ_ruÀ", 
w™_µç_l2ç_globÆ_ruÀ_©å
 },

2147 { "w™_µç_l2ç_ruÀ", 
w™_µç_l2ç_ruÀ_©å
 },

2148 { "w™_l2ç_°©us_ruÀ", 
w™_l2ç_°©us_ruÀ_©å
 },

2149 { "w™_htc_ruÀ", 
w™_htc_ruÀ_©å
 },

2150 { "w™_ùh⁄e_ruÀ", 
w™_ùh⁄e_ruÀ_©å
 },

2151 { "w™_be˚em_ruÀ", 
w™_be˚em_ruÀ_©å
 },

2152 { "w™_wimax_ruÀ", 
w™_wimax_ruÀ_©å
 },

2153 { "w™_ww™_¥obe_ruÀ", 
w™_ww™_¥obe_ruÀ_©å
 },

2154 { "w™_bigp⁄d_ruÀ", 
w™_bigp⁄d_ruÀ_©å
 },

2155 { "w™_hwaddr_ruÀ_deÁu…", 
w™_hwaddr_ruÀ_deÁu…_©å
},

2156 { "w™_hwaddr_˛⁄e_ruÀ", 
w™_hwaddr_˛⁄e_ruÀ_©å
 },

2157 { "w™_ddns_ruÀ", 
w™_ddns_ruÀ_©å
 },

2158 { "w™_≠∂e_fûãr_ruÀ", 
w™_≠∂e_fûãr_ruÀ_©å
 },

2159 { "w™_›ídns_ruÀ", 
w™_›ídns_ruÀ_©å
 },

2160 { "œn_maö_ruÀ", 
œn_maö_ruÀ_©å
 },

2161 { "œn_hwaddr_ruÀ_deÁu…", 
œn_hwaddr_ruÀ_deÁu…_©å
 },

2162 { "œn_hwaddr_˛⁄e_ruÀ", 
œn_hwaddr_˛⁄e_ruÀ_©å
 },

2163 { "gue°_œn_ruÀ", 
gue°_œn_ruÀ_©å
 },

2164 { "œn_°©ic_ruÀ", 
œn_°©ic_ruÀ_©å
 },

2165 { "œn_°©us_ruÀ", 
w™_°©us_ruÀ_©å
 },

2166 { "œn_°©ic_ruÀ_deÁu…", 
œn_°©ic_ruÀ_©å
 },

2167 { "œn_dh˝s_ruÀ", 
œn_dh˝s_ruÀ_©å
 },

2169 { "wl0_wds", 
wl0_wds_©å
 },

2170 { "bw_sbm_ruÀ", 
bw_sbm_ruÀ_©å
 },

2171 { "bw_dbm_ruÀ", 
bw_dbm_ruÀ_©å
 },

2172 { "π_ruÀ", 
π_ruÀ_©å
 },

2173 { "wf_c⁄ã¡_ruÀ", 
wf_c⁄ã¡_ruÀ_©å
 },

2174 { "wf_ruÀ", 
wf_ruÀ_©å
 },

2175 { "sched_ruÀ", 
sched_ruÀ_©å
 },

2176 { "¸⁄_ruÀ", 
¸⁄_ruÀ_©å
 },

2177 { "vœn_ruÀ", 
vœn_ruÀ_©å
 },

2178 { "vœ≈‹t_ruÀ", 
vœ≈‹t_ruÀ_©å
 },

2179 { "br_ruÀ", 
br_ruÀ_©å
 },

2180 { "¡p_ruÀ", 
¡p_ruÀ_©å
 },

2181 { "ssh_ruÀ", 
ssh_ruÀ_©å
 },

2182 { "log_ruÀ", 
log_ruÀ_©å
 },

2183 { "âl_ruÀ", 
âl_ruÀ_©å
 },

2184 { "tos_ruÀ", 
tos_ruÀ_©å
 },

2185 { "u≤p_ruÀ", 
u≤p_ruÀ_©å
 },

2186 { "hâp_ruÀ", 
hâp_ruÀ_©å
 },

2187 { "u£r_ruÀ", 
u£r_ruÀ_©å
 },

2188 { "hâp_ªdúe˘_ruÀ", 
hâp_ªdúe˘_ruÀ_©å
 },

2189 { "¢mp_ruÀ", 
¢mp_ruÀ_©å
 },

2190 { "adtoﬁ_ruÀ", 
adtoﬁ_ruÀ_©å
 },

2191 { "smbd_ruÀ", 
smbd_ruÀ_©å
 },

2192 { "smbd_u£r_ruÀ", 
smbd_u£r_ruÀ_©å
 },

2193 { "togo_ruÀ", 
togo_ruÀ_©å
 },

2194 { "ˇmîa_ruÀ", 
ˇmîa_ruÀ_©å
 },

2195 { "drive_ruÀ", 
drive_ruÀ_©å
 },

2196 { "music_ruÀ", 
music_ruÀ_©å
 },

2197 { "Àd_ruÀ", 
Àd_ruÀ_©å
 },

2198 { "bt_ruÀ", 
bt_ruÀ_©å
 },

2199 { "·pd_ruÀ", 
·pd_ruÀ_©å
 },

2200 { "·pd_u£r_ruÀ", 
·pd_u£r_ruÀ_©å
 },

2201 { "ôu√s_ruÀ", 
ôu√s_ruÀ_©å
},

2202 { "°‹age_ruÀ", 
°‹age_ruÀ_©å
 },

2203 { "°‹age_°©e_ruÀ", 
°‹age_°©e_ruÀ_©å
 },

2204 { "°‹age_u£d_°©e_ruÀ", 
°‹age_u£d_°©e_ruÀ_©å
 },

2205 { "myq«p˛oud_id_ruÀ", 
myq«p˛oud_id_ruÀ_©å
 },

2206 { "modñ_«me", 
modñ_«me_©å
 },

2207 { "is_ruÀ", 
is_ruÀ_©å
 },

2208 { "isho°_ruÀ", 
isho°_ruÀ_©å
 },

2209 { "isu£r_ruÀ", 
isu£r_ruÀ_©å
 },

2210 { "≠pmgr_ruÀ", 
≠pmgr_ruÀ_©å
 },

2211 { "hâp_ruÀ_deÁu…", 
hâp_ruÀ_©å
 },

2212 { "°©s_ruÀ", 
°©s_ruÀ_©å
 },

2213 { "vnc_ruÀ", 
vnc_ruÀ_©å
 },

2214 { "vnc_Ælow_ruÀ", 
vnc_Ælow_ruÀ_©å
 },

2215 { "µçd_ruÀ", 
µçd_ruÀ_©å
 },

2216 { "µçd_u£r_ruÀ", 
µçd_u£r_ruÀ_©å
 },

2217 { "wﬁ_ruÀ", 
wﬁ_ruÀ_©å
 },

2218 { "ù£c_ruÀ", 
ù£c_ruÀ_©å
 },

2219 { "ù£c_°©us_ruÀ", 
ù£c_°©us_ruÀ_©å
 },

2220 { "l2çd_ruÀ", 
l2çd_ruÀ_©å
 },

2221 { "l2çd_u£r_ruÀ", 
µçd_u£r_ruÀ_©å
 },

2222 { "auth_£rvî_ruÀ", 
auth_£rvî_ruÀ_©å
 },

2223 { "auth_u£r_ruÀ", 
auth_u£r_ruÀ_©å
 },

2224 { "fw_ruÀ", 
fw_ruÀ_©å
 },

2225 { "«t_∑ss_ruÀ", 
«t_∑ss_ruÀ_©å
 },

2226 { "wl_basic_ruÀ", 
wl_basic_ruÀ_©å
 },

2227 { "wl_adv™˚d_ruÀ", 
wl_adv™˚d_ruÀ_©å
 },

2228 { "wl_wds_ruÀ", 
wl_wds_ruÀ_©å
 },

2229 { "wl_wme_ruÀ", 
wl_wme_ruÀ_©å
 },

2230 { "wl_wps_°a_ruÀ", 
wl_wps_°a_ruÀ_©å
 },

2231 { "wl_wps_ruÀ", 
wl_wps_ruÀ_©å
 },

2232 { "wl0_basic_ruÀ", 
wlv_basic_ruÀ_©å
 },

2233 { "wl0_i‚ame_ruÀ", 
wlv_i‚ame_ruÀ_©å
 },

2234 { "wl0_ssid_ruÀ", 
wlv_ssid_ruÀ_©å
 },

2235 { "wl0_£c_ruÀ", 
wlv_£c_ruÀ_©å
 },

2236 { "wl0_£c_wï_ruÀ", 
wlv_£c_wï_ruÀ_©å
 },

2237 { "wl0_£c_w∑_ruÀ", 
wlv_£c_w∑_ruÀ_©å
 },

2238 { "wl0_£c_w∑2_ruÀ", 
wlv_£c_w∑2_ruÀ_©å
 },

2239 { "wl00_a˛_basic_ruÀ", 
wlv_a˛_basic_ruÀ_©å
 },

2240 { "wl00_a˛_ruÀ", 
wlv_a˛_ruÀ_©å
 },

2241 { "wl01_a˛_basic_ruÀ", 
wlv_a˛_basic_ruÀ_©å
 },

2242 { "wl01_a˛_ruÀ", 
wlv_a˛_ruÀ_©å
 },

2243 { "wl02_a˛_basic_ruÀ", 
wlv_a˛_basic_ruÀ_©å
 },

2244 { "wl02_a˛_ruÀ", 
wlv_a˛_ruÀ_©å
 },

2245 { "wl03_a˛_basic_ruÀ", 
wlv_a˛_basic_ruÀ_©å
 },

2246 { "wl03_a˛_ruÀ", 
wlv_a˛_ruÀ_©å
 },

2247 { "wl1_basic_ruÀ", 
wlv_basic_ruÀ_©å
 },

2248 { "wl1_i‚ame_ruÀ", 
wlv_i‚ame_ruÀ_©å
 },

2249 { "wl1_ssid_ruÀ", 
wlv_ssid_ruÀ_©å
 },

2250 { "wl1_£c_ruÀ", 
wlv_£c_ruÀ_©å
 },

2251 { "wl1_£c_wï_ruÀ", 
wlv_£c_wï_ruÀ_©å
 },

2252 { "wl1_£c_w∑_ruÀ", 
wlv_£c_w∑_ruÀ_©å
 },

2253 { "wl1_£c_w∑2_ruÀ", 
wlv_£c_w∑2_ruÀ_©å
 },

2254 { "wl0_wds_basic_ruÀ", 
wl_wds_basic_ruÀ_©å
 },

2255 { "wl0_wds_£c_wï_ruÀ", 
wl_wds_£c_wï_ruÀ_©å
 },

2256 { "wl0_wds_£c_w∑_ruÀ", 
wl_wds_£c_w∑_ruÀ_©å
 },

2257 { "wl0_≠˛i_ruÀ", 
wl_≠˛i_ruÀ_©å
 },

2258 { "wl0_≠˛i_£c_wï_ruÀ", 
wl_≠˛i_£c_wï_ruÀ_©å
 },

2259 { "wl0_≠˛i_£c_w∑_ruÀ", 
wl_≠˛i_£c_w∑_ruÀ_©å
 },

2260 { "wl0_≠˛i_£c_w∑2_ruÀ", 
wl_≠˛i_£c_w∑_ruÀ_©å
 },

2261 { "wl0_≠˛i_sw≠_ruÀ", 
wl_≠˛i_sw≠_ruÀ_©å
 },

2262 { "wl0_≠˛i_sw≠_basic_ruÀ", 
wl_≠˛i_sw≠_basic_ruÀ_©å
 },

2263 { "wl0_≠˛i_sw≠_ch™√l_ruÀ", 
wl_≠˛i_sw≠_ch™√l_ruÀ_©å
 },

2264 { "wl0_≠˛i_sw≠_£c_wï_ruÀ", 
wl_≠˛i_sw≠_£c_wï_ruÀ_©å
 },

2265 { "wl0_≠˛i_sw≠_£c_w∑_ruÀ", 
wl_≠˛i_sw≠_£c_w∑_ruÀ_©å
 },

2266 { "wl0_≠˛i_sw≠_£c_w∑2_ruÀ", 
wl_≠˛i_sw≠_£c_w∑_ruÀ_©å
 },

2267 { "wl1_wds_basic_ruÀ", 
wl_wds_basic_ruÀ_©å
 },

2268 { "wl1_wds_£c_wï_ruÀ", 
wl_wds_£c_wï_ruÀ_©å
 },

2269 { "wl1_wds_£c_w∑_ruÀ", 
wl_wds_£c_w∑_ruÀ_©å
 },

2270 { "wl1_≠˛i_ruÀ", 
wl_≠˛i_ruÀ_©å
 },

2271 { "wl1_≠˛i_£c_wï_ruÀ", 
wl_≠˛i_£c_wï_ruÀ_©å
 },

2272 { "wl1_≠˛i_£c_w∑_ruÀ", 
wl_≠˛i_£c_w∑_ruÀ_©å
 },

2273 { "wl1_≠˛i_£c_w∑2_ruÀ", 
wl_≠˛i_£c_w∑_ruÀ_©å
 },

2274 { "x_mode_d©a", 
x_mode_d©a_©å
 },

2275 { "p‹tcfg_ruÀ", 
p‹tcfg_ruÀ_©å
 },

2276 { "«t_ruÀ", 
«t_ruÀ_©å
},

2277 { "≠p_íabÀ_ruÀ", 
≠p_íabÀ_ruÀ_©å
},

2278 { "mfg_ã°_ªsu…_ruÀ", 
mfg_ã°_ªsu…_ruÀ_©å
},

2279 { "£rül_num_ruÀ", 
£rül_num_ruÀ_©å
},

2280 { "ˇ±ive_ruÀ", 
ˇ±ive_ruÀ_©å
},

2281 { "igmp_¥oxy_ruÀ", 
igmp_¥oxy_ruÀ_©å
},

2282 { "µp_c⁄åﬁ_ruÀ", 
µp_c⁄åﬁ_ruÀ_©å
},

2283 { "ˇrd_ªadî_h¨dw¨e_ruÀ", 
ˇrd_ªadî_h¨dw¨e_ruÀ_©å
},

2284 #i‡
deföed
 (
PLATFORM_M2E
)

2285 { "°_deÂ©h_ruÀ", 
°_deÂ©h_ruÀ_©å
},

2286 { "gpiodef_ruÀ", 
gpiodef_ruÀ_©å
},

2287 { "u≤pc_£âög_ruÀ", 
u≤pc_£âög_ruÀ_©å
},

2288 { "u≤pc_°©us_ruÀ", 
u≤pc_°©us_ruÀ_©å
},

2290 #i‡
deföed
 (
PLATFORM_GMA
)

2291 { "w™_¥i‹ôy_ruÀ", 
w™_¥i‹ôy_ruÀ_©å
},

2292 { "WISP_dëe˘_p‹èl_ruÀ",
WISP_dt˘_ˇ±ive_p‹èl_ruÀ_©å
},

2293 { "gmn_«t_ruÀ", 
gmn_«t_ruÀ_©å
},

2294 { "gmn_fûãr_ruÀ", 
gmn_fûãr_ruÀ_©å
},

2295 { "gmn_mˇ°_ruÀ", 
gmn_mˇ°_ruÀ_©å
},

2297 { 
NULL
, NULL }

2300 
	#MAX_ATTR_NUM
 32

	)

2302 
	$£p_°rög
(*
w‹d
, c⁄° *
dñim
, **
idx_¨r
, 
max_tok
)

2304 *
°r
 = 
w‹d
;

2305 *
±r
;

2306 
pos
 = 0;

2307 
i
;

2309 
i
 = 0; i < 
max_tok
; i++) {

2310 
idx_¨r
[
i
] = 
NULL
;

2313 
°r
) {

2314 
±r
 = 
	`°r£p
(&
°r
, 
dñim
);

2315 i‡(
±r
 && 
pos
 < 
max_tok
) {

2316 
idx_¨r
[
pos
++] = 
±r
;

2321  
pos
;

2322 
	}
}

2337 
	$ez∂ib_gë_ruÀ
(*
ruÀ_£t
, 
¡h
, *
buf
, 
bsize
)

2339 
tmp
[
EZPLIB_BUF_LEN
];

2340 *
√xt
;

2341 *
w‹dli°
;

2342 *
°r
, *
±r
;

2343 
ªt
;

2345 
	`as£π
(
	`°æí
(
RULE_SEP
) == 1);

2347 i‡(!
buf
) {

2348  
EZPLIB_INVALID
;

2352 
	`mem£t
(
buf
, '\0', 
bsize
);

2354 i‡(!
ruÀ_£t
 || !*rule_set) {

2355  
EZPLIB_INVALID
;

2358 
w‹dli°
 = 
	`nvøm_gë
(
ruÀ_£t
);

2359 i‡(!
w‹dli°
) {

2360  
EZPLIB_NO_RULE_SET
;

2363 i‡(!*
w‹dli°
) {

2364  
EZPLIB_NO_RULE
;

2367 
ªt
 = 
	`¢¥ötf
(
tmp
, 
EZPLIB_BUF_LEN
, "%s", 
w‹dli°
);

2368 i‡(
ªt
 >
EZPLIB_BUF_LEN
) {

2369  
EZPLIB_VAL_TRUNC
;

2372 
°r
 = 
tmp
;

2373 
°r
) {

2374 
±r
 = 
	`°r£p
(&
°r
, 
RULE_SEP
);

2375 i‡(!
±r
) {

2376  
EZPLIB_NO_RULE
;

2379 i‡(
¡h
 != 0) {

2380 
¡h
 --;

2383 
ªt
 = 
	`¢¥ötf
(
buf
, 
bsize
, 
±r
);

2384 i‡(
ªt
 >
bsize
) {

2385  
EZPLIB_VAL_TRUNC
;

2387  
ªt
;

2390 i‡(
¡h
 >= 0) {

2391  
EZPLIB_NO_RULE
;

2394 
	}
}

2413 
	$ez∂ib_gë_subruÀ
(*
ruÀ_£t
, 
¡h
, 
°¨t
, 
íd
,

2414 *
buf
, 
bsize
)

2416 *
±r_¨øy
[
MAX_ATTR_NUM
];

2417 
w‹d
[
EZPLIB_BUF_LEN
];

2418 
ªt
, 
i
, 
j
, 
Àn
;

2420 i‡(!
ruÀ_£t
 || !*ruÀ_£à|| !
buf
) {

2421  
EZPLIB_INVALID
;

2424 i‡(
°¨t
 > 
íd
) {

2425  
EZPLIB_INVALID
;

2432 
	`mem£t
(
buf
, '\0', 
bsize
);

2434 
ªt
 = 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
¡h
, 
w‹d
, 
EZPLIB_BUF_LEN
);

2435 i‡(
ªt
 < 0) {

2436  
ªt
;

2439 
	`£p_°rög
(
w‹d
, 
ATTR_SEP
, 
±r_¨øy
, 
MAX_ATTR_NUM
);

2440 
i
 = 
j
 = 0; i < 
MAX_ATTR_NUM
; i++) {

2441 i‡(!
±r_¨øy
[
i
]) {

2444 i‡(
°¨t
 <
i
 && i <
íd
) {

2445 
Àn
 = 
	`¢¥ötf
(
buf
 + 
j
, 
bsize
 - j, "%s%s", 
±r_¨øy
[
i
], 
ATTR_SEP
);

2446 
j
 +
Àn
;

2450 i‡(
j
 > 0 && 
buf
[j-1]) {

2452 
buf
[
j
-1] = '\0';

2456 
	}
}

2471 
	$ez∂ib_gë_©å_vÆ
(*
ruÀ_£t
, 
¡h
, *
ty≥
, *
buf
, 
bsize
,

2472 
u£
)

2474 *
±r_¨øy
[
MAX_ATTR_NUM
];

2475 
w‹d
[
EZPLIB_BUF_LEN
];

2476 
ªt
, 
i
;

2479 i‡(!
ruÀ_£t
 || !*ruÀ_£à|| !
ty≥
 || !*ty≥ || !
buf
) {

2480  
EZPLIB_INVALID
;

2487 
	`mem£t
(
buf
, '\0', 
bsize
);

2489 
ªt
 = 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
¡h
, 
w‹d
, 
EZPLIB_BUF_LEN
);

2490 i‡(
ªt
 < 0) {

2491  
ªt
;

2494 
	`£p_°rög
(
w‹d
, 
ATTR_SEP
, 
±r_¨øy
, 
MAX_ATTR_NUM
);

2495 
i
 = 0; 
ruÀs
[i].
«me
; i++) {

2496 
©å
 *attr;

2497 
j
;

2498 i‡(
	`°rcmp
(
ruÀs
[
i
].
«me
, 
ruÀ_£t
) != 0) {

2502 
©å
 = 
ruÀs
[
i
].attr;

2503 
j
 = 0; 
©å
[j].
«me
 && 
±r_¨øy
[j]; j++) {

2504 i‡(
	`°rcmp
(
©å
[
j
].
«me
, 
ty≥
) == 0) {

2505 i‡(
u£
 =
EZPLIB_USE_CLI
 && 
©å
[
j
].
func_‹ig
) {

2507  
©å
[
j
].
	`func_‹ig
(
ty≥
, 
±r_¨øy
[j],

2508 
buf
, 
bsize
);

2509 } i‡(
u£
 =
EZPLIB_USE_WEB
 && 
©å
[
j
].
func_wøp
) {

2513  
©å
[
j
].
	`func_wøp
(
ty≥
, 
±r_¨øy
[j], 
buf
,

2514 
bsize
);

2520  
EZPLIB_NO_ATTRIBUTE
;

2521 
	}
}

2523 
	e›code
 {

2524 
	mADD_RULE
 = 0,

2525 
	mDELETE_RULE
 = 1,

2526 
	mREPLACE_RULE
 = 2

2530 
	$ez∂ib_›_ruÀ
(*
ruÀ_£t
, 
›code
 
›
, 
¡h
, *
√w_ruÀ
)

2532 
buf
[
EZPLIB_BUF_LEN
];

2533 
w‹d
[
EZPLIB_BUF_LEN
];

2534 *
w‹dli°
;

2535 *
±r
;

2536 
Àn
, 
ªt
, 
i
, 
ruÀ_num
;

2537 *
ruÀ_£p
 = 
RULE_SEP
;

2540 
ruÀ_num
 = 
	`ez∂ib_gë_ruÀ_num
(
ruÀ_£t
);

2541 i‡(
ruÀ_num
 < 0) {

2542  
EZPLIB_NO_RULE_SET
;

2545 
Àn
 = 
EZPLIB_BUF_LEN
;

2546 
±r
 = 
buf
;

2547 
i
 = 0; i < 
ruÀ_num
; i++) {

2548 *
ruÀ
;

2549 
ªt
 = 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
i
, 
w‹d
, 
EZPLIB_BUF_LEN
);

2550 i‡(
ªt
 < 0) {

2551  
ªt
;

2554 i‡(
i
 !
¡h
) {

2555 
ªt
 = 
	`¢¥ötf
(
±r
, 
Àn
, "%s%s", 
w‹d
, 
RULE_SEP
);

2556 i‡(
ªt
 >
Àn
) {

2557  
EZPLIB_VAL_TRUNC
;

2560 
›
) {

2561 
ADD_RULE
:

2562 
ªt
 = 
	`¢¥ötf
(
±r
, 
Àn
, "%s%s", 
√w_ruÀ
, 
RULE_SEP
);

2563 i‡(
ªt
 >
Àn
) {

2564  
EZPLIB_VAL_TRUNC
;

2571 
¡h
 = -1;

2574 
i
--;

2576 
DELETE_RULE
:

2580 
REPLACE_RULE
:

2581 
ªt
 = 
	`¢¥ötf
(
±r
, 
Àn
, "%s%s", 
√w_ruÀ
, 
RULE_SEP
);

2582 i‡(
ªt
 >
Àn
) {

2583  
EZPLIB_VAL_TRUNC
;

2587  
EZPLIB_INVALID
;

2592 
±r
 +
ªt
;

2593 
Àn
 -
ªt
;

2597 
Àn
 = 
EZPLIB_BUF_LEN
 -Üen;

2600 
	`as£π
(
	`°æí
(
RULE_SEP
) == 1);

2601 i‡(
buf
[
Àn
 - 1] =
ruÀ_£p
[0]) {

2602 
buf
[--
Àn
] = '\0';

2605 
	`nvøm_£t
(
ruÀ_£t
, 
buf
);

2606  
Àn
;

2607 
	}
}

2618 
	$ez∂ib_ª∂a˚_ruÀ
(*
ruÀ_£t
, 
¡h
, *
√w_ruÀ
)

2620 
ruÀ_num
;

2622 i‡(!
ruÀ_£t
 || !*ruÀ_£à|| !
√w_ruÀ
) {

2623  
EZPLIB_INVALID
;

2626 
ruÀ_num
 = 
	`ez∂ib_gë_ruÀ_num
(
ruÀ_£t
);

2627 i‡(
ruÀ_num
 < 0) {

2628  
EZPLIB_NO_RULE_SET
;

2631 i‡(
¡h
 > 
ruÀ_num
 ||Çth < 0) {

2632  
EZPLIB_IDX_OUT_RANGE
;

2635 
	`ez∂ib_›_ruÀ
(
ruÀ_£t
, 
REPLACE_RULE
, 
¡h
, 
√w_ruÀ
);

2637 
	}
}

2648 
	$ez∂ib_ª∂a˚_©å
(*
ruÀ_£t
, 
¡h
, *
©å_«me
, *
√w_©å
)

2650 *
±r_¨øy
[
MAX_ATTR_NUM
];

2651 
w‹d
[
EZPLIB_BUF_LEN
];

2652 
tmp
[
EZPLIB_BUF_LEN
];

2653 
ªt
, 
i
, 
byãs
, 
©å_Àn
;

2654 *
vÆ
, *
°r
, *
£p
 = 
ATTR_SEP
;

2656 i‡(!
ruÀ_£t
 || !*ruÀ_£à|| !
©å_«me
 || !*©å_«mê|| !
√w_©å
) {

2657  
EZPLIB_INVALID
;

2660 
ªt
 = 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
¡h
, 
w‹d
, 
EZPLIB_BUF_LEN
);

2661 i‡(
ªt
 < 0) {

2662  
ªt
;

2665 
	`£p_°rög
(
w‹d
, 
ATTR_SEP
, 
±r_¨øy
, 
MAX_ATTR_NUM
);

2666 
i
 = 0; 
ruÀs
[i].
«me
; i++) {

2667 
©å
 *attr;

2668 
j
;

2669 i‡(
	`°rcmp
(
ruÀs
[
i
].
«me
, 
ruÀ_£t
) != 0) {

2673 
©å
 = 
ruÀs
[
i
].attr;

2674 
byãs
 = 
EZPLIB_BUF_LEN
;

2675 
°r
 = 
tmp
;

2676 
j
 = 0; 
©å
[j].
«me
 && 
±r_¨øy
[j]; j++) {

2677 i‡(
	`°rcmp
(
©å
[
j
].
«me
, 
©å_«me
) == 0) {

2678 
vÆ
 = 
√w_©å
;

2680 
vÆ
 = 
±r_¨øy
[
j
];

2684 
©å_Àn
 = 
	`°æí
(
vÆ
) + 1;

2685 
ªt
 = 
	`¢¥ötf
(
°r
, 
byãs
, "%s%s", 
vÆ
, 
£p
);

2686 i‡(
ªt
 >
byãs
) {

2687  
EZPLIB_VAL_TRUNC
;

2690 
	`as£π
(
ªt
 =
©å_Àn
);

2692 
byãs
 -
©å_Àn
;

2693 
°r
 +
©å_Àn
;

2697 i‡(*(--
°r
Ë=
£p
[0]) {

2698 *
°r
 = '\0';

2701  
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
¡h
, 
tmp
);

2704  
EZPLIB_NO_ATTRIBUTE
;

2705 
	}
}

2715 
	$ez∂ib_dñëe_ruÀ
(*
ruÀ_£t
, 
¡h
)

2717 i‡(!
ruÀ_£t
 || !*rule_set) {

2718  
EZPLIB_INVALID
;

2721 
	`ez∂ib_›_ruÀ
(
ruÀ_£t
, 
DELETE_RULE
, 
¡h
, 
NULL
);

2723 
	}
}

2734 
	$ez∂ib_add_ruÀ
(*
ruÀ_£t
, 
¡h
, *
√w_ruÀ
)

2736 
ruÀ_num
;

2738 i‡(!
ruÀ_£t
 || !*ruÀ_£à|| !
√w_ruÀ
) {

2739  
EZPLIB_INVALID
;

2742 
ruÀ_num
 = 
	`ez∂ib_gë_ruÀ_num
(
ruÀ_£t
);

2743 i‡(
ruÀ_num
 < 0) {

2744  
EZPLIB_NO_RULE_SET
;

2747 i‡(
¡h
 > 
ruÀ_num
 ||Çth < 0) {

2748  
EZPLIB_IDX_OUT_RANGE
;

2751 i‡(
¡h
 =
ruÀ_num
) {

2752 
	`ez∂ib_≠≥nd_ruÀ
(
ruÀ_£t
, 
√w_ruÀ
);

2754 
	`ez∂ib_›_ruÀ
(
ruÀ_£t
, 
ADD_RULE
, 
¡h
, 
√w_ruÀ
);

2757 
	}
}

2768 
	$ez∂ib_¥ïíd_ruÀ
(*
ruÀ_£t
, *
√w_ruÀ
)

2770 i‡(!
ruÀ_£t
 || !*ruÀ_£à|| !
√w_ruÀ
) {

2771  
EZPLIB_INVALID
;

2774  
	`ez∂ib_›_ruÀ
(
ruÀ_£t
, 
ADD_RULE
, 0, 
√w_ruÀ
);

2775 
	}
}

2786 
	$ez∂ib_≠≥nd_ruÀ
(*
ruÀ_£t
, *
√w_ruÀ
)

2788 
buf
[
EZPLIB_BUF_LEN
];

2789 
Àn
;

2790 *
ﬁd_ruÀs
;

2792 i‡(!
ruÀ_£t
 || !*ruÀ_£à|| !
√w_ruÀ
) {

2793  
EZPLIB_INVALID
;

2796 
ﬁd_ruÀs
 = 
	`nvøm_gë
(
ruÀ_£t
);

2797 i‡(!
ﬁd_ruÀs
) {

2798  
EZPLIB_NO_RULE_SET
;

2801 i‡(!*
ﬁd_ruÀs
) {

2803 
Àn
 = 
	`¢¥ötf
(
buf
, 
EZPLIB_BUF_LEN
, "%s", 
√w_ruÀ
);

2806 
Àn
 = 
	`¢¥ötf
(
buf
, 
EZPLIB_BUF_LEN
, "%s%s%s", 
ﬁd_ruÀs
,

2807 
RULE_SEP
, 
√w_ruÀ
);

2810 i‡(
Àn
 >
EZPLIB_BUF_LEN
) {

2811  
EZPLIB_VAL_TRUNC
;

2813 
	`nvøm_£t
(
ruÀ_£t
, 
buf
);

2815  
Àn
;

2816 
	}
}

2824 
	$ez∂ib_gë_ruÀ_num
(*
ruÀ_£t
)

2826 *
dñim
;

2827 *
£p
 = 
RULE_SEP
;

2828 
i
;

2829 
cou¡
;

2831 
	`as£π
(
	`°æí
(
RULE_SEP
) == 1);

2833 
ruÀ_£t
 = 
	`nvøm_gë
(rule_set);

2834 i‡(!
ruÀ_£t
) {

2835  
EZPLIB_NO_RULE_SET
;

2839 i‡(!*
ruÀ_£t
) {

2843 
i
 = 0, 
cou¡
 = 0; 
ruÀ_£t
[i] != '\0'; i++) {

2844 i‡(
ruÀ_£t
[
i
] =
£p
[0]) {

2845 
cou¡
++;

2850  
cou¡
+1;

2851 
	}
}

2857 
	$ez∂ib_check_ruÀ_ch™ged
(*
ruÀ_£t
, 
¡h
, *
√w_ruÀ
) {

2858 
tmp
[256];

2859 
Àn
;

2861 i‡((
Àn
 = 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
¡h
, 
tmp
, (tmp))) <= 0) {

2863 
	`¥ötf
("Eº‹ :Éz∂ib_gë_ruÀ(Ëªtu∫†%d\n", 
Àn
);

2866  
	`°∫cmp
(
√w_ruÀ
, 
tmp
, 
Àn
);

2867 
	}
}

2873 
	$ez∂ib_check_©å_ch™ged
(*
ruÀ_£t
, 
¡h
, *
©å
, *
√w_ruÀ
) {

2874 
tmp
[256];

2875 
Àn
;

2877 i‡((
Àn
 = 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
,

2878 
¡h
, 
©å
, 
tmp
, —mp), 
EZPLIB_USE_CLI
)) < 0) {

2880 
	`¥ötf
("Eº‹ :Éz∂ib_gë_©å_vÆ(Ëªtu∫†%d\n", 
Àn
);

2883 i‡(
	`°æí
(
√w_ruÀ
Ë!
Àn
) {

2887  
	`°∫cmp
(
√w_ruÀ
, 
tmp
, 
Àn
);

2888 
	}
}

2891 
	$ez∂ib_föd_©å_vÆ
(*
ruÀ_£t
, *
föd_©å
, *
föd_vÆ
,

2892 *
©å
, *
buf
, 
bsize
)

2894 
i
;

2895 
tmp
[256];

2896 
i
 = 0; i < 
	`ez∂ib_gë_ruÀ_num
(
ruÀ_£t
); i++) {

2897 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
 , 
föd_©å
, 
tmp
, (tmp),

2898 
EZPLIB_USE_CLI
);

2899 if(
	`°r°r
(
tmp
, 
föd_vÆ
)) {

2900 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, 
©å
, 
buf
, 
bsize
,

2901 
EZPLIB_USE_CLI
);

2906 
	}
}

	@ezp-lib.h

1 #i‚de‡
_EZP_LIB_H


2 
	#_EZP_LIB_H


	)

4 
	#EZPLIB_BUF_LEN
 8192

	)

6 
	#EZPLIB_USE_CLI
 0

	)

7 
	#EZPLIB_USE_WEB
 1

	)

9 
	#EZPLIB_INVALID
 -1

	)

10 
	#EZPLIB_VAL_TRUNC
 -2

	)

11 
	#EZPLIB_NO_RULE_SET
 -3

	)

12 
	#EZPLIB_NO_RULE
 -4

	)

13 
	#EZPLIB_NO_ATTRIBUTE
 -5

	)

14 
	#EZPLIB_IDX_OUT_RANGE
 -6

	)

16 
	#RULE_SEP
 "|"

	)

17 
	#ATTR_SEP
 "^"

	)

23 
ez∂ib_gë_ruÀ
(*
ruÀ_£t
, 
¡h
, *
buf
, 
bsize
);

30 
ez∂ib_gë_subruÀ
(*
ruÀ_£t
, 
¡h
, 
°¨t
, 
íd
,

31 *
buf
, 
bsize
);

38 
ez∂ib_gë_©å_vÆ
(*
ruÀ_£t
, 
¡h
, *
ty≥
, *
buf
,

39 
bsize
, 
u£
);

44 
ez∂ib_ª∂a˚_ruÀ
(*
ruÀ_£t
, 
¡h
, *
√w_ruÀ
);

50 
ez∂ib_ª∂a˚_©å
(*
ruÀ_£t
, 
¡h
, *
©å
, *
√w_©å
);

55 
ez∂ib_≠≥nd_ruÀ
(*
ruÀ_£t
, *
√w_ruÀ
);

60 
ez∂ib_¥ïíd_ruÀ
(*
ruÀ_£t
, *
√w_ruÀ
);

65 
ez∂ib_add_ruÀ
(*
ruÀ_£t
, 
¡h
, *
√w_ruÀ
);

70 
ez∂ib_dñëe_ruÀ
(*
ruÀ_£t
, 
¡h
);

75 
ez∂ib_gë_ruÀ_num
(*
ruÀ_£t
);

77 
ez∂ib_check_ruÀ_ch™ged
(*
ruÀ_£t
, 
¡h
, *
√w_ruÀ
);

79 
ez∂ib_check_©å_ch™ged
(*
ruÀ_£t
, 
¡h
, *
©å
, *
√w_ruÀ
);

86 
ez∂ib_föd_©å_vÆ
(*
ruÀ_£t
, *
föd_©å
, *
föd_vÆ
,

87 *
©å
, *
buf
, 
bsize
);

	@ezpcom-lib.h

1 #i‚de‡
_EZPCOM_LIB_H


2 
	#_EZPCOM_LIB_H


	)

8 
	#HOTPLUG_USB
 0x01

	)

9 
	#HOTPLUG_SCSI_GENERIC
 0x02

	)

10 
	#HOTPLUG_BOTH
 (
HOTPLUG_USB
|
HOTPLUG_SCSI_GENERIC
)

	)

12 
	#EZP_COM_VENDOR_MAP
(
X
) \

13 
	`X
(
AUTO
, "Auto", 0x3789, 1) \

14 
	`X
(3
GO
, "3GO", 0x1e89, 1) \

15 
	`X
(
ISONIC
, "iSonic", 0x19d2, 1) \

16 
	`X
(
ALINK
, "A-Link", 0x1e0e, 1) \

17 
	`X
(
ALCATEL
, "ALCATEL / Vibo", 0x1c9e, 1) \

18 
	`X
(
ALCATEL2
, "ALCATEL (Alternative)", 0x1bbb, 1) \

19 
	`X
(
AMOI
, "AMOI", 0x1614, 1) \

20 
	`X
(
ANYDATA
, "AnyDATA", 0x16d5, 0) \

21 
	`X
(
ASUS
, "ASUSTek", 0x0b05, 1) \

22 
	`X
(
AUDIOVOX
, "AUDIOVOX", 0x0f3d, 0) \

23 
	`X
(
BANDLUXE
, "Bandluxe", 0x1a8d, 1) \

24 
	`X
(
BENQ
, "BENQ", 0x19d2, 1) \

25 
	`X
(
CMOTECH
, "C-Motech", 0x16da, 1) \

26 
	`X
(
CINTERION
, "Cinterion", 0x1e2d, 1) \

27 
	`X
(
DLINK
, "D-Link", 0x07d1, 1) \

28 
	`X
(
DLINK2
, "D-Link (Alternative)", 0x1186, 1) \

29 
	`X
(
DLINK3
, "D-Link (DWR)", 0x2001, 1) \

30 
	`X
(
DUPONT
, "Dupont/Toshiba (Alternative)", 0x1d09, 1) \

31 
	`X
(
EPIVALLEY
, "EpiValley", 0x1b7d, 1) \

32 
	`X
(
HUAWEI
, "Huawei", 0x12d1, 1) \

33 
	`X
(
HUAWEI2
, "Huawei (Alternative)", 0x1033, 1) \

34 
	`X
(
HUMMER
, "Hummer", 0x1ab7, 1) \

35 
	`X
(
LG
, "LG", 0x1004, 1) \

36 
	`X
(
LONGLUNG
, "LONGLUNG", 0x1c9e, 1) \

37 
	`X
(
MAXON
, "Maxon", 0x16d8, 1) \

38 
	`X
(
QMI
, "Netgear", 0x1199, 1) \

39 
	`X
(
NOKIA
, "Nokia", 0x0421, 1) \

40 
	`X
(
NOVATEL_MERLIN
, "Novatel", 0x1410, 1) \

41 
	`X
(
OPTION
, "Option / SimCom / SamSung", 0x05c6, 1) \

42 
	`X
(
OPTION2
, "Option (HSO) / AT&T", 0x0af0, 1) \

43 
	`X
(
QISDA
, "Qisda", 0x1da5, 1) \

44 
	`X
(
QUANTA
, "Quanta / NU / Royal", 0x0408, 1) \

45 
	`X
(
UTSTARCOM
, "Pantech", 0x106c, 1) \

46 
	`X
(
UTSTARCOM2
, "Pantech", 0x10a9, 1) \

47 
	`X
(
SAMSUNG
, "SamSung", 0x04e9, 0) \

48 
	`X
(
SAMSUNG2
, "SamSung (Alternative)", 0x04e8, 1) \

49 
	`X
(
SIERRA
, "Sierra", 0x1199, 1) \

50 
	`X
(
SOLOMON
, "Solomon", 0x1dd6, 1) \

51 
	`X
(
SONYERICSSON
, "Sony Ericsson", 0x0fce, 1) \

52 
	`X
(
S¥ódåum
, "Spreadtrum", 0x1782, 1) \

53 
	`X
(
TOSHIBA
, "Toshiba", 0x0930, 1) \

54 
	`X
(
TPLINK
, "TP-Link", 0x2357, 1) \

55 
	`X
(
WINBEST
, "WinBest", 0x1c9e, 1) \

56 
	`X
(
ZTE
, "ZTE", 0x19d2, 1) \

57 
	`X
(
UBLOX
, "UBLOX", 0x05c6, 1) \

58 
	`X
(
EMPTY
, "", 0x0, 0) \

59 

	)

81 
	#EZP_COM_MAP_EMPTY
(
X
) \

82 
	`X
("", \

83 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

84 0, 0, 0x0, 
HOTPLUG_BOTH
, \

86 
NULL
, 0) \

87 

	)

89 
	#EZP_COM_MAP_AUTO
(
X
) \

90 
	`X
("Auto", \

91 0x5233, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

92 0, 0, 0x0, 
HOTPLUG_BOTH
, \

94 
NULL
, 1 ) \

95 
	`X
("", \

96 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

97 0, 0, 0x0, 
HOTPLUG_BOTH
, \

99 
NULL
, 0) \

100 

	)

102 
	#EZP_COM_MAP_HUAWEI
(
X
) \

103 
	`X
("Generic", \

104 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

105 1, 1, 0x0, 
HOTPLUG_BOTH
, \

107 
NULL
, 1 ) \

108 
	`X
("E3131", \

109 0x14„, 
HUAWEI
, 0x1001, 0x0, 0x1, -1, \

110 0, 0, 0x0, 
HOTPLUG_SCSI_GENERIC
, \

113 
	`X
("E3131-1", \

114 0x1f01, 
HUAWEI
, 0x1001, 0x0, 0x1, -1, \

115 0, 0, 0x0, 
HOTPLUG_SCSI_GENERIC
, \

118 
	`X
("E122", \

119 0x1446, 
HUAWEI
, 0x1001, 0x0, 0x3, -1, \

120 0, 0, 0x0, 
HOTPLUG_BOTH
, \

123 
	`X
("B970", \

124 0xFFFF, 
HUAWEI
, 0x1001, 0x0, 0x0, -1, \

125 0, 0, 0x0, 
HOTPLUG_BOTH
, \

127 
NULL
, 1) \

128 
	`X
("E1550", \

129 0x1446, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

130 0, 0, 0x0, 
HOTPLUG_BOTH
, \

133 
	`X
("E156G", \

134 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

135 1, 1, 0x0, 
HOTPLUG_BOTH
, \

137 
NULL
, 1) \

138 
	`X
("E160E", \

139 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

140 1, 1, 0x0, 
HOTPLUG_BOTH
, \

142 
NULL
, 1) \

143 
	`X
("E160G", \

144 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

145 1, 1, 0x0, 
HOTPLUG_BOTH
, \

147 
NULL
, 1) \

148 
	`X
("E161", \

149 0x1446, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

150 0, 0, 0x0, 
HOTPLUG_BOTH
, \

153 
	`X
("E169", \

154 0x1001, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

155 1, 1, 0x0, 
HOTPLUG_BOTH
, \

157 
NULL
, 1 ) \

158 
	`X
("E1692", \

159 0x1446, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

160 0, 0, 0x0, 
HOTPLUG_BOTH
, \

163 
	`X
("E169G", \

164 0x1001, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

165 1, 1, 0x0, 
HOTPLUG_BOTH
, \

168 
	`X
("E169U", \

169 0x1446, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

170 0, 0, 0x0, 
HOTPLUG_BOTH
, \

173 
	`X
("E170", \

174 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

175 1, 1, 0x0, 
HOTPLUG_BOTH
, \

177 
NULL
, 1) \

178 
	`X
("E172", \

179 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

180 1, 1, 0x0, 
HOTPLUG_BOTH
, \

182 
NULL
, 1) \

183 
	`X
("E1750", \

184 0x1446, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

185 0, 0, 0x0, 
HOTPLUG_BOTH
, \

188 
	`X
("E1762", \

189 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

190 1, 1, 0x0, 
HOTPLUG_BOTH
, \

192 
NULL
, 1) \

193 
	`X
("E176G", \

194 0x140c, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

195 1, 1, 0x0, 
HOTPLUG_BOTH
, \

197 
NULL
, 1 ) \

198 
	`X
("E177", \

199 0x1446, 
HUAWEI
, 0x140c, 0x0, 0x1, -1, \

200 0, 0, 0x0, 
HOTPLUG_BOTH
, \

203 
	`X
("E180", \

204 0x1414, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

205 1, 1, 0x0, 
HOTPLUG_BOTH
, \

207 
NULL
, 1) \

208 
	`X
("E182E", \

209 0x1446, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

210 0, 0, 0x0, 
HOTPLUG_BOTH
, \

213 
	`X
("E219", \

214 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

215 1, 1, 0x0, 
HOTPLUG_BOTH
, \

217 
NULL
, 1) \

218 
	`X
("E220", \

219 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

220 1, 1, 0x0, 
HOTPLUG_BOTH
, \

222 
NULL
, 1) \

223 
	`X
("E226", \

224 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

225 1, 1, 0x0, 
HOTPLUG_BOTH
, \

227 
NULL
, 1) \

228 
	`X
("E270", \

229 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

230 1, 1, 0x0, 
HOTPLUG_BOTH
, \

232 
NULL
, 1) \

233 
	`X
("E353", \

234 0x14„, 
HUAWEI
, 0x0, 0x0, 0x0f, 0x8f, \

235 0, 0, 0x0, 
HOTPLUG_BOTH
, \

238 
	`X
("E367", \

239 0x1446, 
HUAWEI
, 0x14ac, 0x0, 0x1, -1, \

240 0, 0, 0x0, 
HOTPLUG_BOTH
, \

243 
	`X
("E368", \

244 0x1446, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

245 0, 0, 0x0, 
HOTPLUG_BOTH
, \

248 
	`X
("E392", \

249 0x1505, 
HUAWEI
, 0x140c, 0x0, 0x1, -1, \

250 0, 0, 0x0, 
HOTPLUG_BOTH
, \

253 
	`X
("E398", \

254 0x1505, 
HUAWEI
, 0x1506, 0x0, 0x01, 0x81, \

255 0, 0, 0x0, 
HOTPLUG_BOTH
, \

258 
	`X
("E800", \

259 0x1003, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

260 1, 1, 0x0, 
HOTPLUG_BOTH
, \

262 
NULL
, 1) \

263 
	`X
("E870", \

264 0xFFFF, 
HUAWEI
, 0x1003, 0x0, 0x0, -1, \

265 0, 0, 0x0, 
HOTPLUG_BOTH
, \

267 
NULL
, 1) \

268 
	`X
("EC1260", \

269 0x140b, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

270 1, 1, 0x0, 
HOTPLUG_BOTH
, \

272 
NULL
, 1) \

273 
	`X
("EC1260 (Alternative)", \

274 0x140b, 
HUAWEI
, 0x0, 0x0, 0x1, -1, \

275 0, 0, 0x0, 
HOTPLUG_BOTH
, \

278 
	`X
("EC156", \

279 0x1505, 
HUAWEI
, 0x0, 0x00, 0x08, 0x87, \

280 0, 0, 0x0, 
HOTPLUG_BOTH
, \

283 
	`X
("EC168C", \

284 0x1412, 
HUAWEI
, 0x0, 0x00, 0x08, 0x87, \

285 0, 0, 0x0, 
HOTPLUG_BOTH
 , \

288 
	`X
("EC169", \

289 0x1446, 
HUAWEI
, 0x1001, 0x0, 0x08, 0x87, \

290 0, 0, 0x0, 
HOTPLUG_BOTH
, \

293 
	`X
("ET128", \

294 0x1da1, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

295 1, 1, 0x0, 
HOTPLUG_BOTH
, \

297 
NULL
, 1) \

298 
	`X
("EW660", \

299 0x1001, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

300 1, 1, 0x0, 
HOTPLUG_BOTH
, \

302 
NULL
, 1) \

303 
	`X
("K3715", \

304 0x1001, 
HUAWEI
, 0x0, 0x0, 0x0, -1, \

305 1, 1, 0x0, 
HOTPLUG_BOTH
, \

307 
NULL
, 1) \

308 
	`X
("K3765", \

309 0x1520, 
HUAWEI
, 0x1465, 0x0, 0x1, -1, \

310 0, 0, 0x0, 
HOTPLUG_BOTH
, \

313 
	`X
("K4505 (HSPA+)", \

314 0x1521, 
HUAWEI
, 0x1464, 0x0, 0x1, -1, \

315 0, 0, 0x0, 
HOTPLUG_BOTH
, \

318 
	`X
("K4511 (HSPA+)", \

319 0x14b7, 
HUAWEI
, 0x14cc, 0x0, 0x1, -1, \

320 0, 0, 0x0, 
HOTPLUG_BOTH
, \

323 
	`X
("T1731", \

324 0x1446, 
HUAWEI
, 0x140c, 0x0, 0x1, -1, \

325 0, 0, 0x0, 
HOTPLUG_BOTH
, \

328 
	`X
("", \

329 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

330 0, 0, 0x0, 
HOTPLUG_BOTH
, \

332 
NULL
, 0) \

333 

	)

335 
	#EZP_COM_MAP_HUAWEI2
(
X
) \

336 
	`X
("E630", \

337 0x0035, 
HUAWEI
, 0x1003, 0x0, 0x0, -1, \

338 1, 0, 0x0, 
HOTPLUG_BOTH
, \

340 
NULL
, 1) \

341 
	`X
("", \

342 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

343 0, 0, 0x0, 
HOTPLUG_BOTH
, \

345 
NULL
, 0) \

346 

	)

348 
	#EZP_COM_MAP_OPTION
(
X
) \

349 
	`X
("AnyDATA ADU-500A/ADU-510A/ADU-520A", \

350 0x1000, 
ANYDATA
, 0x6502, 0x0, 0x08, -1,\

351 0, 0, 0x0, 
HOTPLUG_BOTH
, \

354 
	`X
("GlobeSurfer Icon 7.2", \

355 0x1000, 
OPTION2
, 0x6901, 0x0, 0x05, -1, \

356 0, 0, 0x0, 
HOTPLUG_BOTH
, \

359 
	`X
("GlobeSurfer Icon (Vodafone EasyBox)", \

360 0x1000, 
OPTION2
, 0x6600, 0x0, 0x05, -1, \

361 0, 0, 0x0, 
HOTPLUG_BOTH
, \

364 
	`X
("GlobeSurfer GT MAX 3.6", \

365 0x1000, 
OPTION2
, 0x6600, 0x0, 0x05, 0x84,\

366 0, 0, 0x0, 
HOTPLUG_BOTH
, \

369 
	`X
("GlobeSurfer GT MAX 7.2", \

370 0x1000, 
OPTION2
, 0x6701, 0x0, 0x05, -1,\

371 0, 0, 0x0, 
HOTPLUG_BOTH
, \

374 
	`X
("GlobeSurfer GT EXPRESS 7.2", \

375 0x1000, 
OPTION2
, 0x6701, 0x0, 0x05, 0x84,\

376 0, 0, 0x0, 
HOTPLUG_BOTH
, \

379 
	`X
("SGH-Z810", \

380 0x1000, 
SAMSUNG
, 0x6601, 0x0, 0x05, -1, \

381 0, 0, 0x0, 
HOTPLUG_BOTH
, \

384 
	`X
("", \

385 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

386 0, 0, 0x0, 
HOTPLUG_BOTH
, \

388 
NULL
, 0) \

389 

	)

391 
	#EZP_COM_MAP_OPTION2
(
X
) \

392 
	`X
("iCon 401 (HSO)", \

393 0x7401, 
EMPTY
, 0x0, 0xff, 0x01, 0x81, \

394 0, 0, 0x0, 
HOTPLUG_BOTH
, \

397 
	`X
("AT&T USBConnect Quicksilver (HSO)", \

398 0xd033, 
EMPTY
, 0x0, 0xff, 0x05, -1,\

399 0, 0, 0x0, 
HOTPLUG_BOTH
, \

402 
	`X
("GlobeSurfer Icon 7.2 (HSO)", \

403 0x6911, 
EMPTY
, 0x0, 0xff, 0x05, -1, \

404 0, 0, 0x0, 
HOTPLUG_BOTH
, \

407 
	`X
("GlobeSurfer HSUPA (HSO)", \

408 0x7011, 
EMPTY
, 0x0, 0xff, 0x05, -1,\

409 0, 0, 0x0, 
HOTPLUG_BOTH
, \

412 
	`X
("Icon 225 (HSO)", \

413 0x6971, 
EMPTY
, 0x0, 0xff, 0x05, -1,\

414 0, 0, 0x0, 
HOTPLUG_BOTH
, \

417 
	`X
("Vodafone K3760 (HSO)", \

418 0x7501, 
EMPTY
, 0x0, 0xff, 0x01, -1,\

419 0, 0, 0x0, 
HOTPLUG_BOTH
, \

422 
	`X
("", \

423 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

424 0, 0, 0x0, 
HOTPLUG_BOTH
, \

426 
NULL
, 0) \

427 

	)

446 
	#EZP_COM_MAP_ZTE
(
X
) \

447 
	`X
("Generic", \

448 0x2000, 
ZTE
, 0x0031, 0x0, 0x01, -1, \

449 0, 0, 0x0, 
HOTPLUG_BOTH
, \

452 
	`X
("K3565-Z", \

453 0x2000, 
ZTE
, 0x0063, 0x0, 0x01, -1, \

454 0, 0, 0x0, 
HOTPLUG_BOTH
, \

457 
	`X
("MC2716", \

458 0xfff1, 
ZTE
, 0xfff1, 0x0, 0x04, -1, \

459 0, 0, 0x0, 
HOTPLUG_BOTH
, \

462 
	`X
("MF622", \

463 0x2000, 
ZTE
, 0x0002, 0x0, 0x04, -1, \

464 0, 0, 0x0, 
HOTPLUG_BOTH
, \

467 
	`X
("MF622 (version 2)", \

468 0x2000, 
ZTE
, 0x0001, 0x0, 0x0, -1, \

469 1, 0, 0x0, 
HOTPLUG_BOTH
, \

471 
NULL
, 1) \

472 
	`X
("MF626", \

473 0x2000, 
ZTE
, 0x0031, 0x0, 0x01, -1, \

474 0, 0, 0x0, 
HOTPLUG_BOTH
, \

477 
	`X
("MF628", \

478 0x2000, 
ZTE
, 0x0015, 0x0, 0x08, -1, \

479 0, 0x80, 0x0, 
HOTPLUG_BOTH
, \

482 
	`X
("MF628+", \

483 0x2000, 
ZTE
, 0x0031, 0x0, 0x01, -1, \

484 0, 0, 0x0, 
HOTPLUG_BOTH
, \

487 
	`X
("MF631", \

488 0x0053, 
ZTE
, 0x0117, 0x0, 0x01, -1, \

489 0, 4, 0x0, 
HOTPLUG_BOTH
, \

491 
NULL
, 1) \

492 
	`X
("MF633", \

493 0x2000, 
ZTE
, 0x0031, 0x0, 0x01, -1, \

494 0, 0, 0x0, 
HOTPLUG_BOTH
, \

497 
	`X
("MF636", \

498 0x2000, 
ZTE
, 0x0031, 0x0, 0x01, -1, \

499 0, 0, 0x0, 
HOTPLUG_BOTH
, \

502 
	`X
("MF636+", \

503 0x2003, 
ZTE
, 0x2003, 0x0, 0x01, -1, \

504 0, 0, 0x0, 
HOTPLUG_BOTH
, \

507 
	`X
("MF637", \

508 0x2000, 
ZTE
, 0x0031, 0x0, 0x01, -1, \

509 0, 0, 0x0, 
HOTPLUG_BOTH
, \

512 
	`X
("MF638", \

513 0x2000, 
ZTE
, 0x0037, 0x0, 0x01, -1, \

514 0, 0, 0x0, 
HOTPLUG_BOTH
, \

517 
	`X
("MF668", \

518 0x2000, 
ZTE
, 0x0016, 0x0, 0x01, -1, \

519 0, 0, 0x0, 
HOTPLUG_BOTH
, \

521 
NULL
, 1) \

522 
	`X
("MF668 (HSPA+)", \

523 0x2000, 
ZTE
, 0x0017, 0x0, 0x01, -1, \

524 0, 0, 0x0, 
HOTPLUG_BOTH
, \

527 
	`X
("MF820", \

528 0x0166, 
ZTE
, 0x0167, 0x0, 0x01, -1, \

529 0, 0, 0x0, 
HOTPLUG_BOTH
, \

532 
	`X
("MF821", \

533 0x0166, 
ZTE
, 0x0257, 0x0, 0x01, -1, \

534 0, 0, 0x0, 
HOTPLUG_BOTH
, \

537 
	`X
("MF190", \

538 0x0083, 
ZTE
, 0x0117, 0x0, 0x01, -1, \

539 0, 0, 0x0, 
HOTPLUG_BOTH
, \

542 
	`X
("MU351", \

543 0x0003, 
ZTE
, 0x0037, 0x0, 0x01, -1, \

544 0, 0, 0x0, 
HOTPLUG_BOTH
, \

547 
	`X
("ONDA MT503HS", \

548 0x2000, 
ZTE
, 0x0002, 0x0, 0x08, -1, \

549 0, 0, 0x0, 
HOTPLUG_BOTH
, \

552 
	`X
("ONDA MT505UP", \

553 0x2000, 
ZTE
, 0x0002, 0x0, 0x03, -1, \

554 0, 0, 0x0, 
HOTPLUG_BOTH
, \

557 
	`X
("ONDA MT525UP", \

558 0x2000, 
ZTE
, 0x0002, 0x0, 0x0, -1, \

559 0, 4, 0x0, 
HOTPLUG_BOTH
, \

561 
NULL
, 1) \

562 
	`X
("", \

563 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

564 0, 0, 0x0, 
HOTPLUG_BOTH
, \

566 
NULL
, 0) \

567 

	)

572 
	#EZP_COM_MAP_BANDLUXE
(
X
) \

573 
	`X
("C100", \

574 0xFFFF, 
BANDLUXE
, 0x1002, 0x0, 0x05, 0x82, \

575 0, 0, 0x0, 
HOTPLUG_BOTH
, \

577 
NULL
, 1) \

578 
	`X
("C100 (Alternative)", \

579 0x1000, 
BANDLUXE
, 0x1002, 0x0, 0x05, 0x82, \

580 0, 0, 0x0, 
HOTPLUG_BOTH
, \

582 
NULL
, 1) \

583 
	`X
("C120/C170", \

584 0x1000, 
BANDLUXE
, 0x1002, 0x0, 0x05, 0x82, \

585 0, 4, 0x0, 
HOTPLUG_BOTH
, \

587 
NULL
, 1) \

588 
	`X
("C270", \

589 0x1000, 
BANDLUXE
, 0x1009, 0x0, 0x05, 0x82, \

590 0, 4, 0x0, 
HOTPLUG_BOTH
, \

592 
NULL
, 1) \

593 
	`X
("M152", \

594 0x1007, 
BANDLUXE
, 0x1007, 0x0, 0x05, 0x82, \

595 0, 4, 0x0, 
HOTPLUG_BOTH
, \

597 
NULL
, 1) \

598 
	`X
("M300LC (HSPA+)", \

599 0x100b, 
BANDLUXE
, 0x1002, 0x0, 0x05, 0x82, \

600 0, 4, 0x0, 
HOTPLUG_BOTH
, \

602 
NULL
, 0x3) \

603 
	`X
("", \

604 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

605 0, 0, 0x0, 
HOTPLUG_BOTH
, \

607 
NULL
, 0) \

608 

	)

627 
	#EZP_COM_MAP_EPIVALLEY
(
X
) \

628 
	`X
("SEC-8089", \

629 0x0700, 
EPIVALLEY
, 0x0, 0x0, 0x0, -1, \

630 0, 4, 0x0, 
HOTPLUG_BOTH
, \

632 
NULL
, 1) \

633 
	`X
("", \

634 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

635 0, 0, 0x0, 
HOTPLUG_BOTH
, \

637 
NULL
, 0) \

638 

	)

640 
	#EZP_COM_MAP_QISDA
(
X
) \

641 
	`X
("H21", \

642 0xf000, 
QISDA
, 0x4512, 0x0, 0x0, 0x0, \

643 0, 5, 0x0, 
HOTPLUG_BOTH
, \

645 
NULL
, 1) \

646 
	`X
("", \

647 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

648 0, 0, 0x0, 
HOTPLUG_BOTH
, \

650 
NULL
, 0) \

651 

	)

658 
	#EZP_COM_MAP_DLINK
(
X
) \

659 
	`X
("DWM-156", \

660 0xa800, 
DLINK
, 0x3e02, 0x0, 0x0, 0x0, \

661 0, 7, 0x0, 
HOTPLUG_BOTH
, \

663 
NULL
, 1) \

664 
	`X
("DWM-156 (FW 1.0.3)", \

665 0xa800, 
DLINK
, 0x3e02, 0x0, 0x0, 0x0, \

666 0, 4, 0x0, 
HOTPLUG_BOTH
, \

668 
NULL
, 1) \

669 
	`X
("DWM-156 (FW 3.00)", \

670 0xa804, 
DLINK
, 0x7e11, 0x0, 0x0, 0x0, \

671 0, 4, 0x0, 
HOTPLUG_BOTH
, \

673 
NULL
, 1) \

674 
	`X
("DWM-156 (Alternative)", \

675 0x3e02, 
DLINK
, 0x3e02, 0x0, 0x0, 0x0, \

676 0, 0, 0x0, 
HOTPLUG_BOTH
, \

678 
NULL
, 1) \

679 
	`X
("", \

680 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

681 0, 0, 0x0, 
HOTPLUG_BOTH
, \

683 
NULL
, 0) \

684 

	)

686 
	#EZP_COM_MAP_DLINK2
(
X
) \

687 
	`X
("DWM-652", \

688 0x3e04, 
DLINK
, 0x3e04, 0x0, 0x0, 0x0, \

689 0, 0, 0x0, 
HOTPLUG_BOTH
, \

691 
NULL
, 1) \

692 
	`X
("", \

693 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

694 0, 0, 0x0, 
HOTPLUG_BOTH
, \

696 
NULL
, 0) \

697 

	)

698 
	#EZP_COM_MAP_DLINK3
(
X
) \

699 
	`X
("DWM-157", \

700 0xa809, 
DLINK3
, 0x7901, 0x0, 0x1, 0x81, \

701 0, 4, 0x0, 
HOTPLUG_BOTH
, \

703 
NULL
, 1) \

704 
	`X
("DWM-157(B1_1)", \

705 0xa706, 
DLINK3
, 0x7d01, 0x0, 0x1, 0x81, \

706 0, 0, 0x0, 
HOTPLUG_BOTH
, \

709 
	`X
("DWM-157(B1_2)", \

710 0xa707, 
DLINK3
, 0x7d02, 0x0, 0x1, 0x81, \

711 0, 0, 0x0, 
HOTPLUG_BOTH
, \

714 
	`X
("DWM-157(B1_3)", \

715 0xa708, 
DLINK3
, 0x7d03, 0x0, 0x1, 0x81, \

716 0, 0, 0x0, 
HOTPLUG_BOTH
, \

719 
	`X
("DWR-510", \

720 0xa805, 
DLINK
, 0x7e12, 0x0, 0x0, 0x0, \

721 0, 4, 0x0, 
HOTPLUG_BOTH
, \

723 
NULL
, 1) \

724 
	`X
("", \

725 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

726 0, 0, 0x0, 
HOTPLUG_BOTH
, \

728 
NULL
, 0) \

729 

	)

730 
	#EZP_COM_MAP_DUPONT
(
X
) \

731 
	`X
("BC2703", \

732 0xFFFF, 
DUPONT
, 0x4000, 0x0, 0x0, 0x0, \

733 0, 0, 0x0, 
HOTPLUG_BOTH
, \

735 
NULL
, 1) \

736 
	`X
("G450", \

737 0x1022, 
BANDLUXE
, 0x1011, 0x0, 0x0, -1, \

738 0, 4, 0x0, 
HOTPLUG_BOTH
, \

740 
NULL
, 1) \

741 
	`X
("", \

742 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

743 0, 0, 0x0, 
HOTPLUG_BOTH
, \

745 
NULL
, 0) \

746 

	)

747 
	#EZP_COM_MAP_NOVATEL_MERLIN
(
X
) \

748 
	`X
("4620L", \

749 0xFFFF, 
NOVATEL_MERLIN
, 0xb005, 0x0, 0x01, -1, \

750 0, 0, 0x5, 
HOTPLUG_BOTH
, \

752 
NULL
, 1) \

753 
	`X
("MC990D", \

754 0x5020, 
EMPTY
, 0x0, 0x0, 0x01, -1, \

755 0, 0, 0x5, 
HOTPLUG_BOTH
, \

758 
	`X
("Ovation 930D/MC950D", \

759 0x5010, 
NOVATEL_MERLIN
, 0x4400, 0x0, 0x09, -1, \

760 0, 0, 0x0, 
HOTPLUG_BOTH
, \

763 
	`X
("Wireless U679", \

764 0x5059, 
NOVATEL_MERLIN
, 0x7031, 0x0, 0x1, 0x81, \

765 0, 0, 0x0, 
HOTPLUG_BOTH
, \

768 
	`X
("Wireless U998", \

769 0x5010, 
NOVATEL_MERLIN
, 0x7030, 0x0, 0x1, 0x81, \

770 0, 0, 0x0, 
HOTPLUG_BOTH
, \

773 
	`X
("U727ÅtyUSB Modem", \

774 0x5010, 
NOVATEL_MERLIN
, 0x4100, 0x0, 0x08, -1, \

775 0, 0, 0x0, 
HOTPLUG_BOTH
, \

778 
	`X
("USB551L", \

779 0xb001, 
NOVATEL_MERLIN
, 0xb001, 0x0, 0x0, -1, \

780 0, 0, 0x0, 
HOTPLUG_BOTH
, \

782 
NULL
, 4) \

783 
	`X
("Wireless MC760", \

784 0x5031, 
NOVATEL_MERLIN
, 0x6002, 0x0, 0x08, -1, \

785 0, 0, 0x0, 
HOTPLUG_BOTH
, \

788 
	`X
("Wireless U679", \

789 0x5059, 
NOVATEL_MERLIN
, 0x7031, 0x0, 0x1, 0x81, \

790 0, 0, 0x0, 
HOTPLUG_BOTH
, \

793 
	`X
("Wireless U760", \

794 0x5030, 
NOVATEL_MERLIN
, 0x6000, 0x0, 0x08, -1, \

795 0, 0, 0x0, 
HOTPLUG_BOTH
, \

798 
	`X
("Wireless U998", \

799 0x5010, 
NOVATEL_MERLIN
, 0x7030, 0x0, 0x1, 0x81, \

800 0, 0, 0x0, 
HOTPLUG_BOTH
, \

803 
	`X
("", \

804 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

805 0, 0, 0x0, 
HOTPLUG_BOTH
, \

807 
NULL
, 0) \

808 

	)

810 
	#EZP_COM_MAP_ALCATEL
(
X
) \

811 
	`X
("D200", \

812 0xf000, 
ALCATEL
, 0x9605, 0x0, 0x01, 0x81, \

813 0, 0, 0x0, 
HOTPLUG_BOTH
, \

816 
	`X
("OT-X020/DBM-100HU (Nuton 3.5G)", \

817 0x1001, 
ALCATEL
, 0x6061, 0x0, 0x05, -1, \

818 0, 0, 0x0, 
HOTPLUG_BOTH
, \

821 
	`X
("", \

822 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

823 0, 0, 0x0, 
HOTPLUG_BOTH
, \

825 
NULL
, 0) \

826 

	)

827 
	#EZP_COM_MAP_ALCATEL2
(
X
) \

828 
	`X
(" X220L/X215S", \

829 0xf000, 
ALCATEL2
, 0x0017, 0x0, 0x01, 0x81, \

830 0, 0, 0x0, 
HOTPLUG_BOTH
, \

833 
	`X
("", \

834 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

835 0, 0, 0x0, 
HOTPLUG_BOTH
, \

837 
NULL
, 0) \

838 

	)

839 
	#EZP_COM_MAP_WINBEST
(
X
) \

840 
	`X
("HSDC-02", \

841 0x6061, 
WINBEST
, 0x6061, 0x0, 0x05, -1, \

842 0, 0, 0x0, 
HOTPLUG_BOTH
, \

845 
	`X
("", \

846 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

847 0, 0, 0x0, 
HOTPLUG_BOTH
, \

849 
NULL
, 0) \

850 

	)

851 
	#EZP_COM_MAP_SONYERICSSON
(
X
) \

852 
	`X
("MD300", \

853 0xd0cf, 
SONYERICSSON
, 0x0, 0x02, 0x0, -1, \

854 0, 3, 0x0, 
HOTPLUG_BOTH
, \

856 
NULL
, 1) \

857 
	`X
("MD400", \

858 0xd0e1, 
SONYERICSSON
, 0x0, 0x02, 0x0, -1, \

859 0, 3, 0x0, 
HOTPLUG_BOTH
, \

861 
NULL
, 1) \

862 
	`X
("", \

863 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

864 0, 0, 0x0, 
HOTPLUG_BOTH
, \

866 
NULL
, 0) \

867 

	)

868 
	#EZP_COM_MAP_AMOI
(
X
) \

869 
	`X
("H01", \

870 0xFFFF, 
AMOI
, 0x0800, 0x0, 0x0, -1, \

871 0, 0, 0x0, 
HOTPLUG_BOTH
, \

873 
NULL
, 1) \

874 
	`X
("U2000", \

875 0xFFFF, 
AMOI
, 0x0800, 0x0, 0x0, -1, \

876 0, 0, 0x0, 
HOTPLUG_BOTH
, \

878 
NULL
, 1) \

879 
	`X
("", \

880 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

881 0, 0, 0x0, 
HOTPLUG_BOTH
, \

883 
NULL
, 0) \

884 

	)

885 
	#EZP_COM_MAP_ALINK
(
X
) \

886 
	`X
("3GU", \

887 0xf000, 
ALINK
, 0x9200, 0x0, 0x01, -1, \

888 0, 0, 0x0, 
HOTPLUG_BOTH
, \

891 
	`X
("", \

892 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

893 0, 0, 0x0, 
HOTPLUG_BOTH
, \

895 
NULL
, 0) \

896 

	)

898 
	#EZP_COM_MAP_HUMMER
(
X
) \

899 
	`X
("DTM5731", \

900 0x5700, 
HUMMER
, 0x5731, 0x0, 0x07, -1, \

901 0, 0, 0x0, 
HOTPLUG_BOTH
, \

904 
	`X
("", \

905 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

906 0, 0, 0x0, 
HOTPLUG_BOTH
, \

908 
NULL
, 0) \

909 

	)

911 
	#EZP_COM_MAP_ASUS
(
X
) \

912 
	`X
("T500", \

913 0xFFFF, 
ASUS
, 0x0302, 0x0, 0x01, -1, \

914 0, 0, 0x0, 
HOTPLUG_BOTH
, \

916 
NULL
, 1) \

917 
	`X
("", \

918 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

919 0, 0, 0x0, 
HOTPLUG_BOTH
, \

921 
NULL
, 0) \

922 

	)

923 
	#EZP_COM_MAP_SOLOMON
(
X
) \

924 
	`X
("S3Gm-660", \

925 0x1000, 
SOLOMON
, 0x1002, 0x0, 0x05, 0x82, \

926 0, 0, 0x0, 
HOTPLUG_BOTH
, \

929 
	`X
("", \

930 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

931 0, 0, 0x0, 
HOTPLUG_BOTH
, \

933 
NULL
, 0) \

934 

	)

936 
	#EZP_COM_MAP_CMOTECH
(
X
) \

937 
	`X
("CGU-628", \

938 0xf000, 
CMOTECH
, 0x6006, 0x0, 0x09, -1, \

939 0, 0, 0x0, 
HOTPLUG_BOTH
, \

942 
	`X
("D-50/CDU-680", \

943 0x6803, 
CMOTECH
, 0x6803, 0x0, 0x07, -1, \

944 0, 0, 0x0, 
HOTPLUG_BOTH
, \

947 
	`X
("", \

948 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

949 0, 0, 0x0, 
HOTPLUG_BOTH
, \

951 
NULL
, 0) \

952 

	)

953 
	#EZP_COM_MAP_CINTERION
(
X
) \

954 
	`X
("PH8", \

955 0xFFFF, 
CINTERION
, 0x0053, 0x0, 0x0, -1, \

956 0, 0, 0x0, 
HOTPLUG_BOTH
, \

958 
NULL
, 1) \

959 
	`X
("", \

960 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

961 0, 0, 0x0, 
HOTPLUG_BOTH
, \

963 
NULL
, 0) \

964 

	)

966 
	#EZP_COM_MAP_MAXON
(
X
) \

967 
	`X
("BP3", \

968 0xFFFF, 
MAXON
, 0x6280, 0x0, 0x0, -1, \

969 0, 0, 0x0, 
HOTPLUG_BOTH
, \

971 
NULL
, 1) \

972 
	`X
("", \

973 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

974 0, 0, 0x0, 
HOTPLUG_BOTH
, \

976 
NULL
, 0) \

977 

	)

979 
	#EZP_COM_MAP_NOKIA
(
X
) \

980 
	`X
("Internet Stick CS-11", \

981 0x061d, 
NOKIA
, 0x061e, 0x0, 0x0, -1, \

982 0, 4, 0x0, 
HOTPLUG_BOTH
, \

984 
NULL
, 0x1) \

985 
	`X
("Internet Stick CS-12", \

986 0x0618, 
NOKIA
, 0x0619, 0x0, 0x0, -1, \

987 0, 4, 0x0, 
HOTPLUG_BOTH
, \

989 
NULL
, 0x1) \

990 
	`X
("Internet Stick CS-15", \

991 0x0610, 
NOKIA
, 0x0612, 0x0, 0x0, -1, \

992 0, 4, 0x0, 
HOTPLUG_BOTH
, \

994 
NULL
, 0x1) \

995 
	`X
("5800 XpressMusic", \

996 0x0154, 
NOKIA
, 0x0, 0x0, 0x0, -1, \

997 0, 4, 0x0, 
HOTPLUG_BOTH
, \

999 
NULL
, 1) \

1000 
	`X
("", \

1001 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1002 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1004 
NULL
, 0) \

1005 

	)

1006 
	#EZP_COM_MAP_QMI
(
X
) \

1007 
	`X
("AirCard 340U", \

1008 0x0fff, 
SIERRA
, 0x9051, 0x0, 0x0, -1, \

1009 0, 5, 0x0, 
HOTPLUG_BOTH
, \

1011 
NULL
, 5) \

1012 
	`X
("AirCard 341U", \

1013 0x0fff, 
SIERRA
, 0x9057, 0x0, 0x0, -1, \

1014 0, 5, 0x0, 
HOTPLUG_BOTH
, \

1016 
NULL
, 5) \

1017 
	`X
("AirCard 341U NAT HIDDEN", \

1018 0x0fff, 
SIERRA
, 0x9055, 0x0, 0x0, -1, \

1019 0, 5, 0x0, 
HOTPLUG_BOTH
, \

1021 
NULL
, 5) \

1022 

	)

1026 
	#EZP_COM_MAP_SIERRA
(
X
) \

1027 
	`X
("AirCard 312U", \

1028 0x0fff, 
SIERRA
, 0x68a3, 0x0, 0x0, -1, \

1029 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1031 
NULL
, 1) \

1032 
	`X
("AirCard 313U", \

1033 0x0fff, 
AUDIOVOX
, 0x68aa, 0x0, 0x0, -1, \

1034 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1036 
NULL
, 1) \

1037 
	`X
("AirCard 330U", \

1038 0x0fff, 
SIERRA
, 0x68a3, 0x0, 0x0, -1, \

1039 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1041 
NULL
, 1) \

1042 
	`X
("AirCard 595", \

1043 0x0fff, 
SIERRA
, 0x0019, 0x0, 0x0, -1, \

1044 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1046 
NULL
, 1) \

1047 
	`X
("AirCard 595U", \

1048 0x0fff, 
SIERRA
, 0x0120, 0x0, 0x0, -1, \

1049 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1051 
NULL
, 1) \

1052 
	`X
("AirCard 597", \

1053 0x0025, 
SIERRA
, 0x0023, 0x0, 0x0, -1, \

1054 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1056 
NULL
, 1) \

1057 
	`X
("AirCard 598U", \

1058 0x0025, 
SIERRA
, 0x0025, 0x0, 0x0, -1, \

1059 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1061 
NULL
, 1) \

1062 
	`X
("AirCard 875", \

1063 0x0fff, 
SIERRA
, 0x6820, 0x0, 0x0, -1, \

1064 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1066 
NULL
, 1) \

1067 
	`X
("AirCard 875U", \

1068 0x0fff, 
SIERRA
, 0x6821, 0x0, 0x0, -1, \

1069 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1071 
NULL
, 1) \

1072 
	`X
("AirCard 880", \

1073 0x0fff, 
SIERRA
, 0x6850, 0x0, 0x0, -1, \

1074 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1076 
NULL
, 1) \

1077 
	`X
("AirCard 880E", \

1078 0x0fff, 
SIERRA
, 0x6852, 0x0, 0x0, -1, \

1079 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1081 
NULL
, 1) \

1082 
	`X
("AirCard 880U", \

1083 0x0fff, 
SIERRA
, 0x6855, 0x0, 0x0, -1, \

1084 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1086 
NULL
, 1) \

1087 
	`X
("AirCard 881", \

1088 0x0fff, 
SIERRA
, 0x6851, 0x0, 0x0, -1, \

1089 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1091 
NULL
, 1) \

1092 
	`X
("AirCard 881E", \

1093 0x0fff, 
SIERRA
, 0x6853, 0x0, 0x0, -1, \

1094 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1096 
NULL
, 1) \

1097 
	`X
("AirCard 881U", \

1098 0x0fff, 
SIERRA
, 0x6856, 0x0, 0x0, -1, \

1099 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1101 
NULL
, 1) \

1102 
	`X
("Bell 330U", \

1103 0x0fff, 
SIERRA
, 0x68aa, 0x0, 0x0, -1, \

1104 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1106 
NULL
, 1) \

1107 
	`X
("Compass 885", \

1108 0x0fff, 
SIERRA
, 0x6859, 0x0, 0x0, -1, \

1109 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1111 
NULL
, 1) \

1112 
	`X
("Compass 885 (Alternative)", \

1113 0x0fff, 
SIERRA
, 0x6880, 0x0, 0x0, -1, \

1114 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1116 
NULL
, 1) \

1117 
	`X
("Compass 888", \

1118 0x0fff, 
SIERRA
, 0x685a, 0x0, 0x0, -1, \

1119 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1121 
NULL
, 1) \

1122 
	`X
("Compass 889", \

1123 0x0fff, 
SIERRA
, 0x6890, 0x0, 0x0, -1, \

1124 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1126 
NULL
, 1) \

1127 
	`X
("USB 305", \

1128 0xFFFF, 
SIERRA
, 0x68a3, 0x0, 0x0, -1, \

1129 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1131 
NULL
, 1) \

1132 
	`X
("USB 306 (HSPA+)", \

1133 0xFFFF, 
SIERRA
, 0x68a3, 0x0, 0x0, -1, \

1134 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1136 
NULL
, 0x2) \

1137 
	`X
("USB 308", \

1138 0x68a3, 
AUDIOVOX
, 0x68a3, 0x0, 0x0, -1, \

1139 0, 2, 0x0, 
HOTPLUG_BOTH
, \

1141 
NULL
, 0x2) \

1142 
	`X
("", \

1143 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1144 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1146 
NULL
, 0) \

1147 

	)

1148 
	#EZP_COM_MAP_TOSHIBA
(
X
) \

1149 
	`X
("G450", \

1150 0x0d46, 
TOSHIBA
, 0x0d45, 0x0, 0x05, -1, \

1151 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1154 
	`X
("", \

1155 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1156 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1158 
NULL
, 0) \

1159 

	)

1161 
	#EZP_COM_MAP_UTSTARCOM
(
X
) \

1162 
	`X
("UM175", \

1163 0x3b03, 
UTSTARCOM
, 0x3715, 0x0, 0x05, -1, \

1164 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1167 
	`X
("UML290", \

1168 0x3718, 
UTSTARCOM
, 0x3718, 0x0, 0x0, -1, \

1169 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1171 
NULL
, 1) \

1172 
	`X
("", \

1173 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1174 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1176 
NULL
, 0) \

1177 

	)

1178 
	#EZP_COM_MAP_UTSTARCOM2
(
X
) \

1179 
	`X
("UML295", \

1180 0x6064, 
UTSTARCOM2
, 0x6064, 0x0, 0x0, -1, \

1181 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1183 
NULL
, 4) \

1184 
	`X
("", \

1185 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1186 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1188 
NULL
, 0) \

1189 

	)

1190 
	#EZP_COM_MAP_ISONIC
(
X
) \

1191 
	`X
("EDGE CARD", \

1192 0x2000, 
ISONIC
, 0x0051, 0x0, 0x08, -1, \

1193 0, 0x80, 0x0, 
HOTPLUG_BOTH
, \

1196 
	`X
("", \

1197 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1198 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1200 
NULL
, 0) \

1201 

	)

1202 
	#EZP_COM_MAP_3GO
(
X
) \

1203 
	`X
("3GO11", \

1204 0xf000, 3
GO
, 0x1a20, 0x0, 0x1, 0x81, \

1205 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1208 
	`X
("", \

1209 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1210 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1212 
NULL
, 0) \

1213 

	)

1214 
	#EZP_COM_MAP_SAMSUNG2
(
X
) \

1215 
	`X
("i9000", \

1216 0x6877, 
SAMSUNG2
, 0x0, 0x0, 0x0, -1, \

1217 0, 4, 0x0, 
HOTPLUG_BOTH
, \

1219 
NULL
, 1) \

1220 
	`X
("GT-S8500", \

1221 0x6818, 
SAMSUNG2
, 0x6810, 0x0, 0x0, -1, \

1222 0, 4, 0x0, 
HOTPLUG_BOTH
 , \

1224 
NULL
, 1) \

1225 
	`X
("", \

1226 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1227 0, 0, 0x0, 
HOTPLUG_BOTH
 , \

1229 
NULL
, 0) \

1230 

	)

1231 
	#EZP_COM_MAP_LG
(
X
) \

1232 
	`X
("LDU-1900D EV-DO", \

1233 0x1000, 
EMPTY
, 0x0, 0x0, 0x08, -1, \

1234 0, 0, 0x0, 
HOTPLUG_BOTH
 , \

1237 
	`X
("", \

1238 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1239 0, 0, 0x0, 
HOTPLUG_BOTH
 , \

1241 
NULL
, 0) \

1242 

	)

1258 
	#EZP_COM_MAP_QUANTA
(
X
) \

1259 
	`X
("Q101", \

1260 0x1000, 
QUANTA
, 0xea02, 0x0, 0x0, -1, \

1261 0, 6, 0x0, 
HOTPLUG_BOTH
, \

1263 
NULL
, 1) \

1264 
	`X
("Q101 (Alternative)", \

1265 0x1000, 
QUANTA
, 0xea02, 0x0, 0x05, -1, \

1266 0, 4, 0x0, 
HOTPLUG_BOTH
, \

1268 
NULL
, 1) \

1269 
	`X
("Q110", \

1270 0xf000, 
QUANTA
, 0xea03, 0x0, 0x0, -1, \

1271 0, 7, 0x0, 
HOTPLUG_BOTH
, \

1273 
NULL
, 1) \

1274 
	`X
("Q110 (Alternative)", \

1275 0xf001, 
QUANTA
, 0xea04, 0x0, 0x0, -1, \

1276 0, 4, 0x0, 
HOTPLUG_BOTH
, \

1278 
NULL
, 1) \

1279 
	`X
("Q111", \

1280 0xf000, 
QUANTA
, 0xea03, 0x0, 0x0, -1, \

1281 0, 7, 0x0, 
HOTPLUG_BOTH
, \

1283 
NULL
, 1) \

1284 
	`X
("Q120", \

1285 0xf003, 
QUANTA
, 0xea09, 0x0, 0x0, -1, \

1286 0, 4, 0x0, 
HOTPLUG_BOTH
, \

1288 
NULL
, 1) \

1289 
	`X
("Taiwan Mobile T1/MDO 588", \

1290 0xb003, 
QUANTA
, 0xb003, 0x0, 0x0, -1, \

1291 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1293 
NULL
, 1) \

1294 
	`X
("", \

1295 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1296 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1298 
NULL
, 0) \

1299 

	)

1301 
	#EZP_COM_MAP_AUDIOVOX
(
X
) \

1302 
	`X
("", \

1303 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1304 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1306 
NULL
, 0) \

1307 

	)

1309 
	#EZP_COM_MAP_ANYDATA
(
X
) \

1310 
	`X
("", \

1311 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1312 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1314 
NULL
, 0) \

1315 

	)

1316 
	#EZP_COM_MAP_BENQ
(
X
) \

1317 
	`X
("U31", \

1318 0x2000, 
BENQ
, 0x0039, 0x0, 0x1, 0x81, \

1319 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1322 
	`X
("", \

1323 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1324 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1326 
NULL
, 0) \

1327 

	)

1329 
	#EZP_COM_MAP_SAMSUNG
(
X
) \

1330 
	`X
("", \

1331 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1332 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1334 
NULL
, 0) \

1335 

	)

1337 
	#EZP_COM_MAP_LONGLUNG
(
X
) \

1338 
	`X
("C5300", \

1339 0x9e00, 
LONGLUNG
, 0x9e00, 0x0, 0x02, 0x81, \

1340 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1343 
	`X
("", \

1344 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1345 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1347 
NULL
, 0) \

1348 

	)

1350 
	#EZP_COM_MAP_TPLINK
(
X
) \

1351 
	`X
("MA180", \

1352 0x0200, 
TPLINK
, 0x0201, 0x0, 0x01, 0x81, \

1353 0, 4, 0x0, 
HOTPLUG_BOTH
, \

1355 
NULL
, 1) \

1356 
	`X
("", \

1357 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1358 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1360 
NULL
, 0) \

1361 

	)

1362 
	#EZP_COM_MAP_S¥ódåum
(
X
) \

1363 
	`X
("SC7702", \

1364 0x0002, 
S¥ódåum
, 0x0002, 0x0, 0x01, 0x81, \

1365 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1367 
NULL
, 1) \

1368 
	`X
("", \

1369 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1370 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1372 
NULL
, 0) \

1373 

	)

1375 
	#EZP_COM_MAP_UBLOX
(
X
) \

1376 
	`X
("C200", \

1377 0x9004, 
UBLOX
, 0x9004, 0x0, 0x01, 0x81, \

1378 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1380 
NULL
, 1) \

1381 
	`X
("", \

1382 0x0, 
EMPTY
, 0x0, 0x0, 0x0, -1, \

1383 0, 0, 0x0, 
HOTPLUG_BOTH
, \

1385 
NULL
, 0) \

1386 

	)

1389 
	#EZP_COM_VENDOR_NAME_CONVERTER
(
VNAME
,
NAME
,
VID
,
SHOWN
Ë
EZP_COM_VID_
##VNAME,

	)

1391 
EZP_COM_VENDOR_MAP
(
EZP_COM_VENDOR_NAME_CONVERTER
)

1392 } 
	tezp_com_víd‹_«me_ty≥
;

1394 
	sezp_com_víd‹_m≠_íåy_ty≥


1396 
ezp_com_víd‹_«me_ty≥
 
	mvn
;

1397 *
	mdesc
;

1398 
	mDeÁu…Víd‹
;

1399 
	mshown
;

1402 
	sezp_com_m≠_íåy_ty≥


1404 *
	mdesc
;

1405 
	mDeÁu…Produ˘
;

1406 
ezp_com_víd‹_«me_ty≥
 
	mT¨gëVíd‹Ty≥
;

1407 
	mT¨gëProdu˘
;

1408 
	mT¨gëCœss
;

1409 
	mMesßgeEndpoöt
;

1410 
	mRe•⁄£Endpoöt
;

1411 
	mDëachSt‹ageO∆y
;

1415 
	mMode
;

1416 
	mI¡îÁ˚
;

1418 
	mHŸ∂ug
;

1419 
	mDevi˚Num
;

1420 
	mD©aTTY
;

1421 
	mCålTTY
;

1422 *
	mDevName
;

1423 *
	mMesßgeC⁄ã¡
;

1425 
	mFœg
;

1428 
	#EZP_COM_VENDOR_MAP_CONVERTER
(
VNAME
,
NAME
,
VID
,
SHOWN
) \

1429 {
EZP_COM_VID_
##
VNAME
, 
NAME
, 
VID
, 
SHOWN
},

	)

1431 
ezp_com_víd‹_m≠_íåy_ty≥
 
	gezp_com_víd‹_m≠
[] = {

1432 
EZP_COM_VENDOR_MAP
(
EZP_COM_VENDOR_MAP_CONVERTER
)

1435 
	#EZP_COM_MAP_CONVERTER
(
NAME
,
PID
,
TVNAME
,
TPID
,
TCLS
,
EP
,
REP
,
DT
,
MODE
,
INTF
,
HOTPLUG
,
DNUM
,
DTTY
,
CTTY
,
DEVNMAE
,
MSG
,
FLAG
) \

1436 {
NAME
, 
PID
, 
EZP_COM_VID_
##
TVNAME
, 
TPID
, 
TCLS
, 
EP
, 
REP
, 
DT
, 
MODE
, 
INTF
, 
HOTPLUG
, 
DNUM
, 
DTTY
, 
CTTY
, 
DEVNMAE
, 
MSG
, 
FLAG
},

	)

1439 
	#EZP_COM_MAP_FOR_EACH_VENDOR_CONVERTER
(
VNAME
,
NAME
,
VID
,
SHOWN
) \

1440 
ezp_com_m≠_íåy_ty≥
 
ezp_com_m≠_
##
VNAME
[] = { \

1441 
EZP_COM_MAP_
##
	`VNAME
(
EZP_COM_MAP_CONVERTER
) \

1442 };

	)

1445 
	$EZP_COM_VENDOR_MAP
(
EZP_COM_MAP_FOR_EACH_VENDOR_CONVERTER
)

1448 
	#EZP_COM_POINTER_MAP_CONVERTER
(
VNAME
,
NAME
,
VID
,
SHOWN
Ë&
ezp_com_m≠_
##VNAME[0],

	)

1451 
ezp_com_m≠_íåy_ty≥
 *
ezp_com_poöãr_m≠
[] = {

1452 
	`EZP_COM_VENDOR_MAP
(
EZP_COM_POINTER_MAP_CONVERTER
)

1453 
	}
};

1457 
	#EZP_COM_LOCATION_MAP
(
X
) \

1458 
	`X
(
USA
, "USA", 1) \

1459 
	`X
(
CANADA
, "Canada", 1) \

1460 
	`X
(
AUSTRALIA
, "Australia", 1) \

1461 
	`X
(
CHINA
, "China", 1) \

1462 
	`X
(
HONGKONG
, "Hongkong", 1) \

1463 
	`X
(
INDIA
, "India", 1) \

1464 
	`X
(
MEXICO
, "Mexico", 1) \

1465 
	`X
(
NETHERLANDS
, "Netherland", 1) \

1466 
	`X
(
NORWAY
, "Norway", 1) \

1467 
	`X
(
PHILIPPINES
, "Philippines", 1) \

1468 
	`X
(
RUSSIA
, "Russia", 1) \

1469 
	`X
(
SOUTH_AFRICA
, "South Africa", 1) \

1470 
	`X
(
TAIWAN
, "Taiwan", 1) \

1471 
	`X
(
EMPTY
, "", 0)

	)

1516 
	#EZP_COM_ISP_MAP_EMPTY
(
X
) \

1517 
	`X
("", "", "", "", "", "", "", 0)

	)

1519 
	#EZP_COM_ISP_MAP_TAIWAN
(
X
) \

1520 
	`X
("Chunghwa Telecom", "internet", "", "chap", "", "", "*99#", 1 ) \

1521 
	`X
("Far EasTone (fetims)", "fetims", "", "chap", "", "", "*99#", 1 ) \

1522 
	`X
("Far EasTone (internet)", "internet", "", "chap", "", "", "*99#", 1 ) \

1523 
	`X
("Taiwan Cellular", "internet", "", "chap", "", "", "*99#", 1 ) \

1524 
	`X
("Vibo", "internet", "", "chap", "", "", "*99#", 1 ) \

1525 
	`X
("", "", "", "", "", "", "", 0) \

1526 

	)

1528 
	#EZP_COM_ISP_MAP_CHINA
(
X
) \

1529 
	`X
("China Mobile", "cmnet", "", "chap", "", "", "*99#", 1 ) \

1530 
	`X
("China Telecom", "", "", "chap", "", "", "#777", 1 ) \

1531 
	`X
("China Unicom", "", "", "chap", "", "", "*99#", 1 ) \

1532 
	`X
("China E Surfing", "ctnet", "", "chap", "ctnet@mycdma.cn", "vnet.mobi", "#777", 1 ) \

1533 
	`X
("", "", "", "", "", "", "", 0) \

1534 

	)

1536 
	#EZP_COM_ISP_MAP_HONGKONG
(
X
) \

1537 
	`X
("3 HK", "ipc.three.com.hk", "", "chap", "", "", "*99#", 1 ) \

1538 
	`X
("CSL", "internet", "", "chap", "", "", "*99#", 1 ) \

1539 
	`X
("New World", "ineternet", "", "chap", "", "", "*99#", 1 ) \

1540 
	`X
("People", "internet", "", "chap", "", "", "*99#", 1 ) \

1541 
	`X
("PCCW", "pccw", "", "chap", "", "", "*99#", 1 ) \

1542 
	`X
("SmarTone", "internet", "", "chap", "", "", "*99#", 1 ) \

1543 
	`X
("Sunday", "internet", "", "chap", "", "", "*99#", 1 ) \

1544 
	`X
("", "", "", "", "", "", "", 0) \

1545 

	)

1546 
	#EZP_COM_ISP_MAP_INDIA
(
X
) \

1547 
	`X
("TATA", "TATA", "", "chap", "internet", "internet", "#777", 1 ) \

1548 
	`X
("", "", "", "", "", "", "", 0) \

1549 

	)

1550 
	#EZP_COM_ISP_MAP_MEXICO
(
X
) \

1551 
	`X
("Movistar", "internet.movistar.mx", "", "chap", "movistar", "movistar", "*99#", 1 ) \

1552 
	`X
("Telcel", "internet.itelcel.com", "", "chap", "webgprs", "webgprs20002", "*99#", 1 ) \

1553 
	`X
("", "", "", "", "", "", "", 0) \

1554 

	)

1555 
	#EZP_COM_ISP_MAP_NETHERLANDS
(
X
) \

1556 
	`X
("KPN", "internet", "", "chap", "", "", "*99#", 1 ) \

1557 
	`X
("Telfort", "internet", "", "chap", "", "", "*99#", 1 ) \

1558 
	`X
("T-Mobile", "internet", "", "chap", "", "", "*99#", 1 ) \

1559 
	`X
("Vodafone", "internet", "", "chap", "", "", "*99#", 1 ) \

1560 
	`X
("", "", "", "", "", "", "", 0) \

1561 

	)

1562 
	#EZP_COM_ISP_MAP_NORWAY
(
X
) \

1563 
	`X
("Netcom Mobil", "Netcom", "", "chap", "", "", "*99***1#", 1 ) \

1564 
	`X
("Telenor Mobil", "Telenor", "", "chap", "", "", "*99***1#", 1 ) \

1565 
	`X
("", "", "", "", "", "", "", 0) \

1566 

	)

1568 
	#EZP_COM_ISP_MAP_PHILIPPINES
(
X
) \

1569 
	`X
("Globe", "www.globe.com.ph", "", "chap", "globe", "globe", "*99#", 1 ) \

1570 
	`X
("Smart", "internet", "", "chap", "", "", "*99#", 1 ) \

1571 
	`X
("Sun Cellula", "minternet", "", "chap", "", "", "*99#", 1 ) \

1572 
	`X
("", "", "", "", "", "", "", 0) \

1573 

	)

1574 
	#EZP_COM_ISP_MAP_RUSSIA
(
X
) \

1575 
	`X
("BeeLine", "internet.beeline.ru", "", "chap", "beeline", "beeline", "*99#", 1 ) \

1576 
	`X
("Megafon (NWGSM)", "internet.nw", "", "chap", "", "", "*99#", 1 ) \

1577 
	`X
("MTS", "internet.mts.ru", "", "chap", "mts", "mts", "*99#", 1 ) \

1578 
	`X
("PrimTel", "internet.primtel.ru", "", "chap", "", "", "*99#", 1 ) \

1579 
	`X
("", "", "", "", "", "", "", 0) \

1580 

	)

1581 
	#EZP_COM_ISP_MAP_AUSTRALIA
(
X
) \

1582 
	`X
("iburst", "internet", "", "chap", "", "", "*99#", 1 ) \

1583 
	`X
("Bigpond", "telstra.bigpond", "", "chap", "", "", "*99#", 1 ) \

1584 
	`X
("Dodo", "dodolns1", "", "chap", "", "", "*99#", 1 ) \

1585 
	`X
("Exetel", "exetel1", "", "chap", "", "", "*99#", 1 ) \

1586 
	`X
("Internode", "splns333a1", "", "chap", "", "", "*99#", 1 ) \

1587 
	`X
("Optus", "internet", "", "chap", "", "", "*99#", 1 ) \

1588 
	`X
("Telstra", "telstra.internet", "", "chap", "", "", "*99#", 1 ) \

1589 
	`X
("Three", "3netaccess", "", "chap", "", "", "*99#", 1 ) \

1590 
	`X
("Three Prepaid", "3services", "", "chap", "", "", "*99#", 1 ) \

1591 
	`X
("TPG", "internet", "", "chap", "", "", "*99#", 1 ) \

1592 
	`X
("Virgin", "virginbroadband", "", "pap", "", "", "*99***1#", 1) \

1593 
	`X
("Vodafone", "vfinternet.au", "", "chap", "", "", "*99#", 1 ) \

1594 
	`X
("", "", "", "", "", "", "", 0) \

1595 

	)

1596 
	#EZP_COM_ISP_MAP_SOUTH_AFRICA
(
X
) \

1597 
	`X
("Cell-C", "internet", "", "chap", "Cellcis", "Cellcis", "*99***16#", 1 ) \

1598 
	`X
("MTN", "", "", "chap", "", "", "*99#", 1 ) \

1599 
	`X
("Neotel", "", "", "chap", "", "", "#777", 1 ) \

1600 
	`X
("Vodacom", "internet", "", "chap", "", "", "*99***16#", 1 ) \

1601 
	`X
("", "", "", "", "", "", "", 0) \

1602 

	)

1603 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

1605 
	#EZP_COM_ISP_MAP_CANADA
(
X
) \

1606 
	`X
("Bell Mobility", "inet.bell.ca", "", "chap", "", "", "*99#", 1 ) \

1607 
	`X
("Rogers", "internet.com", "", "chap", "", "", "*99#", 1 ) \

1608 
	`X
("Rogers (VPN)", "vpn.com", "", "chap", "", "", "*99#", 1 ) \

1609 
	`X
("SaskTel", "inet.stm.sk.ca", "", "chap", "", "", "*99#", 1 ) \

1610 
	`X
("Telus", "isp.telus.com", "", "chap", "", "", "*99#", 1 ) \

1611 
	`X
("", "", "", "", "", "", "", 0) \

1612 

	)

1614 
	#EZP_COM_ISP_MAP_CANADA
(
X
) \

1615 
	`X
("WIND", "internet.wind.com", "", "chap", "", "", "*99#", 1 ) \

1616 
	`X
("MOBILICITY", "wap.davewireless.com", "", "chap", "dave", "password", "*99#", 1 ) \

1617 
	`X
("ROGERS", "internet.rogers.ca", "", "chap", "rogers", "rogers", "*99#", 1 ) \

1618 
	`X
("ROGERS2", "internet.com", "", "chap", "wapuser1", "wap", "*99#", 1 ) \

1619 
	`X
("FIDO", "internet.fido.ca", "", "chap", "ifdo", "ifdo", "*99#", 1 ) \

1620 
	`X
("BELL", "pda.bell.ca", "", "chap", "ifdo", "ifdo", "#777", 1 ) \

1621 
	`X
("TELUS", "sp.telus.com", "", "chap", "", "", "*99#", 1 ) \

1622 
	`X
("", "", "", "", "", "", "", 0) \

1623 

	)

1627 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

1629 
	#EZP_COM_ISP_MAP_USA
(
X
) \

1630 
	`X
("AT&T (Broadband)", "Broadband", "", "chap", "", "", "*99#", 1 ) \

1631 
	`X
("AT&T (I2GGOLD)", "I2GOLD", "", "chap", "", "", "*99***1#", 1 ) \

1632 
	`X
("AT&T (Internet)", "Internet", "", "chap", "", "", "*99***1#", 1 ) \

1633 
	`X
("Sprint 3G", "", "", "chap", "", "", "#777", 1 ) \

1634 
	`X
("T-Mobile(new)", "epc.tmobile.com", "", "chap", "", "", "*99***1#", 1 ) \

1635 
	`X
("Verizon 3G", "", "", "chap", "", "", "#777", 1 ) \

1636 
	`X
("Verizon 4G/LTE", "", "", "chap", "", "", "*99***3#", 1 ) \

1637 
	`X
("", "", "", "", "", "", "", 0) \

1638 

	)

1640 
	#EZP_COM_ISP_MAP_USA
(
X
) \

1641 
	`X
("AT&T(proxy)", "proxy", "", "chap", "", "", "*99#", 1 ) \

1642 
	`X
("AT&T(cingular)", "isp.cingular", "", "chap", "", "", "*99***1#", 1 ) \

1643 
	`X
("T-Mobile(new)", "epc.tmobile.com", "", "chap", "", "", "*99***1#", 1 ) \

1644 
	`X
("Verizon", "", "", "chap", "", "", "#777", 1 ) \

1645 
	`X
("Rogers", "internet.com", "", "chap", "wapuser1", "wap","*99***1#", 1) \

1646 
	`X
("Sprint", "", "", "chap", "", "", "#777", 1 ) \

1647 
	`X
("", "", "", "", "", "", "", 0) \

1648 

	)

1651 
	#EZP_COM_LOCATION_NAME_CONVERTER
(
LNAME
,
NAME
,
SHOWN
Ë
EZP_COM_LID_
##LNAME,

	)

1653 
EZP_COM_LOCATION_MAP
(
EZP_COM_LOCATION_NAME_CONVERTER
)

1654 } 
	tezp_com_loˇti⁄_«me_ty≥
;

1656 
	sezp_com_loˇti⁄_m≠_íåy_ty≥


1658 
ezp_com_loˇti⁄_«me_ty≥
 
	m 
;

1659 *
	mdesc
;

1660 
	mshown
;

1663 
	sezp_com_i•_m≠_íåy_ty≥


1665 *
	mdesc
;

1666 *
	m≠n
;

1667 *
	mpö
;

1668 *
	mauth
;

1669 *
	mu£r_«me
;

1670 *
	m∑sswd
;

1671 *
	mdülup_°r
;

1672 
	mshown
;

1675 
	#EZP_COM_LOCATION_MAP_CONVERTER
(
LNAME
,
NAME
,
SHOWN
) \

1676 {
EZP_COM_LID_
##
LNAME
, 
NAME
, 
SHOWN
},

	)

1678 
ezp_com_loˇti⁄_m≠_íåy_ty≥
 
	gezp_com_loˇti⁄_m≠
[] = {

1679 
EZP_COM_LOCATION_MAP
(
EZP_COM_LOCATION_MAP_CONVERTER
)

1682 
	#EZP_COM_ISP_MAP_CONVERTER
(
NAME
,
APN
,
PIN
,
AUTH
,
USER
,
PW
,
DIALUP
,
SHOWN
) \

1683 {
NAME
, 
APN
, 
PIN
, 
AUTH
, 
USER
, 
PW
, 
DIALUP
, 
SHOWN
},

	)

1685 
	#EZP_COM_ISP_MAP_FOR_EACH_LOCATION_CONVERTER
(
LNAME
,
NAME
,
SHOWN
) \

1686 
ezp_com_i•_m≠_íåy_ty≥
 
ezp_com_i•_m≠_
##
LNAME
[] = { \

1687 
EZP_COM_ISP_MAP_
##
	`LNAME
(
EZP_COM_ISP_MAP_CONVERTER
) \

1688 };

	)

1691 
	$EZP_COM_LOCATION_MAP
(
EZP_COM_ISP_MAP_FOR_EACH_LOCATION_CONVERTER
)

1694 
	#EZP_COM_ISP_POINTER_MAP_CONVERTER
(
LNAME
,
NAME
,
SHOWN
Ë&
ezp_com_i•_m≠_
##LNAME[0],

	)

1697 
ezp_com_i•_m≠_íåy_ty≥
 *
ezp_com_i•_m≠
[] = {

1698 
	`EZP_COM_LOCATION_MAP
(
EZP_COM_ISP_POINTER_MAP_CONVERTER
)

1699 
	}
};

	@files.c

8 
	~<°rög.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<sys/°©.h
>

14 
	~<°d¨g.h
>

16 
	~<bcmnvøm.h
>

17 
	~"shutûs.h
"

18 
	~"sh¨ed.h
"

21 
	$f_exi°s
(c⁄° *
∑th
)

23 
°©
 
°
;

24  (
	`°©
(
∑th
, &
°
Ë=0Ë&& (!
	`S_ISDIR
(°.
°_mode
));

25 
	}
}

27 
	$f_size
(c⁄° *
∑th
)

29 
°©
 
°
;

30 i‡(
	`°©
(
∑th
, &
°
Ë=0Ë st.
°_size
;

32 
	}
}

34 
	$f_ªad
(c⁄° *
∑th
, *
buf„r
, 
max
)

36 
f
;

37 
n
;

39 i‡((
f
 = 
	`›í
(
∑th
, 
O_RDONLY
)) < 0)  -1;

40 
n
 = 
	`ªad
(
f
, 
buf„r
, 
max
);

41 
	`˛o£
(
f
);

42  
n
;

43 
	}
}

45 
	$f_wrôe
(c⁄° *
∑th
, c⁄° *
buf„r
, 
Àn
, 
Êags
, 
cmode
)

47 c⁄° 
∆
 = '\n';

48 
f
;

49 
r
 = -1;

50 
mode_t
 
m
;

52 
m
 = 
	`umask
(0);

53 i‡(
cmode
 == 0) cmode = 0666;

54 i‡((
f
 = 
	`›í
(
∑th
, (
Êags
 & 
FW_APPEND
Ë? (
O_WRONLY
|
O_CREAT
|
O_APPEND
Ë: (O_WRONLY|O_CREAT|
O_TRUNC
), 
cmode
)) >= 0) {

55 i‡((
buf„r
 =
NULL
Ë|| ((
r
 = 
	`wrôe
(
f
, buf„r, 
Àn
)) ==Üen)) {

56 i‡(
Êags
 & 
FW_NEWLINE
) {

57 i‡(
	`wrôe
(
f
, &
∆
, 1Ë=1Ë++
r
;

60 
	`˛o£
(
f
);

62 
	`umask
(
m
);

63  
r
;

64 
	}
}

66 
	$f_ªad_°rög
(c⁄° *
∑th
, *
buf„r
, 
max
)

68 i‡(
max
 <= 0)  -1;

69 
n
 = 
	`f_ªad
(
∑th
, 
buf„r
, 
max
 - 1);

70 
buf„r
[(
n
 > 0) ?Ç : 0] = 0;

71  
n
;

72 
	}
}

74 
	$f_wrôe_°rög
(c⁄° *
∑th
, c⁄° *
buf„r
, 
Êags
, 
cmode
)

76  
	`f_wrôe
(
∑th
, 
buf„r
, 
	`°æí
(buf„r), 
Êags
, 
cmode
);

77 
	}
}

79 
	$_f_ªad_Æloc
(c⁄° *
∑th
, **
buf„r
, 
max
, 
z
)

81 
n
;

83 *
buf„r
 = 
NULL
;

84 i‡(
max
 >= 0) {

85 i‡((
n
 = 
	`f_size
(
∑th
)) != ()-1) {

86 i‡(
n
 < 
max
) max =Ç;

87 i‡((!
z
Ë&& (
max
 == 0))  0;

88 i‡((*
buf„r
 = 
	`mÆloc
(
max
 + 
z
)Ë!
NULL
) {

89 i‡((
max
 = 
	`f_ªad
(
∑th
, *
buf„r
, max)) >= 0) {

90 i‡(
z
Ë*(*
buf„r
 + 
max
) = 0;

91  
max
;

93 
	`‰ì
(
buf„r
);

98 
	}
}

100 
	$f_ªad_Æloc
(c⁄° *
∑th
, **
buf„r
, 
max
)

102  
	`_f_ªad_Æloc
(
∑th
, 
buf„r
, 
max
, 0);

103 
	}
}

105 
	$f_ªad_Æloc_°rög
(c⁄° *
∑th
, **
buf„r
, 
max
)

107  
	`_f_ªad_Æloc
(
∑th
, 
buf„r
, 
max
, 1);

108 
	}
}

	@include/bcmnvram.h

15 #i‚de‡
_bcmnvøm_h_


16 
	#_bcmnvøm_h_


	)

18 #i‚de‡
_LANGUAGE_ASSEMBLY


20 
	~<ty≥defs.h
>

22 
	snvøm_hódî
 {

23 
uöt32
 
	mmagic
;

24 
uöt32
 
	mÀn
;

25 
uöt32
 
	m¸c_vî_öô
;

26 
uöt32
 
	mc⁄fig_ª‰esh
;

27 
uöt32
 
	mc⁄fig_ncdl
;

30 
	snvøm_tu∂e
 {

31 *
	m«me
;

32 *
	mvÆue
;

33 
nvøm_tu∂e
 *
	m√xt
;

40 
nvøm_öô
(*
sbh
);

46 
nvøm_exô
();

54 * 
nvøm_gë
(c⁄° *
«me
);

61 
	#nvøm_ß„_gë
(
«me
Ë(
	`nvøm_gë
“ameË? : "")

	)

63 
	#nvøm_ß„_un£t
(
«me
) ({ \

64 if(
	`nvøm_gë
(
«me
)) \

65 
	`nvøm_un£t
(
«me
); \

66 })

	)

68 
	#nvøm_ß„_£t
(
«me
, 
vÆue
) ({ \

69 if(!
	`nvøm_gë
(
«me
Ë|| 
	`°rcmp
“vøm_gë“ame), 
vÆue
)) \

70 
	`nvøm_£t
(
«me
, 
vÆue
); \

71 })

	)

80 
INLINE
 

81 
	$nvøm_m©ch
(*
«me
, *
m©ch
) {

82 c⁄° *
vÆue
 = 
	`nvøm_gë
(
«me
);

83  (
vÆue
 && !
	`°rcmp
(vÆue, 
m©ch
));

84 
	}
}

93 
INLINE
 

94 
	$nvøm_övm©ch
(*
«me
, *
övm©ch
) {

95 c⁄° *
vÆue
 = 
	`nvøm_gë
(
«me
);

96  (
vÆue
 && 
	`°rcmp
(vÆue, 
övm©ch
));

97 
	}
}

108 
nvøm_£t
(c⁄° *
«me
, c⁄° *
vÆue
);

117 
nvøm_un£t
(c⁄° *
«me
);

125 
nvøm_commô
();

133 
nvøm_gëÆl
(*
buf
, 
cou¡
);

137 
	#NVRAM_MAGIC
 0x48534C46

	)

138 
	#NVRAM_VERSION
 1

	)

139 
	#NVRAM_HEADER_SIZE
 20

	)

140 
	#NVRAM_SPACE
 0x8000

	)

141 
	#FLASH_BASE
 0xbfc00000

	)

142 
	#FLASH_MIN
 0x00100000

	)

143 
	#FLASH_MAX
 0x00400000

	)

	@include/bcmutils.h

14 #i‚def 
_bcmutûs_h_


15 
	#_bcmutûs_h_


	)

17 #i‚de‡
MIN


18 
	#MIN
(
a
, 
b
Ë((◊)<(b))?◊):(b))

	)

21 #i‚de‡
MAX


22 
	#MAX
(
a
, 
b
Ë((◊)>(b))?◊):(b))

	)

25 
	#CEIL
(
x
, 
y
Ë(((xË+ ((y)-1)Ë/ (y))

	)

26 
	#ROUNDUP
(
x
, 
y
Ë((((
ul⁄g
)(x)+((y)-1))/(y))*(y))

	)

27 
	#ISALIGNED
(
a
, 
x
Ë(((
uöt
)◊Ë& ((x)-1)Ë=0)

	)

28 
	#ISPOWEROF2
(
x
Ë((((x)-1)&(x))==0)

	)

29 
	#OFFSETOF
(
ty≥
, 
membî
Ë((
uöt
Ë&(—y≥ *)0)->membî)

	)

30 
	#ARRAYSIZE
(
a
Ë(◊)/◊[0]))

	)

33 #i‚de‡
£tbô


34 
	#NBBY
 8

	)

35 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

36 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

37 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

38 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

41 
	#NBITS
(
ty≥
Ë( (ty≥Ë* 8)

	)

43 
	#_BCM_U
 0x01

	)

44 
	#_BCM_L
 0x02

	)

45 
	#_BCM_D
 0x04

	)

46 
	#_BCM_C
 0x08

	)

47 
	#_BCM_P
 0x10

	)

48 
	#_BCM_S
 0x20

	)

49 
	#_BCM_X
 0x40

	)

50 
	#_BCM_SP
 0x80

	)

52 
bcm_˘y≥
[];

53 
	#bcm_ismask
(
x
Ë(
bcm_˘y≥
[()()(x)])

	)

55 
	#bcm_iß um
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
|
_BCM_L
|
_BCM_D
)Ë!0)

	)

56 
	#bcm_ißÕha
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
|
_BCM_L
)Ë!0)

	)

57 
	#bcm_is˙ål
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_C
)Ë!0)

	)

58 
	#bcm_isdigô
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_D
)Ë!0)

	)

59 
	#bcm_isgøph
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
|
_BCM_U
|
_BCM_L
|
_BCM_D
)Ë!0)

	)

60 
	#bcm_i¶owî
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_L
)Ë!0)

	)

61 
	#bcm_i•röt
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
|
_BCM_U
|
_BCM_L
|
_BCM_D
|
_BCM_SP
)Ë!0)

	)

62 
	#bcm_i•un˘
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
)Ë!0)

	)

63 
	#bcm_is•a˚
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_S
)Ë!0)

	)

64 
	#bcm_isuµî
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
)Ë!0)

	)

65 
	#bcm_isxdigô
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_D
|
_BCM_X
)Ë!0)

	)

72 
	#SPINWAIT
(
exp
, 
us
) { \

73 
uöt
 
cou¡down
 = (
us
) + 9; \

74 (
exp
Ë&& (
cou¡down
 >= 10)) {\

75 
	`OSL_DELAY
(10); \

76 
cou¡down
 -= 10; \

78 }

	)

81 
	spktq
 {

82 *
	mhód
;

83 *
	mèû
;

84 
uöt
 
	mÀn
;

85 
uöt
 
	mmaxÀn
;

86 
boﬁ
 
	m¥i‹ôy
;

88 
	#DEFAULT_QLEN
 128

	)

90 
	#pktq_Àn
(
q
Ë((q)->
Àn
)

	)

91 
	#pktq_avaû
(
q
Ë((q)->
maxÀn
 - (q)->
Àn
)

	)

92 
	#pktq_hód
(
q
Ë((q)->
hód
)

	)

93 
	#pktq_fuŒ
(
q
Ë((q)->
Àn
 >(q)->
maxÀn
)

	)

96 
	#CRC8_INIT_VALUE
 0xf‡

	)

97 
	#CRC8_GOOD_VALUE
 0x9‡

	)

98 
	#CRC16_INIT_VALUE
 0xfff‡

	)

99 
	#CRC16_GOOD_VALUE
 0xf0b8

	)

100 
	#CRC32_INIT_VALUE
 0xfffffff‡

	)

101 
	#CRC32_GOOD_VALUE
 0xdebb20e3

	)

104 
	sbcm_év
 {

105 
uöt8
 
	mid
;

106 
uöt8
 
	mÀn
;

107 
uöt8
 
	md©a
[1];

108 } 
	tbcm_év_t
;

111 
	#bcm_vÆid_év
(
ñt
, 
buÊí
Ë((buÊíË>2 && (buÊíË>2 + (ñt)->
Àn
)

	)

114 
	#ETHER_ADDR_STR_LEN
 18

	)

119 #ifde‡
IL_BIGENDIAN


120 
	#lﬂd32_ua
(
a
Ë((((
uöt8
 *)(a))[0] << 24) + (((uint8 *)(a))[1] << 16) + \

121 (((
uöt8
 *)(
a
))[2] << 8Ë+ ((uöt8 *)◊))[3])

	)

123 
	#lﬂd32_ua
(
a
Ë((((
uöt8
 *)(a))[3] << 24) + (((uint8 *)(a))[2] << 16) + \

124 (((
uöt8
 *)(
a
))[1] << 8Ë+ ((uöt8 *)◊))[0])

	)

128 
uöt
 
bcm_©oi
(*
s
);

129 
uch¨
 
bcm_touµî
(uch¨ 
c
);

130 
ul⁄g
 
bcm_°πoul
(*
˝
, **
ídp
, 
uöt
 
ba£
);

131 
dódbìf
(*
p
, 
uöt
 
Àn
);

132 
¥hex
(*
msg
, 
uch¨
 *
buf
, 
uöt
 
Àn
);

133 
¥pkt
(*
msg
, *
drv
, *
p0
);

134 
uöt
 
pktc›y
(*
drv
, *
p
, uöà
off£t
, 
Àn
, 
uch¨
 *
buf
);

135 
uöt
 
pkâŸÀn
(*
drv
, *);

136 
uch¨
 *
bcm_ëhî_¡ﬂ
(*
ó
, *
buf
);

137 
bcm_ëhî_©€
(*
p
, *
ó
);

138 
bcm_mdñay
(
uöt
 
ms
);

139 *
gëv¨
(*
v¨s
, *
«me
);

140 
gëötv¨
(*
v¨s
, *
«me
);

141 *
bcm°r°r
(*
hay°ack
, *
√edÀ
);

143 
uöt8
 
¸c8
(uöt8 *
p
, 
uöt
 
nbyãs
, uöt8 
¸c
);

144 
uöt16
 
¸c16
(
uöt8
 *
p
, 
uöt
 
nbyãs
, uöt16 
¸c
);

145 
uöt32
 
¸c32
(
uöt8
 *
p
, 
uöt
 
nbyãs
, uöt32 
¸c
);

146 
bcm_év_t
 *
bcm_√xt_év
(bcm_év_à*
ñt
, *
buÊí
);

147 
bcm_év_t
 *
bcm_∑r£_évs
(*
buf
, 
buÊí
, 
uöt
 
key
);

148 
bcm_év_t
 *
bcm_∑r£_‹dîed_évs
(*
buf
, 
buÊí
, 
uöt
 
key
);

149 
pktq_öô
(
pktq
 *
q
, 
uöt
 
maxÀn
, 
boﬁ
 
¥i‹ôy
);

150 
boﬁ
 
pkãnq
(
pktq
 *
q
, *
p
, boﬁ 
lifo
);

151 *
pktdeq
(
pktq
 *
q
);

153 
	#bcmlog
(
fmt
, 
a1
, 
a2
)

	)

154 
	#bcmdum∂og
(
buf
, 
size
Ë*bu‡'\0'

	)

155 
	#bcmdum∂ogít
(
buf
, 
idx
Ë-1

	)

	@include/shutils.h

15 #i‚de‡
_shutûs_h_


16 
	#_shutûs_h_


	)

17 
	~<°rög.h
>

19 
	#EZP_LOG
(
‚ame
, 
fmt
, 
¨gs
...Ë({ 
FILE
 *
Â
 = 
	`f›í
(‚ame, "a"); 
	`Ârötf
(Â, fmt, ##árgs); 
	`fÊush
(Â); 
	`f˛o£
(Â); })

	)

25 * 
fd2°r
(
fd
);

32 * 
fûe2°r
(c⁄° *
∑th
);

40 
waôf‹
(
fd
, 
timeout
);

51 
_evÆ
(*c⁄° 
¨gv
[], *
∑th
, 
timeout
, 
pid_t
 *
µid
);

59 * 
_backtick
(*c⁄° 
¨gv
[]);

66 
kûl_pidfûe
(*
pidfûe
);

73 
¥o˚ss_is_ru¬ög
(*
¥ogøm
);

83 
ß„_‰ód
(*
±r
, 
size_t
 
size
, size_à
nmemb
, 
FILE
 *
°ªam
);

93 
ß„_fwrôe
(c⁄° *
±r
, 
size_t
 
size
, size_à
nmemb
, 
FILE
 *
°ªam
);

101 
ëhî_©€
(c⁄° *
a
, *
e
);

109 * 
ëhî_ëﬂ
(c⁄° *
e
, *
a
);

118 
ölöe
 * 
	$°rˇt_r
(c⁄° *
s1
, c⁄° *
s2
, *
buf
)

120 
	`°r˝y
(
buf
, 
s1
);

121 
	`°rˇt
(
buf
, 
s2
);

122  
buf
;

123 
	}
}

126 
	#isbœnk
(
c
Ë((cË=' ' || (cË='\t')

	)

129 
	#chomp
(
s
) ({ \

130 *
c
 = (
s
Ë+ 
	`°æí
((s)) - 1; \

131 (
c
 > (
s
)) && (*c == '\n' || *c == '\r' || *c == ' ')) \

132 *
c
-- = '\0'; \

133 
s
; \

134 })

	)

137 
	#backtick
(
cmd
, 
¨gs
...) ({ \

138 *
¨gv
[] = { 
cmd
, ## 
¨gs
, 
NULL
 }; \

139 
	`_backtick
(
¨gv
); \

140 })

	)

143 
	#evÆ
(
cmd
, 
¨gs
...) ({ \

144 *
¨gv
[] = { 
cmd
, ## 
¨gs
, 
NULL
 }; \

145 
	`_evÆ
(
¨gv
, ">/dev/c⁄sﬁe", 0, 
NULL
); \

146 })

	)

149 
	#f‹óch
(
w‹d
, 
w‹dli°
, 
√xt
) \

150 
√xt
 = &
w‹dli°
[
	`°r•n
(wordlist, " ")], \

151 
	`°∫˝y
(
w‹d
, 
√xt
, (word)), \

152 
w‹d
[
	`°rc•n
(word, " ")] = '\0', \

153 
w‹d
[(word) - 1] = '\0', \

154 
√xt
 = 
	`°rchr
(next, ' '); \

155 
	`°æí
(
w‹d
); \

156 
√xt
 =Çexà? &√xt[
	`°r•n
(next, " ")] : "", \

157 
	`°∫˝y
(
w‹d
, 
√xt
, (word)), \

158 
w‹d
[
	`°rc•n
(word, " ")] = '\0', \

159 
w‹d
[(word) - 1] = '\0', \

160 
√xt
 = 
	`°rchr
“ext, ' '))

	)

163 
	#ß„_gëív
(
s
Ë(
	`gëív
(sË? : "")

	)

166 
	#˝rötf
(
fmt
, 
¨gs
...) do { \

167 
FILE
 *
Â
 = 
	`f›í
("/dev/console", "w"); \

168 i‡(
Â
) { \

169 
	`Ârötf
(
Â
, 
fmt
, ## 
¨gs
); \

170 
	`f˛o£
(
Â
); \

172 } 0)

	)

175 #ifde‡
DEBUG


176 
	#d¥ötf
(
fmt
, 
¨gs
...Ë
	`˝rötf
("%s: " fmt, 
__FUNCTION__
, ##árgs)

	)

178 
	#d¥ötf
(
fmt
, 
¨gs
...)

	)

181 #ifde‡
vxw‹ks


183 
	~<öëLib.h
>

184 
	#öë_©⁄
(
a
, 
n
Ë((
	`öë_©⁄
(◊), (n)Ë=
ERROR
Ë? 0 : 1)

	)

185 
	#öë_¡ﬂ
(
n
Ë({ 
a
[
INET_ADDR_LEN
]; 
	`öë_¡ﬂ_b
 (“),á);á; })

	)

187 
	~<ty≥defs.h
>

188 
	~<bcmutûs.h
>

189 
	#ëhî_©€
(
a
, 
e
Ë
	`bcm_ëhî_©€
(◊), (e))

	)

190 
	#ëhî_ëﬂ
(
e
, 
a
Ë
	`bcm_ëhî_¡ﬂ
(”), (a))

	)

193 
v¢¥ötf
 (*, 
size_t
, c⁄° *, 
va_li°
);

194 
¢¥ötf
(*
°r
, 
size_t
 
cou¡
, c⁄° *
fmt
, ...);

195 *
°rdup
(const *);

196 *
°r£p
(**
°rögp
, *
dñim
);

197 
°rˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
);

198 
°∫ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

201 
	~<sockLib.h
>

203 #ifde‡
DEBUG


204 #unde‡
d¥ötf


205 
	#d¥ötf
 
¥ötf


	)

	@include/typedefs.h

12 #i‚de‡
_TYPEDEFS_H_


13 
	#_TYPEDEFS_H_


	)

29 #ifde‡
SITE_TYPEDEFS


35 
	~"sôe_ty≥defs.h
"

48 #ifde‡
__˝lu•lus


50 
	#TYPEDEF_BOOL


	)

51 #i‚de‡
FALSE


52 
	#FALSE
 
Ál£


	)

54 #i‚de‡
TRUE


55 
	#TRUE
 
åue


	)

61 #i‡
deföed
(
_WIN32
)

63 
	#TYPEDEF_BOOL


	)

64 
	tboﬁ
;

70 #ifde‡
_MSC_VER


71 
	#TYPEDEF_INT64


	)

72 
	#TYPEDEF_UINT64


	)

73 sig√d 
	t__öt64
 
	töt64
;

74 
	t__öt64
 
	tuöt64
;

77 #i‡
deföed
(
MACOSX
Ë&& deföed(
KERNEL
)

78 
	#TYPEDEF_BOOL


	)

82 #i‡
deföed
(
löux
)

83 
	#TYPEDEF_UINT


	)

84 
	#TYPEDEF_USHORT


	)

85 
	#TYPEDEF_ULONG


	)

88 #i‡!
deföed
(
löux
Ë&& !deföed(
_WIN32
Ë&& !deföed(
PMON
Ë&& !deföed(
_CFE_
)

89 
	#TYPEDEF_UINT


	)

90 
	#TYPEDEF_USHORT


	)

95 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__STRICT_ANSI__
)

96 
	#TYPEDEF_INT64


	)

97 
	#TYPEDEF_UINT64


	)

102 #i‡
deföed
(
__ICL
)

104 
	#TYPEDEF_INT64


	)

106 #i‡
deföed
(
__STDC__
)

107 
	#TYPEDEF_UINT64


	)

113 #i‡!
deföed
(
_WIN32
Ë&& !deföed(
PMON
Ë&& !deföed(
_CFE_
)

116 #i‡
deföed
(
löux
Ë&& deföed(
__KERNEL__
)

118 
	~<löux/ty≥s.h
>

122 
	~<sys/ty≥s.h
>

128 #i‡
deföed
(
MACOSX
Ë&& deföed(
KERNEL
)

129 
	~<IOKô/IOTy≥s.h
>

134 
	#USE_TYPEDEF_DEFAULTS


	)

143 #ifde‡
USE_TYPEDEF_DEFAULTS


144 #unde‡
USE_TYPEDEF_DEFAULTS


146 #i‚de‡
TYPEDEF_BOOL


147 
	tboﬁ
;

152 #i‚de‡
TYPEDEF_UCHAR


153 
	tuch¨
;

156 #i‚de‡
TYPEDEF_USHORT


157 
	tush‹t
;

160 #i‚de‡
TYPEDEF_UINT


161 
	tuöt
;

164 #i‚de‡
TYPEDEF_ULONG


165 
	tul⁄g
;

170 #i‚de‡
TYPEDEF_UINT8


171 
	tuöt8
;

174 #i‚de‡
TYPEDEF_UINT16


175 
	tuöt16
;

178 #i‚de‡
TYPEDEF_UINT32


179 
	tuöt32
;

182 #i‚de‡
TYPEDEF_UINT64


183 
	tuöt64
;

186 #i‚de‡
TYPEDEF_INT8


187 sig√d 
	töt8
;

190 #i‚de‡
TYPEDEF_INT16


191 sig√d 
	töt16
;

194 #i‚de‡
TYPEDEF_INT32


195 sig√d 
	töt32
;

198 #i‚de‡
TYPEDEF_INT64


199 sig√d 
	töt64
;

204 #i‚de‡
TYPEDEF_FLOAT32


205 
	tÊﬂt32
;

208 #i‚de‡
TYPEDEF_FLOAT64


209 
	tÊﬂt64
;

218 #i‚de‡
TYPEDEF_FLOAT_T


220 #i‡
deföed
(
FLOAT32
)

221 
Êﬂt32
 
	tÊﬂt_t
;

223 
Êﬂt64
 
	tÊﬂt_t
;

230 #i‚de‡
FALSE


231 
	#FALSE
 0

	)

234 #i‚de‡
TRUE


235 
	#TRUE
 1

	)

238 #i‚de‡
NULL


239 
	#NULL
 0

	)

242 #i‚de‡
OFF


243 
	#OFF
 0

	)

246 #i‚de‡
ON


247 
	#ON
 1

	)

252 #i‚de‡
PTRSZ


253 
	#PTRSZ
  (*)

	)

256 #i‚de‡
INLINE


258 #ifde‡
_MSC_VER


260 
	#INLINE
 
__ölöe


	)

262 #ñi‡
__GNUC__


264 
	#INLINE
 
__ölöe__


	)

268 
	#INLINE


	)

274 #unde‡
TYPEDEF_BOOL


275 #unde‡
TYPEDEF_UCHAR


276 #unde‡
TYPEDEF_USHORT


277 #unde‡
TYPEDEF_UINT


278 #unde‡
TYPEDEF_ULONG


279 #unde‡
TYPEDEF_UINT8


280 #unde‡
TYPEDEF_UINT16


281 #unde‡
TYPEDEF_UINT32


282 #unde‡
TYPEDEF_UINT64


283 #unde‡
TYPEDEF_INT8


284 #unde‡
TYPEDEF_INT16


285 #unde‡
TYPEDEF_INT32


286 #unde‡
TYPEDEF_INT64


287 #unde‡
TYPEDEF_FLOAT32


288 #unde‡
TYPEDEF_FLOAT64


289 #unde‡
TYPEDEF_FLOAT_T


291 
	#ETHER_ADDR_LEN
 6

	)

	@include/wlutils.h

15 #i‚de‡
_wlutûs_h_


16 
	#_wlutûs_h_


	)

18 
	~<ty≥defs.h
>

21 
	#WLC_IOCTL_MAGIC
 0x14e46c77

	)

24 
	#WLC_IOCTL_SMLEN
 256

	)

26 
	#WLC_IOCTL_VERSION
 1

	)

28 
	#WLC_GET_MAGIC
 0

	)

29 
	#WLC_GET_VERSION
 1

	)

30 
	#WLC_GET_VAR
 262

	)

31 
	#WLC_SET_VAR
 263

	)

34 
	swl_io˘l
 {

35 
uöt
 
	mcmd
;

36 *
	mbuf
;

37 
uöt
 
	mÀn
;

38 
boﬁ
 
	m£t
;

39 
uöt
 
	mu£d
;

40 
uöt
 
	m√eded
;

41 } 
	twl_io˘l_t
;

52 
wl_io˘l
(*
«me
, 
cmd
, *
buf
, 
Àn
);

60 
wl_hwaddr
(*
«me
, *
hwaddr
);

67 
wl_¥obe
(*
«me
);

77 
wl_£t_vÆ
(*
«me
, *
v¨
, *
vÆ
, 
Àn
);

78 
wl_gë_vÆ
(*
«me
, *
v¨
, *
vÆ
, 
Àn
);

79 
wl_£t_öt
(*
«me
, *
v¨
, 
vÆ
);

80 
wl_gë_öt
(*
«me
, *
v¨
, *
vÆ
);

	@linux_timer.c

18 
	#TIMER_DEBUG
 0

	)

19 #i‡
TIMER_DEBUG


20 
	#TIMERDBG
(
fmt
, 
¨gs
...Ë
	`¥ötf
("%s: " fmà"\n" , 
__FUNCTION__
 , ##árgs)

	)

22 
	#TIMERDBG
(
fmt
, 
¨gs
...)

	)

30 
	#__USE_GNU


	)

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<as£π.h
>

36 
	~<sig«l.h
>

37 
	~<°dio.h
>

38 
	~<sys/time.h
>

39 
	~<time.h
>

45 #unde‡
TIMER_PROFILE


58 
	#MS_PER_SEC
 1000

	)

59 
	#US_PER_SEC
 1000000

	)

60 
	#US_PER_MS
 1000

	)

61 
	#UCLOCKS_PER_SEC
 1000000

	)

63 (*
	tevít_ˇŒback_t
)(
	ttimî_t
, );

65 #i‚de‡
TIMESPEC_TO_TIMEVAL


66 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

67 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

68 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

69 
	}

	)
}

72 #i‚de‡
TIMEVAL_TO_TIMESPEC


73 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

74 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

75 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

76 }

	)

79 
	#ROUNDUP
(
x
,
y
Ë((((x)+(y)-1)/(y))*(y))

	)

81 
	#timîroundup
(
t
,
g
) \

83 i‡(!
	`timîis£t
(
t
)Ë—)->
tv_u£c
=1; \

84 i‡((
t
)->
tv_£c
 =0Ë—)->
tv_u£c
=
	`ROUNDUP
(—)->tv_u£c, 
g
); \

85 } 0)

	)

87 
	tu˛ock_t
;

89 
	#TFLAG_NONE
 0

	)

90 
	#TFLAG_CANCELLED
 (1<<0)

	)

91 
	#TFLAG_DELETED
 (1<<1)

	)

93 
	sevít
 {

94 
timevÆ
 
	mô_öãrvÆ
;

95 
timevÆ
 
	mô_vÆue
;

96 
evít_ˇŒback_t
 
	mfunc
;

97 
	m¨g
;

98 
	mÊags
;

99 
evít
 *
	m√xt
;

100 #ifde‡
TIMER_PROFILE


101 
uöt
 
	mex≥˘ed_ms
;

102 
u˛ock_t
 
	m°¨t
;

106 
timî_ˇn˚l
(
timî_t
 
timîid
);

108 
Æ¨m_h™dÀr
(
i
);

109 
check_evít_queue
();

110 
¥öt_evít_queue
();

111 
check_timî
();

112 #i‡
THIS_FINDS_USE


113 
cou¡_queue
(
evít
 *);

115 
timî_ch™ge_£âime
(
timî_t
 
timî_id
, c⁄° 
ôimî•ec
 *
timî_•ec
);

116 
block_timî
();

117 
unblock_timî
();

119 
evít
 *
	gevít_queue
 = 
NULL
;

120 
evít
 *
	gevít_‰ìli°
;

121 
uöt
 
	gg_gønuœrôy
;

122 
	gg_maxevíts
 = 0;

124 
u˛ock_t
 
	$u˛ock
()

126 
timevÆ
 
tv
;

128 
	`gëtimeofday
(&
tv
, 
NULL
);

129  ((
tv
.
tv_£c
 * 
US_PER_SEC
Ë+Åv.
tv_u£c
);

130 
	}
}

133 
	$öô_evít_queue
(
n
)

135 
i
;

136 
ôimîvÆ
 
tv
;

138 
g_maxevíts
 = 
n
;

139 
evít_‰ìli°
 = (
evít
 *Ë
	`mÆloc
(
n
 * (event));

140 
	`mem£t
(
evít_‰ìli°
, 0, 
n
 * (
evít
));

142 
i
 = 0; i < (
n
-1); i++)

143 
evít_‰ìli°
[
i
].
√xt
 = &event_freelist[i+1];

145 
evít_‰ìli°
[
i
].
√xt
 = 
NULL
;

147 
tv
.
ô_öãrvÆ
.
tv_£c
 = 0;

148 
tv
.
ô_öãrvÆ
.
tv_u£c
 = 1;

149 
tv
.
ô_vÆue
.
tv_£c
 = 0;

150 
tv
.
ô_vÆue
.
tv_u£c
 = 0;

151 
	`£tôimî
 (
ITIMER_REAL
, &
tv
, 0);

152 
	`£tôimî
 (
ITIMER_REAL
, 0, &
tv
);

153 
g_gønuœrôy
 = 
tv
.
ô_öãrvÆ
.
tv_u£c
;

155 
	`sig«l
(
SIGALRM
, 
Æ¨m_h™dÀr
);

156 
	}
}

159 
	$˛ock_gëtime
(

160 
˛ockid_t
 
˛ock_id
,

161 
time•ec
 * 
ç


164 
timevÆ
 
tv
;

165 
n
;

168 
n
 = 
	`gëtimeofday
(&
tv
, 
NULL
);

169 
	`TIMEVAL_TO_TIMESPEC
(&
tv
, 
ç
);

171  
n
;

172 
	}
}

175 
	$timî_¸óã
(

176 
˛ockid_t
 
˛ock_id
,

177 
sigevít
 * 
evp
,

178 
timî_t
 * 
pTimî


181 
evít
 *event;

183 i‡(
˛ock_id
 !
CLOCK_REALTIME
) {

184 
	`TIMERDBG
("timer_create can only support clock id CLOCK_REALTIME");

185 
	`exô
(1);

188 i‡(
evp
 !
NULL
) {

189 i‡(
evp
->
sigev_nŸify
 !
SIGEV_SIGNAL
 ||Évp->
sigev_signo
 !
SIGALRM
) {

190 
	`TIMERDBG
("timer_create can only support signalledálarms using SIGALRM");

191 
	`exô
(1);

195 
evít
 = 
evít_‰ìli°
;

196 i‡(
evít
 =
NULL
) {

197 
	`¥öt_evít_queue
();

199 
	`as£π
(
evít
 !
NULL
);

201 
evít
->
Êags
 = 
TFLAG_NONE
;

203 
evít_‰ìli°
 = 
evít
->
√xt
;

204 
evít
->
√xt
 = 
NULL
;

206 
	`check_evít_queue
();

208 *
pTimî
 = (
timî_t
Ë
evít
;

211 
	}
}

213 
	$timî_dñëe
(

214 
timî_t
 
timîid


217 
evít
 *evíà(evíà*Ë
timîid
;

219 i‡(
evít
->
Êags
 & 
TFLAG_DELETED
) {

220 
	`TIMERDBG
("Cannot deleteá deletedÉvent");

224 
	`timî_ˇn˚l
(
timîid
);

226 
evít
->
Êags
 |
TFLAG_DELETED
;

228 
evít
->
√xt
 = 
evít_‰ìli°
;

229 
evít_‰ìli°
 = 
evít
;

232 
	}
}

234 
	gtimî_c⁄√˘


236 
timî_t
 
	gtimîid
,

237 (*
routöe
)(
timî_t
, ),

238 
¨g


241 
evít
 *evíà(evíà*Ë
timîid
;

243 
	`as£π
(
routöe
 !
NULL
);

244 
evít
->
func
 = 
routöe
;

245 
evít
->
¨g
 =árg;

248 
	}
}

254 
	gtimî_ch™ge_£âime


256 
timî_t
 
	gtimîid
,

257 c⁄° 
ôimî•ec
 * 
	gvÆue


260 
evít
 *
	gevít
 = (evíà*Ë
timîid
;

262 
TIMESPEC_TO_TIMEVAL
(&
evít
->
ô_öãrvÆ
, &
vÆue
->it_interval);

263 
TIMESPEC_TO_TIMEVAL
(&
evít
->
ô_vÆue
, &
vÆue
->it_value);

268 
	gtimî_£âime


270 
timî_t
 
	gtimîid
,

271 
	gÊags
,

272 c⁄° 
ôimî•ec
 * 
	gvÆue
,

273 
ôimî•ec
 * 
	govÆue


276 
ôimîvÆ
 
	gôimî
;

277 
evít
 *
	gevít
 = (evíà*Ë
timîid
;

278 
evít
 **
	gµevít
;

280 
TIMESPEC_TO_TIMEVAL
(&
evít
->
ô_öãrvÆ
, &
vÆue
->it_interval);

281 
TIMESPEC_TO_TIMEVAL
(&
evít
->
ô_vÆue
, &
vÆue
->it_value);

284 i‡(!
timîis£t
(&
evít
->
ô_vÆue
)) {

285 
timî_ˇn˚l
(
timîid
);

289 
block_timî
();

291 #ifde‡
TIMER_PROFILE


292 
	gevít
->
	gex≥˘ed_ms
 = (
evít
->
ô_vÆue
.
tv_£c
 * 
MS_PER_SEC
Ë+ (evít->ô_vÆue.
tv_u£c
 / 
US_PER_MS
);

293 
	gevít
->
	g°¨t
 = 
u˛ock
();

295 i‡(
	gevít
->
	g√xt
) {

296 
TIMERDBG
("callingÅimer_settime witháÅimerÅhat isálready onÅhe queue.");

305 
timîroundup
(&
evít
->
ô_vÆue
, 
g_gønuœrôy
);

307 
timî˛ór
(&
ôimî
.
ô_vÆue
);

308 
gëôimî
(
ITIMER_REAL
, &
ôimî
);

309 i‡(
timîis£t
(&
ôimî
.
ô_vÆue
)) {

312 i‡(
	gevít_queue
) {

313 i‡(
timîcmp
(&(
ôimî
.
ô_vÆue
), &(
evít_queue
->it_value), >)) {

317 
TIMERDBG
("timer_settime: TIMER ERROR!");

324 
	gevít_queue
->
	gô_vÆue
 = 
ôimî
.
ô_vÆue
;

334 
	gµevít
 = &
evít_queue
;

335 *
	gµevít
) {

336 i‡–
timîcmp
(&(
evít
->
ô_vÆue
), &((*
µevít
)->it_value), <) ) {

341 
timîsub
(&((*
µevít
)->
ô_vÆue
), &(
evít
->it_value), &((*ppevent)->it_value));

345 
timîsub
(&(
evít
->
ô_vÆue
), &((*
µevít
)->it_value), &(event->it_value));

347 
	gµevít
 = &((*
µevít
)->
√xt
);

352 
	gevít
->
	g√xt
 = *
µevít
;

353 *
	gµevít
 = 
evít
;

355 
check_evít_queue
();

358 i‡(
	gevít
 =
evít_queue
) {

359 
timîroundup
(&
evít_queue
->
ô_vÆue
, 
g_gønuœrôy
);

360 
timî˛ór
(&
ôimî
.
ô_öãrvÆ
);

361 
	gôimî
.
	gô_vÆue
 = 
evít_queue
->
ô_vÆue
;

365 i‡(!
timîis£t
(&(
ôimî
.
ô_vÆue
)))

366 
	gôimî
.
	gô_vÆue
 = (
timevÆ
) { 0, 1 };

368 
as£π
(!
timîis£t
(&
ôimî
.
ô_öãrvÆ
));

369 
as£π
(
ôimî
.
ô_vÆue
.
tv_£c
 > 0 || itimî.ô_vÆue.
tv_u£c
 >
g_gønuœrôy
);

370 
as£π
(
evít_queue
->
ô_vÆue
.
tv_£c
 > 0 ||Évít_queue->ô_vÆue.
tv_u£c
 >
g_gønuœrôy
);

371 
£tôimî
(
ITIMER_REAL
, &
ôimî
, 
NULL
);

372 
check_timî
();

375 
	gevít
->
	gÊags
 &~
TFLAG_CANCELLED
;

377 
unblock_timî
();

382 
	$check_timî
()

384 
ôimîvÆ
 
ôimî
;

386 
	`gëôimî
(
ITIMER_REAL
, &
ôimî
);

387 i‡(
	`timîis£t
(&
ôimî
.
ô_öãrvÆ
)) {

388 
	`TIMERDBG
("ERRORÅimer interval is set.");

390 i‡(
	`timîcmp
(&(
ôimî
.
ô_vÆue
), &(
evít_queue
->it_value), >)) {

391 
	`TIMERDBG
("ERRORÅimerÉxpiresÜaterÅhanÅopÉvent.");

393 
	}
}

396 
	$check_evít_queue
()

398 
timevÆ
 
sum
;

399 
evít
 *event;

400 
i
 = 0;

402 #ifde‡
nŸdef


403 
n‰ì
 = 0;

404 
evít
 *
p
;

405 
p
 = 
evít_‰ìli°
;Ö;Ö =Ö->
√xt
)

406 
n‰ì
++;

407 
	`¥ötf
("%d fªêevíts\n", 
n‰ì
);

410 
	`timî˛ór
(&
sum
);

411 
evít
 = 
evít_queue
;Évít;Évíàevít->
√xt
) {

412 i‡(
i
 > 
g_maxevíts
) {

413 
	`TIMERDBG
("timer queueÜooksÜike itÜoops back on itself!");

414 
	`¥öt_evít_queue
();

415 
	`exô
(1);

417 
i
++;

419 
	}
}

421 #i‡
THIS_FINDS_USE


424 
	$cou¡_queue
(
evít
 *
evít_queue
)

426 
evít
 *event;

427 
i
 = 0;

428 
evít
 = 
evít_queue
;Évít;Évíàevít->
√xt
)

429 
i
++;

430  
i
;

431 
	}
}

434 
	$¥öt_evít_queue
()

436 
evít
 *event;

437 
i
 = 0;

439 
evít
 = 
evít_queue
;Évít;Évíàevít->
√xt
) {

440 
	`¥ötf
("#%d (0x%x)->0x%x: \t%d sec %d usec\t%p\n",

441 
i
++, (Ë
evít
, (Ëevít->
√xt
, (Ëevít->
ô_vÆue
.
tv_£c
, (Ëevít->ô_vÆue.
tv_u£c
,Évít->
func
);

442 i‡(
i
 > 
g_maxevíts
) {

443 
	`¥ötf
("...(giving up)\n");

447 
	}
}

452 
	$Æ¨m_h™dÀr
(
i
)

454 
evít
 *evít, **
µevít
;

455 
ôimîvÆ
 
ôimî
;

456 
timevÆ
 
smÆl_öãrvÆ
 = { 0, 
g_gønuœrôy
/2 };

457 #ifde‡
TIMER_PROFILE


458 
uöt
 
junk
;

459 
u˛ock_t
 
íd
;

460 
uöt
 
a˘uÆ
;

463 
	`block_timî
();

470 
evít
 = 
evít_queue
;

471 
evít_queue
 =Évít_queue->
√xt
;

472 
evít
->
√xt
 = 
NULL
;

474 #ifde‡
TIMER_PROFILE


475 
íd
 = 
	`u˛ock
();

476 
a˘uÆ
 = ((
íd
-
evít
->
°¨t
)/((
u˛ock_t
)
UCLOCKS_PER_SEC
/1000));

477 i‡(
a˘uÆ
 < 0)

478 
junk
 = 
íd
;

479 
	`TIMERDBG
("ex≥˘ed %d m†á˘uÆ %d ms", 
evít
->
ex≥˘ed_ms
, ((
íd
-evít->
°¨t
)/((
u˛ock_t
)
UCLOCKS_PER_SEC
/1000)));

483 (*(
evít
->
func
))((
timî_t
Ëevít, (Îvít->
¨g
);

486 i‡–!(
evít
->
Êags
 & 
TFLAG_CANCELLED
) ) {

491 i‡(
	`timîis£t
(&
evít
->
ô_öãrvÆ
)) {

494 
evít
->
ô_vÆue
 =Évít->
ô_öãrvÆ
;

495 #ifde‡
TIMER_PROFILE


496 
evít
->
ex≥˘ed_ms
 = (evít->
ô_vÆue
.
tv_£c
 * 
MS_PER_SEC
Ë+ (evít->ô_vÆue.
tv_u£c
 / 
US_PER_MS
);

497 
evít
->
°¨t
 = 
	`u˛ock
();

499 
	`timîroundup
(&
evít
->
ô_vÆue
, 
g_gønuœrôy
);

503 
µevít
 = &
evít_queue
;

504 *
µevít
) {

505 i‡–
	`timîcmp
(&(
evít
->
ô_vÆue
), &((*
µevít
)->it_value), <) ) {

510 
	`timîsub
(&((*
µevít
)->
ô_vÆue
), &(
evít
->it_value), &((*ppevent)->it_value));

513 
	`timîsub
(&(
evít
->
ô_vÆue
), &((*
µevít
)->it_value), &(event->it_value));

514 
µevít
 = &((*µevít)->
√xt
);

519 
evít
->
√xt
 = *
µevít
;

520 *
µevít
 = 
evít
;

527 
	`check_evít_queue
();

529 } 
evít_queue
 && 
	`timîcmp
(&evít_queue->
ô_vÆue
, &
smÆl_öãrvÆ
, <));

532 i‡(
evít_queue
) {

533 
	`timîroundup
(&
evít_queue
->
ô_vÆue
, 
g_gønuœrôy
);

535 
	`timî˛ór
(&
ôimî
.
ô_öãrvÆ
);

536 
ôimî
.
ô_vÆue
 = 
evít_queue
->it_value;

539 i‡(!
	`timîis£t
(&(
ôimî
.
ô_vÆue
)))

540 
ôimî
.
ô_vÆue
 = (
timevÆ
) { 0, 1 };

542 
	`£tôimî
(
ITIMER_REAL
, &
ôimî
, 
NULL
);

543 
	`check_timî
();

545 
	`TIMERDBG
("ThereáreÇoÉvents inÅhe queue -ÅimerÇotÑeset.");

548 
	`unblock_timî
();

549 
	}
}

551 
	gblock_cou¡
 = 0;

553 
	$block_timî
()

555 
sig£t_t
 
£t
;

557 i‡(
block_cou¡
++ == 0) {

558 
	`sigem±y£t
(&
£t
);

559 
	`sigadd£t
(&
£t
, 
SIGALRM
);

560 
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
);

562 
	}
}

564 
	$unblock_timî
()

566 
sig£t_t
 
£t
;

568 i‡(--
block_cou¡
 == 0) {

569 
	`sigem±y£t
(&
£t
);

570 
	`sigadd£t
(&
£t
, 
SIGALRM
);

571 
	`sig¥ocmask
(
SIG_UNBLOCK
, &
£t
, 
NULL
);

573 
	}
}

575 
	$timî_ˇn˚l_Æl
()

577 
ôimîvÆ
 
timîoff
 = { { 0, 0 }, { 0, 0} };

578 
evít
 *event;

579 
evít
 **
µevít
;

581 
	`£tôimî
(
ITIMER_REAL
, &
timîoff
, 
NULL
);

583 
µevít
 = &
evít_queue
;

584 *
µevít
) {

585 
evít
 = *
µevít
;

586 *
µevít
 = 
evít
->
√xt
;

587 
evít
->
√xt
 = 
NULL
;

589 
	}
}

593 
	$timî_ˇn˚l
(
timî_t
 
timîid
)

595 
ôimîvÆ
 
ôimî
;

596 
ôimîvÆ
 
timîoff
 = { { 0, 0 }, { 0, 0} };

597 
evít
 *evíà(evíà*Ë
timîid
;

598 
evít
 **
µevít
;

600 i‡(
evít
->
Êags
 & 
TFLAG_CANCELLED
) {

601 
	`TIMERDBG
("Cannot cancelá cancelledÉvent");

605 
	`block_timî
();

607 
µevít
 = &
evít_queue
;

608 *
µevít
) {

609 i‡–*
µevít
 =
evít
 ) {

618 i‡(
evít
 =
evít_queue
 &&Évít->
√xt
 !
NULL
) {

619 
	`timî˛ór
(&
ôimî
.
ô_vÆue
);

620 
	`gëôimî
(
ITIMER_REAL
, &
ôimî
);

623 
	`timîsub
(&(
evít
->
ô_vÆue
), &(
ôimî
.it_value), &(event->it_value));

626 
	`timîadd
(&(
evít
->
√xt
->
ô_vÆue
), &(event->it_value), &(event->next->it_value));

629 *
µevít
 = 
evít
->
√xt
;

630 
evít
->
√xt
 = 
NULL
;

632 i‡(
evít_queue
) {

633 
	`timîroundup
(&
evít_queue
->
ô_vÆue
, 
g_gønuœrôy
);

634 
	`timî˛ór
(&
ôimî
.
ô_öãrvÆ
);

635 
ôimî
.
ô_vÆue
 = 
evít_queue
->it_value;

642 i‡(!
	`timîis£t
(&(
ôimî
.
ô_vÆue
)))

643 
ôimî
.
ô_vÆue
 = (
timevÆ
) { 0, 1 };

645 
	`as£π
(
ôimî
.
ô_vÆue
.
tv_£c
 > 0 || itimî.ô_vÆue.
tv_u£c
 >
g_gønuœrôy
);

646 
	`as£π
(
evít_queue
->
ô_vÆue
.
tv_£c
 > 0 ||Évít_queue->ô_vÆue.
tv_u£c
 >
g_gønuœrôy
);

647 
	`£tôimî
(
ITIMER_REAL
, &
ôimî
, 
NULL
);

648 
	`check_timî
();

650 
	`£tôimî
(
ITIMER_REAL
, &
timîoff
, 
NULL
);

654 
µevít
 = &((*µevít)->
√xt
);

657 
evít
->
Êags
 |
TFLAG_CANCELLED
;

659 
	`unblock_timî
();

660 
	}
}

665 
	~"bcmtimî.h
"

676 
	$bcm_timî_moduÀ_öô
(
timî_íåõs
, 
bcm_timî_moduÀ_id
 *
moduÀ_id
)

678 
	`öô_evít_queue
(
timî_íåõs
);

679 *
moduÀ_id
 = (
bcm_timî_moduÀ_id
)
evít_‰ìli°
;

681 
	}
}

687 
	$bcm_timî_moduÀ_˛ónup
(
bcm_timî_moduÀ_id
 
moduÀ_id
)

689 
moduÀ_id
 = 0;

691 
	}
}

694 
	$bcm_timî_moduÀ_íabÀ
(
bcm_timî_moduÀ_id
 
moduÀ_id
, 
íabÀ
)

696 i‡(
íabÀ
)

697 
	`unblock_timî
();

699 
	`block_timî
();

701 
	}
}

703 
	$bcm_timî_¸óã
(
bcm_timî_moduÀ_id
 
moduÀ_id
, 
bcm_timî_id
 *
timî_id
)

705 
moduÀ_id
 = 0;

706  
	`timî_¸óã
(
CLOCK_REALTIME
, 
NULL
, (
timî_t
 *)
timî_id
);

707 
	}
}

709 
	$bcm_timî_dñëe
(
bcm_timî_id
 
timî_id
)

711  
	`timî_dñëe
((
timî_t
)
timî_id
);

712 
	}
}

714 
	$bcm_timî_gëtime
(
bcm_timî_id
 
timî_id
, 
ôimî•ec
 *
timî_•ec
)

717 
	}
}

719 
	$bcm_timî_£âime
(
bcm_timî_id
 
timî_id
, c⁄° 
ôimî•ec
 *
timî_•ec
)

721  
	`timî_£âime
((
timî_t
)
timî_id
, 0, 
timî_•ec
, 
NULL
);

722 
	}
}

724 
	$bcm_timî_c⁄√˘
(
bcm_timî_id
 
timî_id
, 
bcm_timî_cb
 
func
, 
d©a
)

726  
	`timî_c⁄√˘
((
timî_t
)
timî_id
, (*)
func
, 
d©a
);

727 
	}
}

729 
	$bcm_timî_ˇn˚l
(
bcm_timî_id
 
timî_id
)

731 
	`timî_ˇn˚l
((
timî_t
)
timî_id
);

733 
	}
}

734 
	$bcm_timî_ch™ge_expúytime
(
bcm_timî_id
 
timî_id
, c⁄° 
ôimî•ec
 *
timî_•ec
)

736 
	`timî_ch™ge_£âime
((
timî_t
)
timî_id
, 
timî_•ec
);

738 
	}
}

	@main.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

19 
	~<ty≥defs.h
>

20 
	~<bcmnvøm.h
>

21 
	~"ezp-lib.h
"

24 
	$ußge
()

26 
	`Ârötf
(
°dîr
, "usage:Çvram [getÇame] [setÇame=value] \n [unsetÇame] [show] [default] [factory] \n [import filename] [export filename]\n [upgrade] [downgrade version]");

27 
	`exô
(0);

28 
	}
}

32 
	$puts_åim_¸
(*
°r
)

34 
Àn
;

36 i‡(!
°r
) ;

38 
Àn
 = 
	`°æí
(
°r
);

39 i‡(
Àn
 && (
°r
[len-1] == '\r'))Üen--;

40 
	`¥ötf
("%.*s\n", 
Àn
, 
°r
);

41 
	}
}

45 
	$maö
(
¨gc
, **
¨gv
)

47 *
«me
, *
vÆue
, 
buf
[
NVRAM_SPACE
];

48 
ªs
[
EZPLIB_BUF_LEN
];

49 
size
;

52 --
¨gc
;

53 ++
¨gv
;

55 i‡(!*
¨gv
) {

56 
	`ußge
();

60 i‡(!
	`°∫cmp
(*
¨gv
, "get", 3)) {

61 i‡(*++
¨gv
) {

62 i‡((
vÆue
 = 
	`nvøm_gë
(*
¨gv
))) {

63 
	`puts_åim_¸
(
vÆue
);

64 #i‡!
	`deföed
(
NVRAM_MMAP
) || NVRAM_MMAP == 0

65 
	`‰ì
(
vÆue
) ;

72 } i‡(!
	`°∫cmp
(*
¨gv
, "set", 3)) {

73 i‡(*++
¨gv
) {

74 
	`°∫˝y
(
vÆue
 = 
buf
, *
¨gv
, (buf));

75 
«me
 = 
	`°r£p
(&
vÆue
, "=");

77 
	`nvøm_£t
(
«me
, 
vÆue
);

82 } i‡(!
	`°∫cmp
(*
¨gv
, "fset", 4)) {

83 i‡(*++
¨gv
) {

84 
	`°∫˝y
(
vÆue
 = 
buf
, *
¨gv
, (buf));

85 
«me
 = 
	`°r£p
(&
vÆue
, "=");

87 
	`nvøm_f£t
(
«me
, 
vÆue
);

92 } i‡(!
	`°∫cmp
(*
¨gv
, "unset", 5)) {

93 i‡(*++
¨gv
) {

94 
	`nvøm_un£t
(*
¨gv
);

99 } i‡(!
	`°∫cmp
(*
¨gv
, "commit", 5)) {

100 
	`nvøm_commô
();

102 } i‡(!
	`°∫cmp
(*
¨gv
, "show", 4)) {

103 --
¨gc
;

104 ++
¨gv
;

106 i‡(
¨gc
 == 0) {

108 
	`nvøm_gëÆl
(
buf
, (buf));

109 
«me
 = 
buf
; *«me;Çamê+
	`°æí
(name) + 1)

110 
	`puts_åim_¸
(
«me
);

111 
size
 = (
nvøm_hódî
Ë+ (Ë
«me
 - (Ë
buf
;

112 
	`Ârötf
(
°dîr
, "size: %d bytes (%dÜeft)\n",

113 
size
, 
NVRAM_SPACE
 - size);

115 } i‡(
¨gc
 == 2) {

117 
	`ez∂ib_gë_ruÀ
(
¨gv
[0], 
	`©oi
◊rgv[1]), 
ªs
, 
EZPLIB_BUF_LEN
);

118 
	`puts_åim_¸
(
ªs
);

121 } i‡(
¨gc
 == 3) {

123 
	`ez∂ib_gë_©å_vÆ
(
¨gv
[0], 
	`©oi
◊rgv[1]),árgv[2], 
ªs
,

124 
EZPLIB_BUF_LEN
, 
EZPLIB_USE_CLI
);

125 
	`puts_åim_¸
(
ªs
);

128 } i‡(
¨gc
 =5 && !
	`°∫cmp
(
¨gv
[2], "subruÀ", 
	`°æí
(argv[1]))) {

130 
	`ez∂ib_gë_subruÀ
(
¨gv
[0], 
	`©oi
(argv[1]),átoi(argv[3]),

131 
	`©oi
(
¨gv
[4]), 
ªs
, 
EZPLIB_BUF_LEN
);

132 
	`puts_åim_¸
(
ªs
);

136 } i‡(!
	`°∫cmp
(
¨gv
[0], "ª∂a˚", 
	`°æí
(argv[0]))) {

137 i‡(!
	`°∫cmp
(
¨gv
[1], "ruÀ", 
	`°æí
(argv[1]))) {

138 
¨gc
 -= 2;

139 
¨gv
 += 2;

140 i‡(
¨gc
 == 3) {

141 
ªt
;

144 
ªt
 =

145 
	`ez∂ib_ª∂a˚_ruÀ
(
¨gv
[0], 
	`©oi
(argv[1]),

146 
¨gv
[2]);

147 i‡(
ªt
 < 0) {

148 
	`¥ötf
("NVRAMÑïœ˚ÑuÀ faûed: %s\n", 
ªt
);

154 } i‡(!
	`°∫cmp
(
¨gv
[1], "©åibuã", 
	`°æí
(argv[1]))) {

155 
¨gc
 -= 2;

156 
¨gv
 += 2;

157 i‡(
¨gc
 == 4) {

158 
ªt
;

163 
ªt
 =

164 
	`ez∂ib_ª∂a˚_©å
(
¨gv
[0], 
	`©oi
(argv[1]),árgv[2],

165 
¨gv
[3]);

166 i‡(
ªt
 < 0) {

167 
	`¥ötf
("NVRAMÑïœ˚áâribuã faûed: %d\n", 
ªt
);

174 } i‡(!
	`°∫cmp
(
¨gv
[0], "≠≥nd", 
	`°æí
(argv[0])) &&

175 !
	`°∫cmp
(
¨gv
[1], "ruÀ", 
	`°æí
(argv[1]))) {

176 
¨gc
 -= 2;

177 
¨gv
 += 2;

178 i‡(
¨gc
 == 2) {

179 
ªt
;

182 
ªt
 = 
	`ez∂ib_≠≥nd_ruÀ
(
¨gv
[0],árgv[1]);

183 i‡(
ªt
 < 0) {

184 
	`¥ötf
("NVRAMáµídÑuÀ faûed: %s\n", 
ªt
);

190 } i‡(!
	`°∫cmp
(
¨gv
[0], "¥ïíd", 
	`°æí
(argv[0])) &&

191 !
	`°∫cmp
(
¨gv
[1], "ruÀ", 
	`°æí
(argv[1]))) {

192 
¨gc
 -= 2;

193 
¨gv
 += 2;

194 i‡(
¨gc
 == 2) {

195 
ªt
;

198 
ªt
 = 
	`ez∂ib_¥ïíd_ruÀ
(
¨gv
[0],árgv[1]);

199 i‡(
ªt
 < 0) {

200 
	`¥ötf
("NVRAMÖª≥ndÑuÀ faûed: %s\n", 
ªt
);

206 } i‡(!
	`°∫cmp
(
¨gv
[0], "add", 
	`°æí
(argv[0])) &&

207 !
	`°∫cmp
(
¨gv
[1], "ruÀ", 
	`°æí
(argv[1]))) {

208 
¨gc
 -= 2;

209 
¨gv
 += 2;

210 i‡(
¨gc
 == 3) {

211 
ªt
;

214 
ªt
 = 
	`ez∂ib_add_ruÀ
(
¨gv
[0], 
	`©oi
(argv[1]),árgv[2]);

215 i‡(
ªt
 < 0) {

216 
	`¥ötf
("NVRAMáddÑuÀ faûed: %s\n", 
ªt
);

222 } i‡(!
	`°∫cmp
(
¨gv
[0], "dñëe", 
	`°æí
(argv[0])) &&

223 !
	`°∫cmp
(
¨gv
[1], "ruÀ", 
	`°æí
(argv[1]))) {

224 
¨gc
 -= 2;

225 
¨gv
 += 2;

226 i‡(
¨gc
 == 2) {

227 
ªt
;

230 
ªt
 = 
	`ez∂ib_dñëe_ruÀ
(
¨gv
[0], 
	`©oi
(argv[1]));

231 i‡(
ªt
 < 0) {

232 
	`¥ötf
("NVRAM dñëêruÀ faûed: %s\n", 
ªt
);

238 } i‡(!
	`°∫cmp
(
¨gv
[0], "ruÀ", 
	`°æí
(argv[0])) &&

239 !
	`°∫cmp
(
¨gv
[1], "num", 
	`°æí
(argv[1]))) {

240 
¨gc
 -= 2;

241 
¨gv
 += 2;

242 i‡(
¨gc
 == 1) {

243 
ªt
;

246 
ªt
 = 
	`ez∂ib_gë_ruÀ_num
(
¨gv
[0]);

247 i‡(
ªt
 < 0) {

248 
	`¥ötf
("NVRAM dñëêruÀ faûed: %s\n", 
ªt
);

249  
ªt
;

256 i‡(!
	`°∫cmp
(*
¨gv
, "boot", 4)) {

257 
	`nvøm_boŸ
();

261 i‡(!
	`°∫cmp
(*
¨gv
, "upgrade", 7)) {

262 
¨gc
 -= 1;

263 
¨gv
 += 1;

264 i‡(
	`nvøm_upgøde
((
¨gc
 >1)? 
¨gv
[0]: 
NULL
)) {

265 
	`nvøm_commô
();

270 i‡(!
	`°∫cmp
(*
¨gv
, "downgrade", 9)) {

271 
¨gc
 -= 1;

272 
¨gv
 += 1;

273 i‡(
¨gc
 == 1) {

274 i‡(
	`nvøm_downgøde
(
¨gv
[0])) {

275 
	`nvøm_commô
();

278 
	`Ârötf
(
°dîr
, "nvram downgradeÉrror\n");

282 i‡(!
	`°∫cmp
(*
¨gv
, "default", 7)) {

283 if(
¨gc
 == 1) {

284 
	`nvøm_deÁu…
();

288 
¨gv
++;

289 
	`nvøm_deÁu…_ruÀ
(*
¨gv
);

293 i‡(!
	`°∫cmp
(*
¨gv
, "factory", 7)) {

294 
	`nvøm_deÁu…
();

295 
	`nvøm_commô
();

297 
	`kûl
(1, 15);

300 i‡(!
	`°∫cmp
(
¨gv
[0], "import", 6)) {

301  
	`nvøm_imp‹t
(
¨gv
[1]);

303 i‡(!
	`°∫cmp
(
¨gv
[0], "export", 6)) {

304 
	`nvøm_exp‹t
(
¨gv
[1]);

309 
	}
}

	@nvram.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<î∫o.h
>

19 
	~<îr‹.h
>

20 
	~<°rög.h
>

21 
	~<sys/io˘l.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/°©.h
>

24 
	~<f˙é.h
>

25 
	~<sys/mm™.h
>

27 
	~<ty≥defs.h
>

28 
	~<bcmnvøm.h
>

29 
	~<shutûs.h
>

31 
	#PATH_DEV_NVRAM
 "/dev/nvøm"

	)

34 
	gnvøm_fd
 = -1;

35 *
	gnvøm_buf
 = 
NULL
;

36 
fûe_to_buf
(*
∑th
, *
buf
, 
Àn
);

39 
	$nvøm_öô
(*
unu£d
)

41 i‡((
nvøm_fd
 = 
	`›í
(
PATH_DEV_NVRAM
, 
O_RDWR
)) < 0)

42 
îr
;

45 i‡((
nvøm_buf
 = 
	`mm≠
(
NULL
, 
NVRAM_SPACE
, 
PROT_READ
, 
MAP_SHARED
, 
nvøm_fd
, 0)Ë=
MAP_FAILED
) {

46 
	`˛o£
(
nvøm_fd
);

47 
nvøm_fd
 = -1;

48 
îr
;

53 
îr
:

54 
	`≥º‹
(
PATH_DEV_NVRAM
);

55  
î∫o
;

56 
	}
}

59 
	$nvøm_gë
(c⁄° *
«me
)

61 
size_t
 
cou¡
 = 
	`°æí
(
«me
) + 1;

62 
tmp
[100], *
vÆue
;

63 *
off
 = (*Ë
tmp
;

65 i‡(
nvøm_fd
 < 0)

66 i‡(
	`nvøm_öô
(
NULL
))

67  
NULL
;

69 i‡(
cou¡
 > (
tmp
)) {

70 i‡(!(
off
 = 
	`mÆloc
(
cou¡
)))

71  
NULL
;

75 
	`°r˝y
((*Ë
off
, 
«me
);

77 
cou¡
 = 
	`ªad
(
nvøm_fd
, 
off
, count);

79 i‡(
cou¡
 == ())

80 
vÆue
 = &
nvøm_buf
[*
off
];

82 
vÆue
 = 
NULL
;

84 i‡(
cou¡
 < 0)

85 
	`≥º‹
(
PATH_DEV_NVRAM
);

87 i‡(
off
 !(*Ë
tmp
)

88 
	`‰ì
(
off
);

90  
vÆue
;

91 
	}
}

94 
	$nvøm_gëÆl
(*
buf
, 
cou¡
)

96 
ªt
;

98 i‡(
nvøm_fd
 < 0)

99 i‡((
ªt
 = 
	`nvøm_öô
(
NULL
)))

100  
ªt
;

102 i‡(
cou¡
 == 0)

106 *
buf
 = '\0';

108 
ªt
 = 
	`ªad
(
nvøm_fd
, 
buf
, 
cou¡
);

110 i‡(
ªt
 < 0)

111 
	`≥º‹
(
PATH_DEV_NVRAM
);

113  (
ªt
 =
cou¡
) ? 0 :Ñet;

114 
	}
}

117 
	$nvøm_£t
(c⁄° *
«me
, c⁄° *
vÆue
)

119 
size_t
 
cou¡
 = 
	`°æí
(
«me
) + 1;

120 
tmp
[100], *
buf
 =Åmp;

121 
ªt
;

123 i‡(
nvøm_fd
 < 0)

124 i‡((
ªt
 = 
	`nvøm_öô
(
NULL
)))

125  
ªt
;

128 i‡(
vÆue
)

129 
cou¡
 +
	`°æí
(
vÆue
) + 1;

131 i‡(
cou¡
 > (
tmp
)) {

132 i‡(!(
buf
 = 
	`mÆloc
(
cou¡
)))

133  -
ENOMEM
;

136 i‡(
vÆue
)

137 
	`•rötf
(
buf
, "%s=%s", 
«me
, 
vÆue
);

139 
	`°r˝y
(
buf
, 
«me
);

141 
ªt
 = 
	`wrôe
(
nvøm_fd
, 
buf
, 
cou¡
);

143 i‡(
ªt
 < 0)

144 
	`≥º‹
(
PATH_DEV_NVRAM
);

146 i‡(
buf
 !
tmp
)

147 
	`‰ì
(
buf
);

149  (
ªt
 =
cou¡
) ? 0 :Ñet;

150 
	}
}

153 
	$nvøm_un£t
(c⁄° *
«me
)

155  
	`nvøm_£t
(
«me
, 
NULL
);

156 
	}
}

159 
	$nvøm_commô
()

161 
ªt
;

163 i‡(
nvøm_fd
 < 0)

164 i‡((
ªt
 = 
	`nvøm_öô
(
NULL
)))

165  
ªt
;

167 
ªt
 = 
	`io˘l
(
nvøm_fd
, 
NVRAM_MAGIC
, 
NULL
);

169 i‡(
ªt
 < 0)

170 
	`≥º‹
(
PATH_DEV_NVRAM
);

172  
ªt
;

173 
	}
}

176 
	$fûe_to_buf
(*
∑th
, *
buf
, 
Àn
)

178 
FILE
 *
Â
;

180 
	`mem£t
(
buf
, 0 , 
Àn
);

182 i‡((
Â
 = 
	`f›í
(
∑th
, "r"))) {

183 
	`fgës
(
buf
, 
Àn
, 
Â
);

184 
	`f˛o£
(
Â
);

189 
	}
}

	@nvram_data.h

1 #i‚de‡
NVARM_DATA_H


2 
	#NVARM_DATA_H


	)

3 
nvøm_tu∂e
 
	gnvøm_ez∑ckë_deÁu…
[] = {

4 { "bc˛õ¡_w™", 
x°r
(
BCCLINET_WAN
),

5 
NVRAM_NONE
,

8 { "fw_vîsi⁄", 
x°r
(
EZP_PROD_VERSION
),

9 
NVRAM_PROTECTED
,

12 { "cu°om_fw_vîsi⁄", 
x°r
(
CUSTOM_PROD_VERSION
),

13 
NVRAM_PROTECTED
,

17 
NVRAM_NONE
,

20 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

21 { "w™_num", 
x°r
(
WAN_NUM
),

22 
NVRAM_NONE
,

27 
NVRAM_NONE
,

30 #i‡
deföed
 
EZP_PROD_BRAND_AXIM


31 
	~"nvøm_ez∑ckë-bønd_axim.h
"

32 #ñi‡
EZP_PROD_BRAND_ABOCOM


33 
	~"nvøm_ez∑ckë-bønd_abocom.h
"

34 #ñi‡
EZP_PROD_BRAND_ZYUS


35 
	~"nvøm_ez∑ckë-bønd_zyxñ.h
"

36 #ñi‡
EZP_PROD_BRAND_PLANET


37 
	~"nvøm_ez∑ckë-bønd_∂™ë.h
"

38 #ñi‡
EZP_PROD_BRAND_WHITE


39 
	~"nvøm_ez∑ckë-bønd_whôe.h
"

40 #ñi‡
EZP_PROD_BRAND_PROX


41 
	~"nvøm_ez∑ckë-bønd_¥ox.h
"

42 #ñi‡
EZP_PROD_BRAND_MYMO


43 
	~"nvøm_ez∑ckë-bønd_mymo.h
"

44 #ñi‡
EZP_PROD_BRAND_SONY


45 
	~"nvøm_ez∑ckë-bønd_s⁄y.h
"

46 #ñi‡
EZP_PROD_BRAND_ALLIS


47 
	~"nvøm_ez∑ckë-bønd_Ælis.h
"

52 #i‡
deföed
(
EZP_PROD_SUPERCAT_X
)

53 #i‡
deföed
(
EZP_PROD_CAT_P
)

54 
	~"P/nvøm_d©a_P.h
"

56 #i‡
deföed
(
EZP_PROD_CAT_K
)

57 
	~"K/nvøm_d©a_K.h
"

59 #i‡
deföed
(
EZP_PROD_CAT_G
)

60 
	~"G/nvøm_d©a_G.h
"

62 #i‡
deföed
(
EZP_PROD_CAT_I
)

63 
	~"I/nvøm_d©a_I.h
"

67 #i‡(
WAN_NUM
 >= 1)

70 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

71 { "w™0_i‚ame", 
WAN0_IFNAME
,

72 
NVRAM_NONE
,

75 { "w™0_devi˚", 
WAN0_DEVICE
,

76 
NVRAM_NONE
,

80 { "w™0_¥Ÿo", 
WAN0_PROTO
,

81 
NVRAM_NONE
,

85 { "w™0_i‚ames", 
WAN0_IFNAMES
,

86 
NVRAM_NONE
,

89 { "w™0_hw«me", 
WAN0_HWNAME
,

90 
NVRAM_NONE
,

93 { "w™0_devi˚_backup", 
WAN0_DEVICE
,

94 
NVRAM_NONE
,

98 
NVRAM_NONE
,

101 { "w™0_p‹ts", 
WAN0_PORTS
,

102 
NVRAM_NONE
,

106 
NVRAM_NONE
,

112 
NVRAM_TEMP
,

116 
NVRAM_TEMP
,

120 
NVRAM_TEMP
,

124 
NVRAM_TEMP
,

128 
NVRAM_TEMP
,

132 
NVRAM_TEMP
,

138 
NVRAM_TEMP
,

142 
NVRAM_TEMP
,

146 
NVRAM_TEMP
,

150 
NVRAM_TEMP
,

154 
NVRAM_TEMP
,

158 
NVRAM_TEMP
,

162 
NVRAM_TEMP
,

166 
NVRAM_TEMP
,

170 
NVRAM_TEMP
,

173 #ifde‡
AXIMDDNS


175 
NVRAM_TEMP
,

181 #i‡(
WAN_NUM
 >= 2)

184 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

185 { "w™1_i‚ame", 
WAN1_IFNAME
,

186 
NVRAM_NONE
,

189 { "w™1_devi˚", 
WAN1_DEVICE
,

190 
NVRAM_NONE
,

194 { "w™1_¥Ÿo", 
WAN1_PROTO
,

195 
NVRAM_NONE
,

199 { "w™1_i‚ames", 
WAN1_IFNAMES
,

200 
NVRAM_NONE
,

203 { "w™1_hw«me", 
WAN1_HWNAME
,

204 
NVRAM_NONE
,

207 { "w™1_devi˚_backup", 
WAN1_DEVICE
,

208 
NVRAM_NONE
,

212 
NVRAM_NONE
,

215 { "w™1_p‹ts", 
WAN1_PORTS
,

216 
NVRAM_NONE
,

220 
NVRAM_NONE
,

226 
NVRAM_TEMP
,

230 
NVRAM_TEMP
,

234 
NVRAM_TEMP
,

238 
NVRAM_TEMP
,

242 
NVRAM_TEMP
,

246 
NVRAM_TEMP
,

252 
NVRAM_TEMP
,

256 
NVRAM_TEMP
,

260 
NVRAM_TEMP
,

264 
NVRAM_TEMP
,

268 
NVRAM_TEMP
,

272 
NVRAM_TEMP
,

277 
NVRAM_TEMP
,

282 
NVRAM_TEMP
,

286 
NVRAM_TEMP
,

290 #i‡(
WAN_NUM
 >= 3)

292 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

293 { "w™2_i‚ame", 
WAN2_IFNAME
,

294 
NVRAM_NONE
,

297 { "w™2_devi˚", 
WAN2_DEVICE
,

298 
NVRAM_NONE
,

302 { "w™2_¥Ÿo", 
WAN2_PROTO
,

303 
NVRAM_NONE
,

307 { "w™2_i‚ames", 
WAN2_IFNAMES
,

308 
NVRAM_NONE
,

311 { "w™2_hw«me", 
WAN2_HWNAME
,

312 
NVRAM_NONE
,

315 { "w™2_devi˚_backup", 
WAN2_DEVICE
,

316 
NVRAM_NONE
,

320 
NVRAM_NONE
,

323 { "w™2_p‹ts", 
WAN2_PORTS
,

324 
NVRAM_NONE
,

328 
NVRAM_NONE
,

334 
NVRAM_TEMP
,

338 
NVRAM_TEMP
,

342 
NVRAM_TEMP
,

346 
NVRAM_TEMP
,

350 
NVRAM_TEMP
,

354 
NVRAM_TEMP
,

360 
NVRAM_TEMP
,

364 
NVRAM_TEMP
,

368 
NVRAM_TEMP
,

372 
NVRAM_TEMP
,

376 
NVRAM_TEMP
,

380 
NVRAM_TEMP
,

385 
NVRAM_TEMP
,

390 
NVRAM_TEMP
,

394 
NVRAM_TEMP
,

398 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

400 { "w™_maö_ruÀ", 
WAN_MAIN_RULE
,

401 
NVRAM_NONE
,

405 #i‡
deföed
(
EZP_SUB_BRAND_GARMIN
)

407 
NVRAM_NONE
,

412 
NVRAM_NONE
,

416 { "w™_bw_ruÀ", 
WAN_BW_RULE
,

417 
NVRAM_NONE
,

420 { "w™_dëe˘_ruÀ", 
WAN_DETECT_RULE
,

421 
NVRAM_NONE
,

425 { "w™_lb_ruÀ", 
WAN_LB_RULE
,

426 
NVRAM_NONE
,

429 #i‡
deföed
(
PLATFORM_ALS
)

430 { "°‹age_devi˚_mou¡_ruÀ", 
STORAGE_DEVICE_MOUNT_RULE
,

431 
NVRAM_NONE
,

435 { "°‹age_devi˚_mou¡_ruÀ", 
STORAGE_DEVICE_MOUNT_RULE
,

436 
NVRAM_NONE
,

440 { "°‹age_devi˚_mou¡_ruÀ_num", 
STORAGE_DEVICE_MOUNT_RULE_NUM
,

441 
NVRAM_NONE
,

444 #i‡
deföed
(
EZP_PROD_BRAND_SONY
)

449 
NVRAM_NONE
,

453 
NVRAM_TEMP
,

456 { "w™_°©us_ruÀ", 
WAN_STATUS_RULE
,

457 
NVRAM_TEMP
,

460 { "v≤_°©us_ruÀ", 
VPN_STATUS_RULE
,

461 
NVRAM_TEMP
,

464 { "mac_£n£_ruÀ", 
MAC_SENSE_RULE
,

465 
NVRAM_NONE
,

468 #i‡
deföed
(
PLATFORM_ALS
)

469 { "fûe_mode_ruÀ", 
FILE_MODE_RULE
,

470 
NVRAM_NONE
,

473 { "ªœy_scheduÀ_ruÀ", 
RELAY_SCHEDULE_RULE
,

474 
NVRAM_NONE
,

477 { "ªœy_ruÀ", 
RELAY_RULE
,

478 
NVRAM_NONE
,

481 { "maû_ruÀ", 
MAIL_RULE
,

482 
NVRAM_NONE
,

485 { "Æs_Áûovî", 
FAILOVER_RULE
,

486 
NVRAM_NONE
,

489 { "Æît_ruÀ", 
ALERT_RULE
,

490 
NVRAM_TEMP
,

494 { "w™_u≤p_°©us_ruÀ", 
WAN_UPNP_STATUS_RULE
,

495 
NVRAM_TEMP
,

500 
NVRAM_TEMP
,

504 { "w™_°©ic_ruÀ", 
WAN_STATIC_RULE
,

505 
NVRAM_NONE
,

508 { "w™_dh˝_ruÀ", 
WAN_DHCP_RULE
,

509 
NVRAM_NONE
,

512 { "w™_µp€_ruÀ", 
WAN_PPPOE_RULE
,

513 
NVRAM_NONE
,

518 { "w™_ww™_ruÀ", 
WAN_WWAN_RULE
,

519 
NVRAM_NONE
,

525 { "w™_b¨ry_ruÀ", 
WAN_BARRY_RULE
,

526 
NVRAM_NONE
,

529 #i‡
deföed
(
PLATFORM_M2E
)

531 { "w™_µç_l2ç_ruÀ_num", 
WAN_PPTP_L2TP_RULE_NUM
,

532 
NVRAM_NONE
,

536 { "w™_µç_l2ç_ruÀ_max", 
WAN_PPTP_L2TP_RULE_MAX
,

537 
NVRAM_NONE
,

541 
NVRAM_NONE
,

545 
NVRAM_TEMP
,

550 { "w™_µç_l2ç_ruÀ", 
WAN_PPTP_L2TP_RULE
,

551 
NVRAM_NONE
,

557 
NVRAM_TEMP
,

560 { "w™_htc_ruÀ", 
WAN_HTC_RULE
,

561 
NVRAM_NONE
,

564 { "w™_ùh⁄e_ruÀ", 
WAN_IPHONE_RULE
,

565 
NVRAM_NONE
,

568 { "w™_be˚em_ruÀ", 
WAN_BECEEM_RULE
,

569 
NVRAM_NONE
,

572 { "w™_wimax_ruÀ", 
WAN_WIMAX_RULE
,

573 
NVRAM_NONE
,

576 { "w™_ww™_¥obe_ruÀ", 
WAN_WWAN_PROBE_RULE
,

577 
NVRAM_TEMP
,

583 
NVRAM_TEMP
,

586 { "w™_bigp⁄d_ruÀ", 
WAN_BIGPOND_RULE
,

587 
NVRAM_NONE
,

592 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

596 { "w™_hwaddr_˛⁄e_ruÀ", 
WAN_HWADDR_CLONE_RULE
,

597 
NVRAM_NONE
,

601 { "w™_ddns_ruÀ", 
WAN_DDNS_RULE
,

602 
NVRAM_NONE
,

606 { "w™_≠∂e_fûãr_ruÀ", 
WAN_APPLE_FILTER_RULE
,

607 
NVRAM_NONE
,

612 { "w™_›ídns_ruÀ", 
WAN_OPENDNS_RULE
,

613 
NVRAM_NONE
,

616 { "œn_num", 
x°r
(
LAN_NUM
),

617 
NVRAM_NONE
,

620 #i‡
LAN_NUM
 >= 1

624 { "œn0_i‚ame", 
LAN0_IFNAME
,

625 
NVRAM_NONE
,

628 { "œn0_i‚ames", 
LAN0_IFNAMES
,

629 
NVRAM_NONE
,

632 { "œn0_hw«me", 
LAN0_HWNAME
,

633 
NVRAM_NONE
,

636 { "œn0_devi˚", 
LAN0_DEVICE
,

637 
NVRAM_NONE
,

641 
NVRAM_PROTECTED
,

644 { "œn0_p‹ts", 
LAN0_PORTS
,

645 
NVRAM_NONE
,

651 
NVRAM_TEMP
,

655 
NVRAM_TEMP
,

659 
NVRAM_TEMP
,

663 
NVRAM_TEMP
,

667 
NVRAM_TEMP
,

671 
NVRAM_TEMP
,

674 #ifde‡
CONFIG_EZP_ARCH_RT305X


675 { "vœn_ruÀ", 
VLAN_RULE
,

676 
NVRAM_NONE
,

679 { "vœn_ruÀ_num", 
x°r
(
VLAN_RULE_NUM
),

680 
NVRAM_NONE
,

683 { "vœn_ruÀ_max", 
x°r
(
VLAN_RULE_MAX
),

684 
NVRAM_NONE
,

687 { "vœ≈‹t_ruÀ", 
VLANPORT_RULE
,

688 
NVRAM_NONE
,

691 { "vœ≈‹t_ruÀ_num", 
x°r
(
VLANPORT_RULE_NUM
),

692 
NVRAM_NONE
,

695 { "vœ≈‹t_ruÀ_max", 
x°r
(
VLANPORT_RULE_MAX
),

696 
NVRAM_NONE
,

699 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

700 { "br_ruÀ", 
BR_RULE
,

701 
NVRAM_NONE
,

705 { "br_ruÀ_num", 
x°r
(
BR_RULE_NUM
),

706 
NVRAM_NONE
,

709 { "br_ruÀ_max", 
x°r
(
BR_RULE_MAX
),

710 
NVRAM_NONE
,

713 
NVRAM_EZPACKET_DEFAULT_RT305X_LAN_NUM_1


714 
NVRAM_EZPACKET_DEFAULT_RT305X_WAN_NUM_1


715 #i‡(
WAN_NUM
 == 2)

716 
NVRAM_EZPACKET_DEFAULT_RT305X_WAN_NUM_2


720 #ifde‡
CONFIG_EZP_ARCH_BRCM


721 
NVRAM_EZPACKET_DEFAULT_BRCM_LAN_NUM_1


722 
NVRAM_EZPACKET_DEFAULT_BRCM_WAN_NUM_1


723 #i‡(
WAN_NUM
 == 2)

724 
NVRAM_EZPACKET_DEFAULT_BRCM_WAN_NUM_2


729 #ifde‡
CONFIG_EZP_ARCH_AS500


730 
NVRAM_EZPACKET_DEFAULT_AS500_LAN_NUM_1


731 
NVRAM_EZPACKET_DEFAULT_AS500_WAN_NUM_1


732 #i‡(
WAN_NUM
 == 2)

733 
NVRAM_EZPACKET_DEFAULT_AS500_WAN_NUM_2


735 
NVRAM_EZPACKET_DEFAULT_AS500_SWAP


736 
NVRAM_EZPACKET_DEFAULT_AS500_INITD


739 { "œn_maö_ruÀ", 
LAN_MAIN_RULE
,

740 
NVRAM_NONE
,

744 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

747 { "œn_°©ic_ruÀ_deÁu…", 
LAN_STATIC_RULE_DEFAULT
,

748 
NVRAM_NONE
,

751 { "gue°_œn_ruÀ", 
GUEST_LAN_RULE
,

752 
NVRAM_NONE
,

756 
NVRAM_DEFAULT
,

759 { "œn_°©us_ruÀ", 
LAN_STATUS_RULE
,

760 
NVRAM_TEMP
,

764 { "œn_dh˝s_ruÀ", 
LAN_DHCPS_RULE
,

765 
NVRAM_NONE
,

770 { "œn_hwaddr_˛⁄e_ruÀ", 
LAN_HWADDR_CLONE_RULE
,

771 
NVRAM_NONE
,

777 
NVRAM_NONE
,

780 
NVRAM_NONE
,

786 { "dbm_max", 
DBM_MAX
,

787 
NVRAM_NONE
,

790 
NVRAM_NONE
,

793 
NVRAM_NONE
,

796 
NVRAM_NONE
,

799 #i‡ 
deföed
(
EZP_PROD_BRAND_ZYUS
)

804 
NVRAM_NONE
,

808 #i‡
deföed
(
EZP_PROD_BRAND_ZYUS
Ë|| !deföed(
TURBONAT
)

813 
NVRAM_NONE
,

818 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

819 #ifde‡
EZP_SUB_BRAND_APOLLO


824 #ñi‡
deföed
(
EZP_PROD_BRAND_MYMO
)

826 #ñi‡
deföed
(
EZP_SUB_BRAND_RFLINK
)

831 
NVRAM_NONE
,

836 
NVRAM_NONE
,

840 { "bw_íabÀ", 
BW_ENABLE
,

841 
NVRAM_NONE
,

846 
NVRAM_NONE
,

849 
	#BW_GROUP_RULE
 "group1^1^10^100^|group2^1^10^100^|group3^1^10^100^|group4^1^10^100^"

	)

850 
	#BW_GROUP_RULE_NUM
 4

	)

851 
	#BW_GROUP_RULE_MAX
 4

	)

852 { "bw_group_ruÀ", 
BW_GROUP_RULE
,

853 
NVRAM_NONE
,

856 { "bw_group_ruÀ_num", 
x°r
(
BW_GROUP_RULE_NUM
),

857 
NVRAM_NONE
,

860 { "bw_group_ruÀ_max", 
x°r
(
BW_GROUP_RULE_MAX
),

861 
NVRAM_NONE
,

864 { "bw_sbm_ruÀ", 
BW_SBM_RULE
,

865 
NVRAM_NONE
,

870 { "bw_sbm_ruÀ_num", 
BW_SBM_RULE_NUM
,

871 
NVRAM_NONE
,

874 { "bw_sbm_ruÀ_max", 
BW_SBM_RULE_MAX
,

875 
NVRAM_NONE
,

879 
NVRAM_NONE
,

882 { "bw_dbm_ruÀ", 
BW_DBM_RULE
,

883 
NVRAM_NONE
,

886 { "bw_dbm_ruÀ_num", 
BW_DBM_RULE_NUM
,

887 
NVRAM_NONE
,

890 { "bw_dbm_ruÀ_max", 
BW_DBM_RULE_MAX
,

891 
NVRAM_NONE
,

895 
NVRAM_NONE
,

900 
NVRAM_NONE
,

903 { "π_ruÀ", 
RT_RULE
,

904 
NVRAM_EMPTY
,

909 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

914 
NVRAM_NONE
,

917 { "π_ruÀ_max", 
RT_RULE_MAX
,

918 
NVRAM_NONE
,

924 
NVRAM_NONE
,

929 
NVRAM_EMPTY
,

933 
NVRAM_EMPTY
,

937 #i‡
deföed
(
EZP_PROD_BRAND_PROX
Ë|| deföed(
PLATFORM_ALS
)

942 
NVRAM_EMPTY
,

946 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

951 
NVRAM_EMPTY
,

954 { "wf_ruÀ_max", 
WF_RULE_MAX
,

955 
NVRAM_EMPTY
,

960 
NVRAM_NONE
,

964 
NVRAM_NONE
,

967 { "sched_ruÀ_max", 
SCHED_RULE_MAX
,

968 
NVRAM_NONE
,

974 
NVRAM_NONE
,

979 
NVRAM_NONE
,

984 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

986 #ñi‡
deföed
(
EZP_PROD_BRAND_SONY
)

988 #ñi‡
deföed
(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_M2E
Ë|| deföed(
PLATFORM_ALS
)

993 
NVRAM_NONE
,

997 #i‡
deföed
(
EZP_PROD_BRAND_SONY
)

999 
NVRAM_NONE
,

1002 #ñi‡
deföed
(
PLATFORM_M2E
)

1004 
NVRAM_NONE
,

1007 #ñi‡
deföed
(
PLATFORM_AXA
)

1009 
NVRAM_NONE
,

1014 
NVRAM_NONE
,

1019 
NVRAM_NONE
,

1023 
NVRAM_TEMP
,

1027 
NVRAM_TEMP
,

1031 
NVRAM_NONE
,

1035 
NVRAM_NONE
,

1038 #i‡
deföed
(
EZP_PROD_BRAND_MYMO
)

1040 #ñi‡
deföed
(
PLATFORM_AXA
)

1042 #ñi‡
deföed
(
PLATFORM_M2E
)

1047 
NVRAM_NONE
,

1052 
NVRAM_NONE
,

1055 { "bt_t‹ª¡_max", 
BT_TORRENT_MAX
,

1056 
NVRAM_NONE
,

1060 { "·pd_ruÀ", 
FTPD_RULE
,

1061 
NVRAM_NONE
,

1064 { "·pd_u£r_ruÀ", 
FTPD_USER_RULE
,

1065 
NVRAM_NONE
,

1068 { "·pd_u£r_ruÀ_num", 
FTPD_USER_RULE_NUM
,

1069 
NVRAM_NONE
,

1072 { "·pd_u£r_ruÀ_max", 
FTPD_USER_RULE_MAX
,

1073 
NVRAM_NONE
,

1078 
NVRAM_NONE
,

1083 
NVRAM_NONE
,

1087 #i‡
deföed
 (
PLATFORM_M2E
)

1089 
NVRAM_NONE
,

1093 
NVRAM_NONE
,

1097 
NVRAM_TEMP
,

1101 
NVRAM_TEMP
,

1105 
NVRAM_NONE
,

1109 
NVRAM_TEMP
,

1112 #ifde‡
QFILE_CGI


1114 
NVRAM_NONE
,

1118 
NVRAM_NONE
,

1124 
NVRAM_NONE
,

1128 
NVRAM_NONE
,

1132 
NVRAM_TEMP
,

1136 
NVRAM_TEMP
,

1143 { "is_ruÀ", 
IS_RULE
,

1144 
NVRAM_NONE
,

1149 
NVRAM_NONE
,

1154 
NVRAM_EMPTY
,

1158 
NVRAM_NONE
,

1161 { "isho°_ruÀ_max", 
ISHOST_RULE_MAX
,

1162 
NVRAM_NONE
,

1167 
NVRAM_NONE
,

1172 
NVRAM_EMPTY
,

1176 
NVRAM_NONE
,

1179 { "isu£r_ruÀ_max", 
ISUSER_RULE_MAX
,

1180 
NVRAM_NONE
,

1184 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

1186 { "≠pmgr_ruÀ", 
x°r
(
APPMBG_RULE
),

1187 
NVRAM_NONE
,

1195 
NVRAM_NONE
,

1199 
	#LOG_RULE
 "sy¶og^1^^0^1^1^1^1^1^1^1^1^1^1^1^0^^udp^514"

	)

1201 { "log_ruÀ", 
LOG_RULE
,

1202 
NVRAM_NONE
,

1209 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

1211 
NVRAM_NONE
,

1216 
NVRAM_NONE
,

1224 
NVRAM_NONE
,

1228 
NVRAM_NONE
,

1231 { "Ê_ruÀ", 
FL_RULE
,

1232 
NVRAM_EMPTY
,

1239 { "Ê_ruÀ_num", 
FL_RULE_NUM
,

1240 
NVRAM_NONE
,

1243 { "Ê_ruÀ_max", 
FL_RULE_MAX
,

1244 
NVRAM_NONE
,

1249 
NVRAM_NONE
,

1252 #i‡
deföed
(
PLATFORM_ALS
)

1254 
NVRAM_NONE
,

1260 
NVRAM_NONE
,

1266 
NVRAM_NONE
,

1269 { "Ê_hwaddr_ruÀ_max", 
FL_HWADDR_RULE_MAX
,

1270 
NVRAM_NONE
,

1274 
NVRAM_NONE
,

1278 
NVRAM_TEMP
,

1286 
NVRAM_TEMP
,

1289 { "˙¡_ruÀ", 
CNNT_RULE
,

1290 
NVRAM_NONE
,

1293 { "˙¡_ruÀ_num", 
CNNT_RULE_NUM
,

1294 
NVRAM_NONE
,

1297 { "˙¡_ruÀ_max", 
CNNT_RULE_MAX
,

1298 
NVRAM_NONE
,

1303 
NVRAM_NONE
,

1306 { "‰_ruÀ", 
FR_RULE
,

1307 
NVRAM_EMPTY
,

1311 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

1312 #ifde‡
EZP_SUB_BRAND_APOLLO


1320 
NVRAM_NONE
,

1323 { "‰_ruÀ_max", 
FR_RULE_MAX
,

1324 
NVRAM_NONE
,

1327 { "‰_dmz_ruÀ", 
FR_DMZ_RULE
,

1328 
NVRAM_NONE
,

1331 { "wiz¨d_ruÀ", 
WIZARD_RULE
,

1332 
NVRAM_NONE
,

1337 #i‡
deföed
(
EZP_PROD_BRAND_PROX
)

1342 
NVRAM_NONE
,

1346 
NVRAM_NONE
,

1350 
NVRAM_NONE
,

1353 { "vs_ruÀ_max", 
VS_RULE_MAX
,

1354 
NVRAM_NONE
,

1358 { "wl_num", 
x°r
(
WL_NUM
),

1359 
NVRAM_NONE
,

1364 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

1368 
NVRAM_DEFAULT
,

1371 { "wl_cou¡rycode_deÁu…", 
WL_COUNTRY_CODE
,

1372 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

1376 
NVRAM_DEFAULT
,

1379 { "wl_ªgi⁄ab™d_deÁu…", 
WL_REGION_ABAND
,

1380 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

1384 
NVRAM_DEFAULT
,

1388 { "wl_ruÀ_num", 
x°r
(
WL_NUM
),

1389 
NVRAM_NONE
,

1392 { "wl_ruÀ_max", 
x°r
(
WL_NUM
),

1393 
NVRAM_NONE
,

1397 { "wlv_ruÀ_num", 
x°r
(
WL0_RULE_NUM
) ,

1398 
NVRAM_NONE
,

1401 { "wlv_ruÀ_max", 
x°r
(
WL0_RULE_MAX
),

1402 
NVRAM_NONE
,

1405 { "wl_basic_ruÀ", 
WL_BASIC_RULE
,

1406 
NVRAM_NONE
,

1409 { "wl_adv™˚d_ruÀ", 
WL_ADVANCED_RULE
,

1410 
NVRAM_NONE
,

1435 { "wl_wds_ruÀ", 
WL_WDS_RULE
,

1436 
NVRAM_NONE
,

1439 { "wl_wme_ruÀ", 
WL_WME_RULE
,

1440 
NVRAM_NONE
,

1443 { "wl_wps_ruÀ", 
WL_WPS_RULE
,

1444 
NVRAM_NONE
,

1448 { "wl_wps_°a_ruÀ", 
WL_WPS_STA_RULE
,

1449 
NVRAM_NONE
, 0

1452 { "wl0_basic_ruÀ", 
WL0_BASIC_RULE
,

1453 
NVRAM_NONE
,

1456 { "wl0_i‚ame_ruÀ", 
WL0_IFNAME_RULE
,

1457 
NVRAM_NONE
,

1460 { "wl0_ssid_ruÀ_deÁu…", 
WL0_SSID_RULE
,

1461 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

1465 
NVRAM_DEFAULT
,

1468 { "wl0_£c_ruÀ", 
WL0_SEC_RULE
,

1469 
NVRAM_NONE
,

1472 { "wl0_£c_wï_ruÀ", 
WL0_SEC_WEP_RULE
,

1473 
NVRAM_NONE
,

1477 { "wl0_£c_w∑_ruÀ", 
WL0_SEC_WPA_RULE
,

1478 
NVRAM_NONE
,

1482 { "wl0_£c_w∑2_ruÀ", 
WL0_SEC_WPA2_RULE
,

1483 
NVRAM_NONE
,

1488 #i‡(
WL0_RULE_MAX
 >= 1)

1489 { "wl00_a˛_basic_ruÀ", 
WL_ACL_BASIC_RULE
,

1490 
NVRAM_NONE
,

1494 
NVRAM_NONE
,

1497 { "wl00_a˛_max", 
x°r
(
WL_ACL_MAX
),

1498 
NVRAM_NONE
,

1502 
NVRAM_NONE
,

1505 #i‡(
WL0_RULE_MAX
 >= 2)

1506 { "wl01_a˛_basic_ruÀ", 
WL_ACL_BASIC_RULE
,

1507 
NVRAM_NONE
,

1511 
NVRAM_NONE
,

1514 { "wl01_a˛_max", 
x°r
(
WL_ACL_MAX
),

1515 
NVRAM_NONE
,

1519 
NVRAM_NONE
,

1522 #i‡(
WL0_RULE_MAX
 >= 4)

1523 { "wl02_a˛_basic_ruÀ", 
WL_ACL_BASIC_RULE
,

1524 
NVRAM_NONE
,

1528 
NVRAM_NONE
,

1531 { "wl02_a˛_max", 
x°r
(
WL_ACL_MAX
),

1532 
NVRAM_NONE
,

1536 
NVRAM_NONE
,

1539 { "wl03_a˛_basic_ruÀ", 
WL_ACL_BASIC_RULE
,

1540 
NVRAM_NONE
,

1544 
NVRAM_NONE
,

1547 { "wl03_a˛_max", 
x°r
(
WL_ACL_MAX
),

1548 
NVRAM_NONE
,

1552 
NVRAM_NONE
,

1560 
NVRAM_NONE
,

1564 
NVRAM_NONE
,

1568 
NVRAM_NONE
,

1572 
NVRAM_NONE
,

1576 
NVRAM_NONE
,

1579 #i‡–
WL_NUM
 >= 2 )

1580 { "wl1_basic_ruÀ", 
WL1_BASIC_RULE
,

1581 
NVRAM_NONE
,

1584 { "wl1_i‚ame_ruÀ", 
WL1_IFNAME_RULE
,

1585 
NVRAM_NONE
,

1588 { "wl1_ssid_ruÀ", 
WL1_SSID_RULE
,

1589 
NVRAM_NONE
,

1592 { "wl1_£c_ruÀ", 
WL1_SEC_RULE
,

1593 
NVRAM_NONE
,

1596 { "wl1_£c_wï_ruÀ", 
WL1_SEC_WEP_RULE
,

1597 
NVRAM_NONE
,

1601 { "wl1_£c_w∑_ruÀ", 
WL1_SEC_WPA_RULE
,

1602 
NVRAM_NONE
,

1606 { "wl1_£c_w∑2_ruÀ", 
WL1_SEC_WPA2_RULE
,

1607 
NVRAM_NONE
,

1612 
NVRAM_NONE
,

1616 
NVRAM_NONE
,

1620 
NVRAM_NONE
,

1624 
NVRAM_NONE
,

1628 
NVRAM_NONE
,

1633 { "wl0_wds_ruÀ_num", 
x°r
(
WDS_RULE_MAX
),

1634 
NVRAM_NONE
,

1637 { "wl0_wds_ruÀ_max", 
x°r
(
WDS_RULE_MAX
),

1638 
NVRAM_NONE
,

1641 { "wl0_wds_basic_ruÀ", 
WL0_WDS_BASIC_RULE
,

1642 
NVRAM_NONE
,

1646 
NVRAM_NONE
,

1650 
NVRAM_NONE
,

1654 { "wl0_≠˛i_ruÀ_num", 
x°r
(
APCLI_RULE_MAX
),

1655 
NVRAM_NONE
,

1658 { "wl0_≠˛i_ruÀ_max", 
x°r
(
APCLI_RULE_MAX
),

1659 
NVRAM_NONE
,

1662 { "wl0_≠˛i_ruÀ", 
WL0_APCLI_RULE
,

1663 
NVRAM_NONE
,

1666 { "wl0_≠˛i_£c_wï_ruÀ", 
WL0_APCLI_SEC_WEP_RULE
,

1667 
NVRAM_NONE
,

1670 { "wl0_≠˛i_£c_w∑_ruÀ", 
WL0_APCLI_SEC_WPA_RULE
,

1671 
NVRAM_NONE
,

1674 { "wl0_≠˛i_£c_w∑2_ruÀ", 
WL0_APCLI_SEC_WPA2_RULE
,

1675 
NVRAM_NONE
,

1678 #i‡
deföed
(
EZP_PROD_BRAND_SONY
Ë|| deföed(
EZP_SUB_BRAND_GARMIN
Ë|| deföed(
PLATFORM_AXA
Ë||deföed(
PLATFORM_AXM
Ë|| deföed(
PLATFORM_M2E
Ë|| deföed(
PLATFORM_ALS
)

1683 
NVRAM_NONE
,

1687 
NVRAM_NONE
,

1690 { "wl0_≠˛i_sw≠_ruÀ", 
WL0_APCLI_RULE
"|"WL0_APCLI_RULE"|"WL0_APCLI_RULE"|"WL0_APCLI_RULE"|"WL0_APCLI_RULE"|"WL0_APCLI_RULE,

1691 
NVRAM_NONE
,

1694 { "wl0_≠˛i_sw≠_£c_wï_ruÀ", 
WL0_APCLI_SEC_WEP_RULE
"|"WL0_APCLI_SEC_WEP_RULE"|"WL0_APCLI_SEC_WEP_RULE"|"WL0_APCLI_SEC_WEP_RULE"|"WL0_APCLI_SEC_WEP_RULE"|"WL0_APCLI_SEC_WEP_RULE,

1695 
NVRAM_NONE
,

1698 { "wl0_≠˛i_sw≠_£c_w∑_ruÀ", 
WL0_APCLI_SEC_WPA_RULE
"|"WL0_APCLI_SEC_WPA_RULE"|"WL0_APCLI_SEC_WPA_RULE"|"WL0_APCLI_SEC_WPA_RULE"|"WL0_APCLI_SEC_WPA_RULE"|"WL0_APCLI_SEC_WPA_RULE,

1699 
NVRAM_NONE
,

1702 { "wl0_≠˛i_sw≠_£c_w∑2_ruÀ", 
WL0_APCLI_SEC_WPA2_RULE
"|"WL0_APCLI_SEC_WPA2_RULE"|"WL0_APCLI_SEC_WPA2_RULE"|"WL0_APCLI_SEC_WPA2_RULE"|"WL0_APCLI_SEC_WPA2_RULE"|"WL0_APCLI_SEC_WPA2_RULE,

1703 
NVRAM_NONE
,

1706 #i‡–
WL_NUM
 >= 2 )

1707 { "wl1_wds_ruÀ_num", 
x°r
(
WDS_RULE_MAX
),

1708 
NVRAM_NONE
,

1711 { "wl1_wds_ruÀ_max", 
x°r
(
WDS_RULE_MAX
),

1712 
NVRAM_NONE
,

1716 
NVRAM_NONE
,

1720 
NVRAM_NONE
,

1724 
NVRAM_NONE
,

1728 { "wl1_≠˛i_ruÀ_num", 
x°r
(
APCLI_RULE_MAX
),

1729 
NVRAM_NONE
,

1732 { "wl1_≠˛i_ruÀ_max", 
x°r
(
APCLI_RULE_MAX
),

1733 
NVRAM_NONE
,

1736 { "wl1_≠˛i_ruÀ", 
WL1_APCLI_RULE
,

1737 
NVRAM_NONE
,

1740 { "wl1_≠˛i_£c_wï_ruÀ", 
WL1_APCLI_SEC_WEP_RULE
,

1741 
NVRAM_NONE
,

1744 { "wl1_≠˛i_£c_w∑_ruÀ", 
WL1_APCLI_SEC_WPA_RULE
,

1745 
NVRAM_NONE
,

1748 { "wl1_≠˛i_£c_w∑2_ruÀ", 
WL1_APCLI_SEC_WPA2_RULE
,

1749 
NVRAM_NONE
,

1756 
NVRAM_NONE
,

1760 
NVRAM_NONE
,

1764 
NVRAM_NONE
,

1767 { "auth_£rvî_ruÀ", "10.1.1.230^3990^/www/wñcome.html^/www/°©us.html^/www/goodbye.html^"
LAN_IPADDR_MASK
"253^auto^10.1.1.254^0^10.1.1.230^1812^1813^radiussecret^mynas^MySpot^MySpot^^/etc/chilli/localusers",

1768 
NVRAM_NONE
,

1773 
NVRAM_NONE
,

1777 
NVRAM_NONE
,

1781 
NVRAM_NONE
,

1785 
NVRAM_NONE
,

1790 
NVRAM_NONE
,

1795 
NVRAM_NONE
,

1801 
NVRAM_NONE
,

1806 
NVRAM_NONE
,

1812 
NVRAM_NONE
,

1818 
NVRAM_NONE
,

1823 { "˘_max", 
CT_MAX
,

1824 
NVRAM_NONE
,

1828 #i‡
deföed
(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_AXM
Ë|| deföed(
PLATFORM_M2E
)

1833 
NVRAM_NONE
,

1837 #ifde‡
EZP_SUB_BRAND_GARMIN


1839 #ñi‡
EZP_PROD_BRAND_ZYUS


1840 #ifde‡
EZP_SUB_BRAND_FEENEY


1845 #ñi‡
deföed
(
EZP_PROD_BRAND_PLANET
)

1847 #ñi‡
deföed
 
EZP_PROD_BRAND_PROX


1848 #ifde‡
EZP_SUB_BRAND_APOLLO


1853 #ñi‡
deföed
(
PLATFORM_AXM
)

1855 #ñi‡
deföed
(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_M2E
)

1860 
NVRAM_NONE
,

1864 
NVRAM_DEFAULT
,

1867 { "hâp_ªdúe˘_ruÀ", 
HTTP_REDIRECT_DEFAULT
,

1868 
NVRAM_NONE
,

1872 
NVRAM_TEMP
,

1876 { "di•œy_ruÀ", 
x°r
(
HTTPD_DISPLAY
),

1877 
NVRAM_NONE
,

1880 
	#APP_ENABLE_RULE
 "1^0^1"

	)

1882 { "≠p_íabÀ_ruÀ", 
APP_ENABLE_RULE
,

1883 
NVRAM_NONE
,

1886 #i‡
deföed
(
PLATFORM_ALS
)

1888 
NVRAM_NONE
,

1893 
NVRAM_NONE
,

1897 { "°©s_ruÀ", 
STATS_RULE
,

1898 
NVRAM_NONE
,

1902 
NVRAM_TEMP
,

1906 
NVRAM_TEMP
,

1910 
NVRAM_TEMP
,

1914 
NVRAM_TEMP
,

1918 
NVRAM_NONE
,

1922 
NVRAM_NONE
,

1926 
NVRAM_NONE
,

1929 { "vnc_£ssi⁄_max", 
VNC_SESSION_MAX
,

1930 
NVRAM_NONE
,

1933 { "l2çd_ruÀ", "0^l2ç-£rvî^1400^1400^192.168.48.1^" 
x°r
(
L2TPD_SESSION_MAX
) "^192.168.49.1^" xstr(L2TPD_SESSION_MAX) "^1^^1^0^1^1",

1934 
NVRAM_NONE
,

1938 
NVRAM_NONE
,

1942 
NVRAM_NONE
,

1945 { "l2çd_u£r_ruÀ_max", 
L2TPD_USER_RULE_MAX
,

1946 
NVRAM_NONE
,

1950 
NVRAM_NONE
,

1953 { "ù£c_ruÀ_max", 
IPSEC_RULE_MAX
,

1954 
NVRAM_NONE
,

1958 
NVRAM_NONE
,

1962 
NVRAM_NONE
,

1971 
NVRAM_TEMP
,

1974 #ifde‡
EZP_PROD_BRAND_PROX


1976 
NVRAM_TEMP
,

1980 { "µçd_ruÀ", "0^µç-£rvî^60^1482^1482^192.168.38.1^" 
x°r
(
PPTPD_SESSION_MAX
) "^192.168.39.1^" xstr(PPTPD_SESSION_MAX) "^1^^0^0^1^0^0^1^0^1",

1981 
NVRAM_NONE
,

1985 
NVRAM_NONE
,

1989 
NVRAM_NONE
,

1992 { "µçd_u£r_ruÀ_max", 
PPTPD_USER_RULE_MAX
,

1993 
NVRAM_NONE
,

1996 { "µçd_£ssi⁄_max", 
x°r
(
PPTPD_SESSION_MAX
),

1997 
NVRAM_NONE
,

2001 
NVRAM_NONE
,

2005 
NVRAM_DEFAULT
,

2009 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2013 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2017 #i‡!
deföed
(
EZP_PROD_BRAND_PROX
Ë&& !deföed(
EZP_PROD_BRAND_MYMO
Ë&& !deföed(
EZP_PROD_BRAND_SONY
)

2018 #i‡
deföed
(
PLATFORM_M2E
)

2020 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2023 #ñi‡
deföed
(
PLATFORM_ALS
)

2025 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2030 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2036 { "¥od_su≥rˇt", 
x°r
(
EZP_PROD_SUPERCAT
),

2037 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2041 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

2042 { "¥od_ˇt", 
x°r
(
EZP_PROD_CAT
),

2043 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2047 { "¥od_ˇt", 
x°r
(
EZP_PROD_CAT
),

2048 
NVRAM_NONE
,

2053 { "¥od_subˇt", 
x°r
(
EZP_PROD_SUBCAT
),

2054 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2057 { "¥od_subsubˇt", 
x°r
(
EZP_PROD_SUBSUBCAT
),

2058 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2061 { "x_mode_d©a", 
X_MODE_DATA
,

2062 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2065 #i‡
deföed
(
PLATFORM_ALS
)

2067 
NVRAM_NONE
,

2072 
NVRAM_NONE
,

2077 
NVRAM_NONE
,

2080 { "swôch_ty≥", 
x°r
(
SWITCH
),

2081 
NVRAM_PROTECTED
,

2084 { "ddns_id_ruÀ", 
x°r
(
DDNS
),

2085 
NVRAM_PROTECTED
,

2088 { "ddns_∑ssw‹d_ruÀ", 
x°r
(
DDNS
),

2089 
NVRAM_PROTECTED
,

2092 { "∂©f‹m", 
x°r
(
PLATFORM
),

2093 
NVRAM_NONE
,

2096 #i‡
deföed
(
PLATFORM_ALS
)

2097 { "Æs_b©ãry_ruÀ", 
ALS_BATTERY_RULE
,

2098 
NVRAM_TEMP
,

2101 { "Æs_°©us_ruÀ", 
ALS_STATUS_RULE
,

2102 
NVRAM_TEMP
,

2105 { "Æs_£rül_ruÀ", 
ALS_SERAIL_RULE
,

2106 
NVRAM_NONE
,

2109 { "Æs_›î©ög_ruÀ", 
ALS_OPERATING_RULE
,

2110 
NVRAM_NONE
,

2113 { "Æs_›î©ög_d©a_∑ckög_ruÀ", 
ALS_OPERATING_DATA_PACKING_RULE
,

2114 
NVRAM_NONE
,

2117 { "Æs_›î©ög_›ti⁄_ruÀ", 
ALS_OPERATING_OPTION_RULE
,

2118 
NVRAM_NONE
,

2123 #ifde‡
LAN_AUTOIP_SWITCH


2124 { "ù_swôch_ruÀ_num", 
IP_SWITCH_RULE_NUM
,

2125 
NVRAM_NONE
,

2129 { "ù_swôch_ruÀ", 
IP_SWITCH_RULE
,

2130 
NVRAM_NONE
,

2134 #i‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
Ë|| deföed (
PLATFORM_ALS
)

2135 
	#PORTCFG_RULE
 "œn^1^LAN^1111101^0000001|w™^1^WAN^1111001^0000101"

	)

2136 
	#PORTCFG_RULE_NUM
 2

	)

2138 
	#PORTCFG_RULE
 "œn^1^LAN^1111001^0000101|w™^1^WAN^0000001^1111101"

	)

2139 
	#PORTCFG_RULE_NUM
 2

	)

2142 #i‡
deföed
(
EZP_SUB_BRAND_GARMIN
)

2143 
	#WAN_RPIORITY_RULE
 "dh˝|ww™|wi•"

	)

2145 
	#WAN_RPIORITY_RULE
 ""

	)

2148 { "w™_¥i‹ôy_ruÀ", 
WAN_RPIORITY_RULE
,

2149 
NVRAM_TEMP
,

2153 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2156 { "mfg_ã°_ªsu…_ruÀ", 
MFG_TEST_RESULT_RULE
,

2157 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2160 #i‡
deföed
 (
PLATFORM_GMA
)

2161 { "WISP_dëe˘_p‹èl_ruÀ", 
WISP_DETECT_PORTAL_RULE
,

2162 
NVRAM_TEMP
,

2168 
NVRAM_TEMP
,

2173 
NVRAM_TEMP
,

2178 
NVRAM_TEMP
,

2184 
NVRAM_TEMP
,

2189 
NVRAM_TEMP
,

2194 
NVRAM_TEMP
,

2200 
NVRAM_TEMP
,

2205 
NVRAM_TEMP
,

2210 
NVRAM_TEMP
,

2215 { "p‹tcfg_ruÀ", 
PORTCFG_RULE
,

2216 
NVRAM_NONE
,

2219 { "p‹tcfg_ruÀ_num", 
x°r
(
PORTCFG_RULE_NUM
),

2220 
NVRAM_NONE
,

2224 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2227 { "¨ch", 
ARCH
,

2228 
NVRAM_PROTECTED
,

2232 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2236 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2240 
NVRAM_PROTECTED
 | 
NVRAM_CUSTOMIZED
,

2243 { "igmp_¥oxy_ruÀ", 
IGMP_PROXY_ENABLE
,

2244 
NVRAM_NONE
,

2248 
NVRAM_TEMP
,

2252 
NVRAM_NONE
,

2255 { "ˇrd_ªadî_h¨dw¨e_ruÀ_max", 
CARD_READER_HARDWARE_RULE_MAX
,

2256 
NVRAM_NONE
,

2259 { "ˇrd_ªadî_h¨dw¨e_ruÀ_num", 
CARD_READER_HARDWARE_RULE_NUM
,

2260 
NVRAM_NONE
,

2263 { "ˇrd_ªadî_h¨dw¨e_ruÀ", 
CARD_READER_HARDWARE_RULE
,

2264 
NVRAM_TEMP
,

2267 #i‡
deföed
 (
PLATFORM_M2E
)

2269 
NVRAM_TEMP
,

2273 
NVRAM_TEMP
,

2281 
NVRAM_TEMP
,

2291 
NVRAM_NONE
,

2296 
NVRAM_NONE
,

2299 #i‡
deföed
 (
PLATFORM_M2E
Ë|| deföed (
PLATFORM_ALS
)

2301 
NVRAM_NONE
,

2305 
NVRAM_NONE
,

2310 
NVRAM_NONE
,

2315 
NVRAM_TEMP
,

2329 #ifde‡
AXIMDDNS


2331 
NVRAM_NONE
,

2336 { "√t°©_ruÀ", 
NETSTAT_RULE
,

2337 
NVRAM_NONE
,

	@nvram_ezpacket-app.h

1 #i‚de‡
NVRAM_EZPACKET_APP_H


2 
	#NVRAM_EZPACKET_APP_H


	)

3 #i‡(
WL_NUM
 == 0)

4 
	#APPMGR_WLAN
 0

	)

6 
	#APPMGR_WLAN
 1

	)

9 #i‡
deföed
(
EZP_PROD_CAT_A
)

10 #i‡
deföed
(
EZP_PROD_BRAND_ZYUS
)

11 
	#APPMGR_ISCSI
 0

	)

12 
	#APPMGR_PPTP
 1

	)

13 
	#APPMGR_L2TP
 1

	)

14 
	#APPMGR_IPSEC
 1

	)

15 
	#APPMGR_STORAGE
 0

	)

16 
	#APPMGR_WWAN
 1

	)

17 
	#APPMGR_WISP
 0

	)

18 
	#APPMGR_PORTCFG
 0

	)

19 
	#APPMGR_HWNAT
 1

	)

20 
	#APPMGR_IPHONE
 0

	)

21 
	#APPMGR_BARRY
 0

	)

22 
	#APPMGR_SMART
 0

	)

23 
	#APPMGR_WIMAX
 0

	)

24 
	#APPMGR_BECEEM
 0

	)

26 
	#APPMGR_ISCSI
 0

	)

27 
	#APPMGR_PPTP
 1

	)

28 
	#APPMGR_L2TP
 1

	)

29 
	#APPMGR_IPSEC
 1

	)

30 
	#APPMGR_STORAGE
 0

	)

31 
	#APPMGR_WWAN
 1

	)

32 #i‡
deföed
(
EZP_PROD_SUBSUBCAT_W
)

33 
	#APPMGR_WISP
 1

	)

34 
	#APPMGR_HWNAT
 1

	)

36 
	#APPMGR_WISP
 0

	)

37 
	#APPMGR_HWNAT
 0

	)

39 
	#APPMGR_PORTCFG
 0

	)

40 
	#APPMGR_IPHONE
 0

	)

41 
	#APPMGR_BARRY
 0

	)

42 
	#APPMGR_SMART
 0

	)

43 
	#APPMGR_WIMAX
 0

	)

44 
	#APPMGR_BECEEM
 0

	)

46 
	#APPMGR_GUEST_LAN
 0

	)

49 #i‡
deföed
(
EZP_PROD_CAT_C
)

50 #i‡(
EZP_PROD_SUBCAT
 == 2)

51 
	#APPMGR_ISCSI
 0

	)

52 
	#APPMGR_PPTP
 0

	)

53 
	#APPMGR_L2TP
 0

	)

54 
	#APPMGR_IPSEC
 0

	)

55 
	#APPMGR_STORAGE
 1

	)

56 
	#APPMGR_WWAN
 0

	)

57 
	#APPMGR_WISP
 1

	)

58 
	#APPMGR_PORTCFG
 0

	)

59 
	#APPMGR_HWNAT
 0

	)

60 
	#APPMGR_IPHONE
 0

	)

61 
	#APPMGR_BARRY
 0

	)

62 
	#APPMGR_SMART
 0

	)

63 
	#APPMGR_WIMAX
 0

	)

64 
	#APPMGR_BECEEM
 0

	)

65 #ñi‡(
EZP_PROD_SUBCAT
 == 3)

66 
	#APPMGR_ISCSI
 0

	)

67 
	#APPMGR_PPTP
 1

	)

68 
	#APPMGR_L2TP
 0

	)

69 
	#APPMGR_IPSEC
 0

	)

70 
	#APPMGR_STORAGE
 1

	)

71 
	#APPMGR_WWAN
 0

	)

72 
	#APPMGR_WISP
 1

	)

73 
	#APPMGR_PORTCFG
 0

	)

74 
	#APPMGR_HWNAT
 0

	)

75 
	#APPMGR_IPHONE
 0

	)

76 
	#APPMGR_BARRY
 0

	)

77 
	#APPMGR_SMART
 0

	)

78 
	#APPMGR_WIMAX
 0

	)

79 
	#APPMGR_BECEEM
 0

	)

81 
	#APPMGR_ISCSI
 0

	)

82 
	#APPMGR_PPTP
 0

	)

83 
	#APPMGR_L2TP
 0

	)

84 
	#APPMGR_IPSEC
 0

	)

85 
	#APPMGR_STORAGE
 1

	)

86 
	#APPMGR_WWAN
 0

	)

87 
	#APPMGR_WISP
 0

	)

88 
	#APPMGR_PORTCFG
 0

	)

89 
	#APPMGR_HWNAT
 0

	)

90 
	#APPMGR_IPHONE
 0

	)

91 
	#APPMGR_BARRY
 0

	)

92 
	#APPMGR_SMART
 0

	)

93 
	#APPMGR_WIMAX
 0

	)

94 
	#APPMGR_BECEEM
 0

	)

96 
	#APPMGR_GUEST_LAN
 1

	)

99 #ifde‡
EZP_PROD_CAT_D


100 
	#APPMGR_ISCSI
 0

	)

101 
	#APPMGR_PPTP
 0

	)

102 
	#APPMGR_L2TP
 0

	)

103 
	#APPMGR_IPSEC
 0

	)

104 
	#APPMGR_STORAGE
 1

	)

105 
	#APPMGR_WWAN
 0

	)

106 
	#APPMGR_WISP
 1

	)

107 
	#APPMGR_PORTCFG
 0

	)

108 
	#APPMGR_HWNAT
 0

	)

109 
	#APPMGR_IPHONE
 0

	)

110 
	#APPMGR_BARRY
 0

	)

111 
	#APPMGR_SMART
 0

	)

112 
	#APPMGR_WIMAX
 0

	)

113 
	#APPMGR_BECEEM
 0

	)

114 
	#APPMGR_GUEST_LAN
 1

	)

117 #ifde‡
EZP_PROD_CAT_G


118 #i‡(
EZP_PROD_SUBCAT
 == 2)

119 
	#APPMGR_ISCSI
 0

	)

120 
	#APPMGR_PPTP
 1

	)

121 
	#APPMGR_L2TP
 0

	)

122 
	#APPMGR_IPSEC
 0

	)

123 
	#APPMGR_STORAGE
 1

	)

124 
	#APPMGR_WWAN
 0

	)

125 
	#APPMGR_WISP
 1

	)

126 
	#APPMGR_PORTCFG
 0

	)

127 
	#APPMGR_HWNAT
 1

	)

128 
	#APPMGR_IPHONE
 0

	)

129 
	#APPMGR_BARRY
 0

	)

130 
	#APPMGR_SMART
 0

	)

131 
	#APPMGR_WIMAX
 0

	)

132 
	#APPMGR_BECEEM
 0

	)

133 #ñi‡(
EZP_PROD_SUBCAT
 == 3)

134 
	#APPMGR_ISCSI
 0

	)

135 
	#APPMGR_PPTP
 1

	)

136 
	#APPMGR_L2TP
 0

	)

137 
	#APPMGR_IPSEC
 0

	)

138 
	#APPMGR_STORAGE
 1

	)

139 
	#APPMGR_WWAN
 0

	)

140 
	#APPMGR_WISP
 1

	)

141 
	#APPMGR_PORTCFG
 0

	)

142 
	#APPMGR_HWNAT
 1

	)

143 
	#APPMGR_IPHONE
 0

	)

144 
	#APPMGR_BARRY
 0

	)

145 
	#APPMGR_SMART
 0

	)

146 
	#APPMGR_WIMAX
 0

	)

147 
	#APPMGR_BECEEM
 0

	)

149 
	#APPMGR_ISCSI
 0

	)

150 
	#APPMGR_PPTP
 0

	)

151 
	#APPMGR_L2TP
 0

	)

152 
	#APPMGR_IPSEC
 0

	)

153 
	#APPMGR_STORAGE
 1

	)

154 
	#APPMGR_WWAN
 0

	)

155 
	#APPMGR_WISP
 0

	)

156 
	#APPMGR_PORTCFG
 0

	)

157 
	#APPMGR_HWNAT
 1

	)

158 
	#APPMGR_IPHONE
 0

	)

159 
	#APPMGR_BARRY
 0

	)

160 
	#APPMGR_SMART
 0

	)

161 
	#APPMGR_WIMAX
 0

	)

162 
	#APPMGR_BECEEM
 0

	)

164 
	#APPMGR_GUEST_LAN
 1

	)

167 #ifde‡
EZP_PROD_CAT_I


168 #i‡(
EZP_PROD_SUBCAT
 == 2)

169 
	#APPMGR_ISCSI
 0

	)

170 
	#APPMGR_PPTP
 1

	)

171 
	#APPMGR_L2TP
 0

	)

172 
	#APPMGR_IPSEC
 0

	)

173 
	#APPMGR_STORAGE
 0

	)

174 
	#APPMGR_WWAN
 1

	)

175 
	#APPMGR_WISP
 1

	)

176 
	#APPMGR_PORTCFG
 0

	)

177 
	#APPMGR_HWNAT
 1

	)

178 
	#APPMGR_IPHONE
 0

	)

179 
	#APPMGR_BARRY
 0

	)

180 
	#APPMGR_SMART
 0

	)

181 
	#APPMGR_WIMAX
 0

	)

182 
	#APPMGR_BECEEM
 0

	)

183 #ñi‡(
EZP_PROD_SUBCAT
 == 3)

184 
	#APPMGR_ISCSI
 0

	)

185 
	#APPMGR_PPTP
 1

	)

186 
	#APPMGR_L2TP
 0

	)

187 #i‡! 
deföed
(
EZP_PROD_BRAND_PROX
)

188 
	#APPMGR_IPSEC
 0

	)

190 
	#APPMGR_IPSEC
 1

	)

192 
	#APPMGR_STORAGE
 0

	)

193 
	#APPMGR_WWAN
 1

	)

194 
	#APPMGR_WISP
 1

	)

195 
	#APPMGR_PORTCFG
 0

	)

196 
	#APPMGR_HWNAT
 1

	)

197 
	#APPMGR_IPHONE
 0

	)

198 
	#APPMGR_BARRY
 0

	)

199 
	#APPMGR_SMART
 0

	)

200 
	#APPMGR_WIMAX
 0

	)

201 
	#APPMGR_BECEEM
 0

	)

203 
	#APPMGR_ISCSI
 0

	)

204 
	#APPMGR_PPTP
 0

	)

205 
	#APPMGR_L2TP
 0

	)

206 
	#APPMGR_IPSEC
 0

	)

207 
	#APPMGR_STORAGE
 0

	)

208 
	#APPMGR_WWAN
 1

	)

209 
	#APPMGR_WISP
 0

	)

210 
	#APPMGR_PORTCFG
 0

	)

211 
	#APPMGR_HWNAT
 1

	)

212 
	#APPMGR_IPHONE
 0

	)

213 
	#APPMGR_BARRY
 0

	)

214 
	#APPMGR_SMART
 0

	)

215 
	#APPMGR_WIMAX
 0

	)

216 
	#APPMGR_BECEEM
 0

	)

218 
	#APPMGR_GUEST_LAN
 1

	)

221 #ifde‡
EZP_PROD_CAT_K


222 
	#APPMGR_ISCSI
 0

	)

223 
	#APPMGR_PPTP
 0

	)

224 
	#APPMGR_L2TP
 0

	)

225 
	#APPMGR_IPSEC
 0

	)

226 
	#APPMGR_STORAGE
 1

	)

227 
	#APPMGR_WWAN
 0

	)

228 
	#APPMGR_WISP
 1

	)

229 
	#APPMGR_PORTCFG
 0

	)

230 
	#APPMGR_HWNAT
 0

	)

231 
	#APPMGR_IPHONE
 0

	)

232 
	#APPMGR_BARRY
 0

	)

233 
	#APPMGR_SMART
 0

	)

234 
	#APPMGR_WIMAX
 0

	)

235 
	#APPMGR_BECEEM
 0

	)

236 
	#APPMGR_GUEST_LAN
 1

	)

239 #ifde‡
EZP_PROD_CAT_M


240 #i‡(
EZP_PROD_SUBCAT
 == 0)

241 
	#APPMGR_ISCSI
 0

	)

242 
	#APPMGR_PPTP
 0

	)

243 
	#APPMGR_L2TP
 0

	)

244 
	#APPMGR_IPSEC
 0

	)

245 
	#APPMGR_STORAGE
 0

	)

246 
	#APPMGR_WWAN
 1

	)

247 
	#APPMGR_WISP
 1

	)

248 
	#APPMGR_PORTCFG
 0

	)

249 
	#APPMGR_HWNAT
 0

	)

250 
	#APPMGR_IPHONE
 1

	)

251 
	#APPMGR_BARRY
 1

	)

252 
	#APPMGR_SMART
 1

	)

253 
	#APPMGR_WIMAX
 0

	)

254 
	#APPMGR_BECEEM
 0

	)

255 #ñi‡(
EZP_PROD_SUBCAT
 == 2)

256 
	#APPMGR_ISCSI
 0

	)

257 
	#APPMGR_PPTP
 1

	)

258 
	#APPMGR_L2TP
 0

	)

259 
	#APPMGR_IPSEC
 1

	)

260 
	#APPMGR_STORAGE
 0

	)

261 
	#APPMGR_WWAN
 1

	)

262 
	#APPMGR_WISP
 1

	)

263 
	#APPMGR_PORTCFG
 0

	)

264 
	#APPMGR_HWNAT
 0

	)

265 
	#APPMGR_IPHONE
 1

	)

266 
	#APPMGR_BARRY
 1

	)

267 
	#APPMGR_SMART
 1

	)

268 
	#APPMGR_WIMAX
 0

	)

269 
	#APPMGR_BECEEM
 0

	)

271 
	#APPMGR_ISCSI
 0

	)

272 
	#APPMGR_PPTP
 0

	)

273 
	#APPMGR_L2TP
 0

	)

274 
	#APPMGR_IPSEC
 0

	)

275 
	#APPMGR_STORAGE
 0

	)

276 
	#APPMGR_WWAN
 1

	)

277 
	#APPMGR_WISP
 0

	)

278 
	#APPMGR_PORTCFG
 0

	)

279 
	#APPMGR_HWNAT
 0

	)

280 
	#APPMGR_IPHONE
 1

	)

281 
	#APPMGR_BARRY
 1

	)

282 
	#APPMGR_SMART
 1

	)

283 
	#APPMGR_WIMAX
 0

	)

284 
	#APPMGR_BECEEM
 0

	)

286 
	#APPMGR_GUEST_LAN
 1

	)

289 #ifde‡
EZP_PROD_CAT_N


290 #ifde‡
EZP_PROD_BRAND_ZYUS


291 
	#APPMGR_ISCSI
 0

	)

292 
	#APPMGR_PPTP
 1

	)

293 
	#APPMGR_L2TP
 1

	)

294 
	#APPMGR_IPSEC
 1

	)

295 
	#APPMGR_STORAGE
 0

	)

296 
	#APPMGR_WWAN
 1

	)

297 
	#APPMGR_WISP
 0

	)

298 
	#APPMGR_PORTCFG
 0

	)

299 
	#APPMGR_HWNAT
 1

	)

300 
	#APPMGR_IPHONE
 0

	)

301 
	#APPMGR_BARRY
 0

	)

302 
	#APPMGR_SMART
 0

	)

303 
	#APPMGR_WIMAX
 0

	)

304 
	#APPMGR_BECEEM
 0

	)

306 
	#APPMGR_ISCSI
 0

	)

307 
	#APPMGR_PPTP
 1

	)

308 
	#APPMGR_L2TP
 1

	)

309 
	#APPMGR_IPSEC
 1

	)

310 
	#APPMGR_STORAGE
 0

	)

311 
	#APPMGR_WWAN
 1

	)

312 
	#APPMGR_WISP
 1

	)

313 
	#APPMGR_PORTCFG
 0

	)

314 
	#APPMGR_HWNAT
 1

	)

315 
	#APPMGR_IPHONE
 1

	)

316 
	#APPMGR_BARRY
 1

	)

317 
	#APPMGR_SMART
 1

	)

318 
	#APPMGR_WIMAX
 0

	)

319 
	#APPMGR_BECEEM
 0

	)

321 
	#APPMGR_GUEST_LAN
 1

	)

324 #ifde‡
EZP_PROD_CAT_O


325 #i‡(
EZP_PROD_SUBCAT
 == 0)

326 
	#APPMGR_ISCSI
 0

	)

327 
	#APPMGR_PPTP
 1

	)

328 
	#APPMGR_L2TP
 1

	)

329 
	#APPMGR_IPSEC
 1

	)

330 
	#APPMGR_STORAGE
 0

	)

331 
	#APPMGR_WWAN
 0

	)

332 
	#APPMGR_WISP
 1

	)

333 
	#APPMGR_PORTCFG
 0

	)

334 
	#APPMGR_HWNAT
 0

	)

335 
	#APPMGR_IPHONE
 0

	)

336 
	#APPMGR_BARRY
 0

	)

337 
	#APPMGR_SMART
 0

	)

338 
	#APPMGR_WIMAX
 0

	)

339 
	#APPMGR_BECEEM
 0

	)

340 #ñi‡(
EZP_PROD_SUBCAT
 == 4)

341 
	#APPMGR_ISCSI
 0

	)

342 
	#APPMGR_PPTP
 1

	)

343 
	#APPMGR_L2TP
 1

	)

344 
	#APPMGR_IPSEC
 1

	)

345 
	#APPMGR_STORAGE
 0

	)

346 
	#APPMGR_WWAN
 0

	)

347 
	#APPMGR_WISP
 1

	)

348 
	#APPMGR_PORTCFG
 0

	)

349 
	#APPMGR_HWNAT
 0

	)

350 
	#APPMGR_IPHONE
 0

	)

351 
	#APPMGR_BARRY
 0

	)

352 
	#APPMGR_SMART
 0

	)

353 
	#APPMGR_WIMAX
 0

	)

354 
	#APPMGR_BECEEM
 0

	)

356 
	#APPMGR_GUEST_LAN
 1

	)

359 #ifde‡
EZP_PROD_CAT_P


360 #i‡(
EZP_PROD_SUBCAT
 == 0)

361 
	#APPMGR_ISCSI
 0

	)

362 
	#APPMGR_PPTP
 0

	)

363 
	#APPMGR_L2TP
 0

	)

364 
	#APPMGR_IPSEC
 0

	)

365 
	#APPMGR_STORAGE
 0

	)

366 
	#APPMGR_WWAN
 1

	)

367 
	#APPMGR_WISP
 1

	)

368 
	#APPMGR_PORTCFG
 0

	)

369 
	#APPMGR_HWNAT
 0

	)

370 
	#APPMGR_IPHONE
 1

	)

371 
	#APPMGR_BARRY
 1

	)

372 
	#APPMGR_SMART
 1

	)

373 
	#APPMGR_WIMAX
 0

	)

374 
	#APPMGR_BECEEM
 0

	)

375 #ñi‡(
EZP_PROD_SUBCAT
 == 1)

376 
	#APPMGR_ISCSI
 0

	)

377 
	#APPMGR_PPTP
 0

	)

378 
	#APPMGR_L2TP
 0

	)

379 
	#APPMGR_IPSEC
 0

	)

380 
	#APPMGR_STORAGE
 0

	)

381 #i‡
deföed
(
PLATFORM_AXB
Ë|| deföed(
PLATFORM_AXM
)

382 
	#APPMGR_WWAN
 0

	)

383 
	#APPMGR_VPNC
 0

	)

384 
	#APPMGR_WIRE
 0

	)

385 #ñi‡
deföed
(
PLATFORM_AXA
)

386 
	#APPMGR_WWAN
 1

	)

387 
	#APPMGR_VPNC
 0

	)

389 
	#APPMGR_WWAN
 1

	)

391 #ifde‡
EZP_PROD_BRAND_MYMO


392 
	#APPMGR_WISP
 0

	)

394 
	#APPMGR_WISP
 1

	)

396 #i‡
deföed
(
PLATFORM_AME
)

397 
	#APPMGR_PORTCFG
 1

	)

399 
	#APPMGR_PORTCFG
 0

	)

401 
	#APPMGR_HWNAT
 0

	)

402 
	#APPMGR_IPHONE
 1

	)

403 
	#APPMGR_BARRY
 1

	)

404 
	#APPMGR_SMART
 1

	)

405 
	#APPMGR_WIMAX
 0

	)

406 
	#APPMGR_BECEEM
 0

	)

408 
	#APPMGR_ISCSI
 0

	)

409 
	#APPMGR_PPTP
 0

	)

410 
	#APPMGR_L2TP
 0

	)

411 
	#APPMGR_IPSEC
 0

	)

412 
	#APPMGR_STORAGE
 0

	)

413 
	#APPMGR_WWAN
 1

	)

414 
	#APPMGR_WISP
 0

	)

415 
	#APPMGR_PORTCFG
 0

	)

416 
	#APPMGR_HWNAT
 0

	)

417 
	#APPMGR_IPHONE
 1

	)

418 
	#APPMGR_BARRY
 1

	)

419 
	#APPMGR_SMART
 1

	)

420 
	#APPMGR_WIMAX
 0

	)

421 
	#APPMGR_BECEEM
 0

	)

423 #i‡
deföed
(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_AXB
Ë|| deföed(
PLATFORM_AXM
Ë|| deföed(
PLATFORM_M2E
)

424 
	#APPMGR_GUEST_LAN
 0

	)

426 
	#APPMGR_GUEST_LAN
 1

	)

430 #ifde‡
EZP_PROD_CAT_R


431 #i‡(
EZP_PROD_SUBCAT
 == 1)

432 
	#APPMGR_ISCSI
 0

	)

433 
	#APPMGR_PPTP
 0

	)

434 
	#APPMGR_L2TP
 0

	)

435 
	#APPMGR_IPSEC
 0

	)

436 
	#APPMGR_STORAGE
 0

	)

437 
	#APPMGR_WWAN
 0

	)

438 
	#APPMGR_WISP
 1

	)

439 
	#APPMGR_PORTCFG
 0

	)

440 
	#APPMGR_HWNAT
 0

	)

441 
	#APPMGR_IPHONE
 0

	)

442 
	#APPMGR_BARRY
 0

	)

443 
	#APPMGR_SMART
 0

	)

444 
	#APPMGR_WIMAX
 0

	)

445 
	#APPMGR_BECEEM
 0

	)

447 
	#APPMGR_GUEST_LAN
 0

	)

450 #ifde‡
EZP_PROD_CAT_T


451 
	#APPMGR_ISCSI
 0

	)

452 
	#APPMGR_PPTP
 0

	)

453 
	#APPMGR_L2TP
 0

	)

454 
	#APPMGR_IPSEC
 0

	)

455 
	#APPMGR_STORAGE
 1

	)

456 
	#APPMGR_WWAN
 0

	)

457 
	#APPMGR_WISP
 0

	)

458 
	#APPMGR_PORTCFG
 0

	)

459 
	#APPMGR_HWNAT
 0

	)

460 
	#APPMGR_IPHONE
 0

	)

461 
	#APPMGR_BARRY
 0

	)

462 
	#APPMGR_SMART
 0

	)

463 
	#APPMGR_WIMAX
 0

	)

464 
	#APPMGR_BECEEM
 0

	)

465 
	#APPMGR_GUEST_LAN
 0

	)

468 #ifde‡
EZP_PROD_CAT_U


469 
	#APPMGR_ISCSI
 0

	)

470 
	#APPMGR_PPTP
 0

	)

471 
	#APPMGR_L2TP
 0

	)

472 
	#APPMGR_IPSEC
 0

	)

473 
	#APPMGR_STORAGE
 0

	)

474 
	#APPMGR_WWAN
 1

	)

475 
	#APPMGR_WISP
 1

	)

476 
	#APPMGR_PORTCFG
 0

	)

477 
	#APPMGR_HWNAT
 0

	)

478 
	#APPMGR_IPHONE
 0

	)

479 
	#APPMGR_BARRY
 0

	)

480 
	#APPMGR_SMART
 0

	)

481 #ifde‡
EZP_PROD_SUBSUBCAT_R


482 
	#APPMGR_WIMAX
 1

	)

483 
	#APPMGR_BECEEM
 1

	)

485 
	#APPMGR_WIMAX
 0

	)

486 
	#APPMGR_BECEEM
 0

	)

488 
	#APPMGR_GUEST_LAN
 1

	)

491 #ifde‡
EZP_PROD_CAT_V


492 
	#APPMGR_ISCSI
 0

	)

493 
	#APPMGR_PPTP
 0

	)

494 
	#APPMGR_L2TP
 0

	)

495 
	#APPMGR_IPSEC
 0

	)

496 
	#APPMGR_STORAGE
 0

	)

497 
	#APPMGR_WWAN
 0

	)

498 
	#APPMGR_WISP
 1

	)

499 
	#APPMGR_PORTCFG
 0

	)

500 
	#APPMGR_HWNAT
 0

	)

501 
	#APPMGR_IPHONE
 0

	)

502 
	#APPMGR_BARRY
 0

	)

503 
	#APPMGR_SMART
 0

	)

504 
	#APPMGR_WIMAX
 0

	)

505 
	#APPMGR_BECEEM
 0

	)

506 
	#APPMGR_GUEST_LAN
 1

	)

509 #ifde‡
EZP_PROD_CAT_W


510 #i‡(
EZP_PROD_SUBCAT
 == 0)

511 
	#APPMGR_WLAN
 1

	)

512 
	#APPMGR_ISCSI
 0

	)

513 
	#APPMGR_PPTP
 0

	)

514 
	#APPMGR_L2TP
 0

	)

515 
	#APPMGR_IPSEC
 0

	)

516 
	#APPMGR_STORAGE
 0

	)

517 
	#APPMGR_WWAN
 1

	)

518 
	#APPMGR_WISP
 0

	)

519 
	#APPMGR_PORTCFG
 0

	)

520 
	#APPMGR_HWNAT
 0

	)

521 
	#APPMGR_IPHONE
 1

	)

522 
	#APPMGR_BARRY
 1

	)

523 
	#APPMGR_SMART
 1

	)

524 
	#APPMGR_WIMAX
 0

	)

525 
	#APPMGR_BECEEM
 0

	)

526 #ñi‡(
EZP_PROD_SUBCAT
 == 1)

527 
	#APPMGR_WLAN
 1

	)

528 
	#APPMGR_ISCSI
 0

	)

529 
	#APPMGR_PPTP
 0

	)

530 
	#APPMGR_L2TP
 0

	)

531 
	#APPMGR_IPSEC
 0

	)

532 
	#APPMGR_STORAGE
 0

	)

533 
	#APPMGR_WWAN
 1

	)

534 
	#APPMGR_WISP
 0

	)

535 
	#APPMGR_PORTCFG
 1

	)

536 
	#APPMGR_HWNAT
 0

	)

537 
	#APPMGR_IPHONE
 1

	)

538 
	#APPMGR_BARRY
 1

	)

539 
	#APPMGR_SMART
 1

	)

540 
	#APPMGR_WIMAX
 0

	)

541 
	#APPMGR_BECEEM
 0

	)

543 
	#APPMGR_WLAN
 1

	)

544 
	#APPMGR_ISCSI
 0

	)

545 
	#APPMGR_PPTP
 0

	)

546 
	#APPMGR_L2TP
 0

	)

547 
	#APPMGR_IPSEC
 0

	)

548 
	#APPMGR_STORAGE
 0

	)

549 
	#APPMGR_WWAN
 1

	)

550 
	#APPMGR_WISP
 0

	)

551 
	#APPMGR_PORTCFG
 0

	)

552 
	#APPMGR_HWNAT
 0

	)

553 
	#APPMGR_IPHONE
 1

	)

554 
	#APPMGR_BARRY
 1

	)

555 
	#APPMGR_SMART
 1

	)

556 
	#APPMGR_WIMAX
 0

	)

557 
	#APPMGR_BECEEM
 0

	)

559 
	#APPMGR_GUEST_LAN
 1

	)

562 #ifde‡
EZP_PROD_CAT_W


563 
	#APPMGR_FIRMWARE
 0

	)

565 
	#APPMGR_FIRMWARE
 1

	)

568 
	#APPMGR_USBLED
 0

	)

575 #i‚de‡
APPMGR_VPNC


576 
	#APPMGR_VPNC
 1

	)

578 #i‚de‡
APPMGR_WIRE


579 
	#APPMGR_WIRE
 1

	)

581 
	#APPMBG_RULE
 
APPMGR_WLAN
^
APPMGR_ISCSI
^
APPMGR_PPTP
^
APPMGR_L2TP
^
APPMGR_IPSEC
^
APPMGR_STORAGE
^
APPMGR_WWAN
^
APPMGR_WISP
^
APPMGR_PORTCFG
^
APPMGR_HWNAT
^
APPMGR_FIRMWARE
^
APPMGR_IPHONE
^
APPMGR_BARRY
^
APPMGR_SMART
^
APPMGR_USBLED
^
APPMGR_WIMAX
^
APPMGR_BECEEM
^
APPMGR_GUEST_LAN
^
APPMGR_VPNC
^
APPMGR_WIRE


	)

	@nvram_ezpacket-as500.h

1 #ifde‡
CONFIG_EZP_ARCH_AS500


2 
	#ARCH
 "AS500"

	)

3 #i‡–
WAN_NUM
 =1 ) && ( 
LAN_NUM
 == 1 )

5 
	#WAN0_IFNAME
 "ëh1"

	)

6 
	#WAN0_IFNAMES
 ""

	)

7 
	#WAN0_HWNAME
 ""

	)

8 
	#WAN0_DEVICE
 "ëh1"

	)

9 
	#WAN0_PORTS
 "4"

	)

11 
	#LAN0_IFNAME
 "br0"

	)

12 
	#LAN0_IFNAMES
 "ëh0"

	)

13 
	#LAN0_IFNAMES_WDS
 "ëh0"

	)

14 
	#LAN0_HWNAME
 ""

	)

15 
	#LAN0_DEVICE
 "ëh0"

	)

16 
	#LAN0_PORTS
 "0 1 2 3"

	)

19 
	#VLAN2_PORTS
 "4 5"

	)

21 
	#VLAN1_PORTS
 "0 1 2 3 5*"

	)

23 
	#VLAN_HWNAME
 "ëh1"

	)

25 
	#STATS_RULE
 "^1^60^ëh0Éth1 br0"

	)

27 #ñi‡–
WAN_NUM
 =2 ) && ( 
LAN_NUM
 == 1 )

29 
	#WAN0_IFNAME
 "ëh1"

	)

30 
	#WAN0_IFNAMES
 ""

	)

31 
	#WAN0_HWNAME
 ""

	)

32 
	#WAN0_DEVICE
 "ëh1"

	)

33 
	#WAN0_PORTS
 "4"

	)

35 
	#WAN1_IFNAME
 "vœn1"

	)

36 
	#WAN1_IFNAMES
 ""

	)

37 
	#WAN1_HWNAME
 ""

	)

38 
	#WAN1_DEVICE
 "vœn1"

	)

39 
	#WAN1_PORTS
 "3"

	)

41 
	#LAN0_IFNAME
 "br0"

	)

42 
	#LAN0_IFNAMES
 "vœn2"

	)

43 
	#LAN0_IFNAMES_WDS
 "ëh0Éth1 vœn1 vœn2"

	)

44 
	#LAN0_HWNAME
 ""

	)

45 
	#LAN0_DEVICE
 "vœn2"

	)

46 
	#LAN0_PORTS
 "0 1 2"

	)

49 
	#VLAN2_PORTS
 "4 5"

	)

51 
	#VLAN3_PORTS
 "3 5"

	)

53 
	#VLAN1_PORTS
 "0 1 2 5"

	)

55 
	#VLAN_HWNAME
 "ëh0"

	)

57 
	#STATS_RULE
 "^1^60^vœn2 vœn1Éth0Éth1"

	)

67 #i‚de‡
WL_NUM


68 
	#WL_NUM
 1

	)

71 #i‚de‡
WL_VIRTUAL_NUM


72 
	#WL_VIRTUAL_NUM
 2

	)

75 #i‚de‡
WL_WDS_NUM


76 
	#WL_WDS_NUM
 4

	)

79 #i‚de‡
WL_APCLI_NUM


80 
	#WL_APCLI_NUM
 1

	)

83 #i‡–
WL_NUM
 == 1 )

84 
	#WL_BASIC_RULE
 "1^9^100^6^0"

	)

85 #i‡–
WL_VIRTUAL_NUM
 == 1 )

86 
	#WL0_IFNAME_RULE
 "ø0"

	)

87 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

88 
	#WL0_IFNAME_RULE
 "ø0|ø1"

	)

89 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

90 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

92 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

93 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

94 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

95 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

96 #ñi‡–
WL_NUM
 == 2 )

97 
	#WL_BASIC_RULE
 "1^9^100^6^0|1^9^100^6^0"

	)

98 #i‡–
WL_VIRTUAL_NUM
 == 1 )

99 
	#WL0_IFNAME_RULE
 "ø0"

	)

100 
	#WL1_IFNAME_RULE
 "ø1"

	)

101 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

102 
	#WL0_IFNAME_RULE
 "ø0|ø2"

	)

103 
	#WL1_IFNAME_RULE
 "ø1|ø3"

	)

104 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

105 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

106 
	#WL1_IFNAME_RULE
 "ø1|ø5|ø6|ø7"

	)

108 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

109 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

110 
	#WL1_RULE_NUM
 
WL_VIRTUAL_NUM


	)

111 
	#WL1_RULE_MAX
 
WL_VIRTUAL_NUM


	)

112 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

113 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

119 
	#BW_TYPE
 \

124 "V50M50M", "Cu°om"

	)

125 #i‡–
EZP_PROD_SUBCAT
 == 0 )

126 
	#BW_DOWNLOAD_MAX
 "51200"

	)

127 
	#BW_UPLOAD_MAX
 "51200"

	)

128 
	#BW_DOWNLOAD_MIN
 "64"

	)

129 
	#BW_UPLOAD_MIN
 "64"

	)

130 #ñi‡–
EZP_PROD_SUBCAT
 == 1 )

131 
	#BW_DOWNLOAD_MAX
 "51200"

	)

132 
	#BW_UPLOAD_MAX
 "51200"

	)

133 
	#BW_DOWNLOAD_MIN
 "64"

	)

134 
	#BW_UPLOAD_MIN
 "64"

	)

135 #ñi‡–
EZP_PROD_SUBCAT
 == 2 )

136 
	#BW_DOWNLOAD_MAX
 "51200"

	)

137 
	#BW_UPLOAD_MAX
 "51200"

	)

138 
	#BW_DOWNLOAD_MIN
 "64"

	)

139 
	#BW_UPLOAD_MIN
 "64"

	)

140 #ñi‡–
EZP_PROD_SUBCAT
 == 3 )

141 
	#BW_DOWNLOAD_MAX
 "51200"

	)

142 
	#BW_UPLOAD_MAX
 "51200"

	)

143 
	#BW_DOWNLOAD_MIN
 "64"

	)

144 
	#BW_UPLOAD_MIN
 "64"

	)

145 #ñi‡–
EZP_PROD_SUBCAT
 == 4 )

146 
	#BW_DOWNLOAD_MAX
 "51200"

	)

147 
	#BW_UPLOAD_MAX
 "51200"

	)

148 
	#BW_DOWNLOAD_MIN
 "64"

	)

149 
	#BW_UPLOAD_MIN
 "64"

	)

150 #ñi‡–
EZP_PROD_SUBCAT
 == 5 )

151 
	#BW_DOWNLOAD_MAX
 "51200"

	)

152 
	#BW_UPLOAD_MAX
 "51200"

	)

153 
	#BW_DOWNLOAD_MIN
 "64"

	)

154 
	#BW_UPLOAD_MIN
 "64"

	)

155 #ñi‡–
EZP_PROD_SUBCAT
 == 6 )

156 
	#BW_DOWNLOAD_MAX
 "51200"

	)

157 
	#BW_UPLOAD_MAX
 "51200"

	)

158 
	#BW_DOWNLOAD_MIN
 "64"

	)

159 
	#BW_UPLOAD_MIN
 "64"

	)

162 
	#NVRAM_EZPACKET_DEFAULT_AS500_LAN_NUM_1
 \

164 { "vœn1p‹ts", 
VLAN1_PORTS
, \

165 
NVRAM_NONE
, \

168 { "vœn1hw«me", 
VLAN_HWNAME
, \

169 
NVRAM_NONE
, \

172 

	)

173 
	#NVRAM_EZPACKET_DEFAULT_AS500_WAN_NUM_1
 \

175 { "vœn2p‹ts", 
VLAN2_PORTS
, \

176 
NVRAM_NONE
, \

179 { "vœn2hw«me", 
VLAN_HWNAME
, \

180 
NVRAM_NONE
, \

183 

	)

185 
	#NVRAM_EZPACKET_DEFAULT_AS500_WAN_NUM_2
 \

187 { "vœn2p‹ts", 
VLAN3_PORTS
, \

188 
NVRAM_NONE
, \

191 { "vœn3hw«me", 
VLAN_HWNAME
, \

192 
NVRAM_NONE
, \

195 

	)

197 
	#NVRAM_EZPACKET_DEFAULT_AS500_SWAP
 \

199 
NVRAM_NONE
, \

202 

	)

203 
	#NVRAM_EZPACKET_DEFAULT_AS500_INITD
 \

205 
NVRAM_NONE
, \

208 

	)

	@nvram_ezpacket-brand_abocom.h

2 
	gNVRAM_NONE
,

6 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

10 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_allis.h

2 
	gNVRAM_NONE
,

5 { "modñ", 
x°r
(
EZP_MODEL
),

6 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

10 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_axim.h

2 
	gNVRAM_NONE
,

5 { "modñ", 
x°r
(
EZP_MODEL
),

6 
	gNVRAM_NONE
,

10 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_mymo.h

2 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

6 
	gNVRAM_NONE
,

10 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

14 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_planet.h

2 
	gNVRAM_NONE
,

6 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

10 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_prox.h

1 #ifde‡
EZP_SUB_BRAND_APOLLO


3 
	gNVRAM_NONE
,

7 
	gNVRAM_NONE
,

11 
	gNVRAM_NONE
,

16 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

20 
	gNVRAM_NONE
,

24 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

29 
	gNVRAM_NONE
,

33 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_sony.h

2 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

6 
	gNVRAM_NONE
,

10 
	gNVRAM_NONE
,

14 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_white.h

2 
	gNVRAM_NONE
,

6 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

10 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brand_zyxel.h

1 #ifde‡
EZP_SUB_BRAND_FEENEY


2 #i‡
deföed
(
EZP_PROD_CAT_N
)

3 
	#MODEL
 "Fì√y VFG6005N"

	)

4 #ñi‡
deföed
(
EZP_PROD_CAT_A
)

5 
	#MODEL
 "Fì√y VFG6005"

	)

8 
	gNVRAM_NONE
,

12 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

16 #i‡
deföed
(
EZP_PROD_CAT_N
)

17 
	#MODEL
 "ZyXEL VFG6005N"

	)

18 #ñi‡
deföed
(
EZP_PROD_CAT_A
)

19 
	#MODEL
 "ZyXEL VFG6005"

	)

22 
	gNVRAM_NONE
,

26 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

31 
	gNVRAM_PROTECTED
 | 
	gNVRAM_CUSTOMIZED
,

	@nvram_ezpacket-brcm.h

3 #ifde‡
CONFIG_EZP_ARCH_BRCM


5 
	#ARCH
 "Brﬂdcom"

	)

6 #i‡–
WAN_NUM
 =1 ) && ( 
LAN_NUM
 == 1 )

8 
	#WAN0_IFNAME
 "vœn1"

	)

9 
	#WAN0_IFNAMES
 ""

	)

10 
	#WAN0_HWNAME
 "ë0"

	)

11 
	#WAN0_DEVICE
 "vœn1"

	)

12 
	#WAN0_PORTS
 "4"

	)

14 
	#LAN0_IFNAME
 "br0"

	)

15 
	#LAN0_IFNAMES
 "vœn0Éth1"

	)

16 
	#LAN0_IFNAMES_WDS
 "vœn0Éth1"

	)

17 
	#LAN0_HWNAME
 ""

	)

18 
	#LAN0_DEVICE
 ""

	)

19 
	#LAN0_PORTS
 "0 1 2 3"

	)

22 
	#VLAN1_PORTS
 "0 5"

	)

24 
	#VLAN0_PORTS
 "1 2 3 4 5*"

	)

26 
	#VLAN_HWNAME
 "ë0"

	)

28 
	#STATS_RULE
 "^1^60^vœn1 vœn0Éth1 br0"

	)

30 #ñi‡–
WAN_NUM
 =2 ) && ( 
LAN_NUM
 == 1 )

32 
	#WAN0_IFNAME
 "vœn1"

	)

33 
	#WAN0_IFNAMES
 ""

	)

34 
	#WAN0_HWNAME
 ""

	)

35 
	#WAN0_DEVICE
 "vœn1"

	)

36 
	#WAN0_PORTS
 "4"

	)

38 
	#WAN1_IFNAME
 "vœn2"

	)

39 
	#WAN1_IFNAMES
 ""

	)

40 
	#WAN1_HWNAME
 ""

	)

41 
	#WAN1_DEVICE
 "vœn2"

	)

42 
	#WAN1_PORTS
 "3"

	)

44 
	#LAN0_IFNAME
 "br0"

	)

45 
	#LAN0_IFNAMES
 "vœn0Éth1"

	)

46 
	#LAN0_IFNAMES_WDS
 "vœn0Éth1"

	)

47 
	#LAN0_HWNAME
 ""

	)

48 
	#LAN0_DEVICE
 ""

	)

49 
	#LAN0_PORTS
 "0 1 2"

	)

52 
	#VLAN1_PORTS
 "4 5"

	)

54 
	#VLAN2_PORTS
 "3 5"

	)

56 
	#VLAN0_PORTS
 "2 1 0 5*"

	)

58 
	#VLAN_HWNAME
 "ë0"

	)

60 
	#STATS_RULE
 "^1^60^vœn1 vœn2 vœn0Éth1 br0"

	)

68 
	#WL0_IFNAME
 "ëh1"

	)

71 
	#BW_TYPE
 \

75 "C8M640K", "C10M1M", "V2M2M", "V4M4M", "V10M10M", "Cu°om"

	)

76 #i‡–
EZP_PROD_SUBCAT
 == 0 )

77 
	#BW_DOWNLOAD_MAX
 "12288"

	)

78 
	#BW_UPLOAD_MAX
 "12288"

	)

79 
	#BW_DOWNLOAD_MIN
 "64"

	)

80 
	#BW_UPLOAD_MIN
 "64"

	)

81 #ñi‡–
EZP_PROD_SUBCAT
 == 1 )

82 
	#BW_DOWNLOAD_MAX
 "12288"

	)

83 
	#BW_UPLOAD_MAX
 "12288"

	)

84 
	#BW_DOWNLOAD_MIN
 "64"

	)

85 
	#BW_UPLOAD_MIN
 "64"

	)

86 #ñi‡–
EZP_PROD_SUBCAT
 == 2 )

87 
	#BW_DOWNLOAD_MAX
 "12288"

	)

88 
	#BW_UPLOAD_MAX
 "12288"

	)

89 
	#BW_DOWNLOAD_MIN
 "64"

	)

90 
	#BW_UPLOAD_MIN
 "64"

	)

91 #ñi‡–
EZP_PROD_SUBCAT
 == 3 )

92 
	#BW_DOWNLOAD_MAX
 "12288"

	)

93 
	#BW_UPLOAD_MAX
 "12288"

	)

94 
	#BW_DOWNLOAD_MIN
 "64"

	)

95 
	#BW_UPLOAD_MIN
 "64"

	)

96 #ñi‡–
EZP_PROD_SUBCAT
 == 4 )

97 
	#BW_DOWNLOAD_MAX
 "12288"

	)

98 
	#BW_UPLOAD_MAX
 "12288"

	)

99 
	#BW_DOWNLOAD_MIN
 "64"

	)

100 
	#BW_UPLOAD_MIN
 "64"

	)

101 #ñi‡–
EZP_PROD_SUBCAT
 == 5 )

102 
	#BW_DOWNLOAD_MAX
 "12288"

	)

103 
	#BW_UPLOAD_MAX
 "12288"

	)

104 
	#BW_DOWNLOAD_MIN
 "64"

	)

105 
	#BW_UPLOAD_MIN
 "64"

	)

106 #ñi‡–
EZP_PROD_SUBCAT
 == 6 )

107 
	#BW_DOWNLOAD_MAX
 "12288"

	)

108 
	#BW_UPLOAD_MAX
 "12288"

	)

109 
	#BW_DOWNLOAD_MIN
 "64"

	)

110 
	#BW_UPLOAD_MIN
 "64"

	)

116 
	#NVRAM_EZPACKET_DEFAULT_BRCM_LAN_NUM_1
 \

118 { "vœn0p‹ts", 
VLAN0_PORTS
, \

119 
NVRAM_NONE
, \

122 { "vœn0hw«me", 
VLAN_HWNAME
, \

123 
NVRAM_NONE
, \

126 

	)

127 
	#NVRAM_EZPACKET_DEFAULT_BRCM_WAN_NUM_1
 \

129 { "vœn1p‹ts", 
VLAN1_PORTS
, \

130 
NVRAM_NONE
, \

133 { "vœn1hw«me", 
VLAN_HWNAME
, \

134 
NVRAM_NONE
 \

137 

	)

139 
	#NVRAM_EZPACKET_DEFAULT_BRCM_WAN_NUM_2
 \

140 

	)

141 { "vœn2p‹ts", 
	gVLAN2_PORTS
,

142 
	gNVRAM_NONE
,

145 { "vœn2hw«me", 
	gVLAN_HWNAME
,

146 
	gNVRAM_NONE
,

	@nvram_ezpacket-ox810.h

1 #ifde‡
CONFIG_EZP_ARCH_OX810


2 
	#ARCH
 "OX810"

	)

3 #i‡–
WAN_NUM
 =1 ) && ( 
LAN_NUM
 == 1 )

5 #i‡
deföed
(
EZP_PROD_CAT_M
Ë|| deföed(
EZP_PROD_CAT_P
Ë|| deföed(
EZP_PROD_CAT_W
)

6 
	#WAN0_IFNAME
 "µp0"

	)

8 
	#WAN0_IFNAME
 "vœn2"

	)

11 
	#WAN0_IFNAMES
 ""

	)

12 
	#WAN0_HWNAME
 ""

	)

13 
	#WAN0_DEVICE
 "vœn2"

	)

14 
	#WAN0_PORTS
 "4"

	)

16 
	#LAN0_IFNAME
 "br0"

	)

17 
	#LAN0_IFNAMES
 "vœn1"

	)

18 
	#LAN0_IFNAMES_WDS
 "vœn1"

	)

19 
	#LAN0_HWNAME
 ""

	)

20 
	#LAN0_DEVICE
 "vœn1"

	)

21 
	#LAN0_PORTS
 "0 1 2 3"

	)

24 
	#VLAN2_PORTS
 "4 5"

	)

26 
	#VLAN1_PORTS
 "0 1 2 3 5*"

	)

28 
	#VLAN_HWNAME
 "ëh2"

	)

30 
	#STATS_RULE
 "^1^60^vœn1 vœn2Öµ0 br0Ña0 usb0Éth0"

	)

32 #ñi‡–
WAN_NUM
 =2 ) && ( 
LAN_NUM
 == 1 )

34 #i‡
deföed
(
EZP_PROD_CAT_M
Ë|| deföed(
EZP_PROD_CAT_P
Ë|| deföed(
EZP_PROD_CAT_W
)

35 
	#WAN0_IFNAME
 "µp0"

	)

37 
	#WAN0_IFNAME
 "vœn2"

	)

40 
	#WAN0_IFNAMES
 ""

	)

41 
	#WAN0_HWNAME
 ""

	)

42 
	#WAN0_DEVICE
 "vœn2"

	)

43 
	#WAN0_PORTS
 "4"

	)

45 #i‡
deföed
(
EZP_PROD_CAT_N
)

46 
	#WAN1_IFNAME
 "µp1"

	)

48 
	#WAN1_IFNAME
 "vœn3"

	)

51 
	#WAN1_IFNAMES
 ""

	)

52 
	#WAN1_HWNAME
 ""

	)

53 
	#WAN1_DEVICE
 "vœn3"

	)

54 
	#WAN1_PORTS
 "3"

	)

56 
	#LAN0_IFNAME
 "br0"

	)

57 
	#LAN0_IFNAMES
 "vœn1"

	)

58 
	#LAN0_IFNAMES_WDS
 "vœn1"

	)

59 
	#LAN0_HWNAME
 ""

	)

60 
	#LAN0_DEVICE
 "vœn1"

	)

61 
	#LAN0_PORTS
 "0 1 2"

	)

64 
	#VLAN2_PORTS
 "4 5"

	)

66 
	#VLAN3_PORTS
 "3 5"

	)

68 
	#VLAN1_PORTS
 "0 1 2 5"

	)

70 
	#VLAN_HWNAME
 "ëh2"

	)

72 
	#STATS_RULE
 "^1^60^vœn3 vœn1 vœn2Öµ0Öµ1 br0Ña0 usb0Éth0Éth1"

	)

81 #i‚de‡
WL_NUM


82 
	#WL_NUM
 1

	)

85 #i‚de‡
WL_VIRTUAL_NUM


86 
	#WL_VIRTUAL_NUM
 2

	)

89 #i‚de‡
WL_WDS_NUM


90 
	#WL_WDS_NUM
 4

	)

93 #i‚de‡
WL_APCLI_NUM


94 
	#WL_APCLI_NUM
 1

	)

97 #i‡–
WL_NUM
 == 1 )

98 
	#WL_BASIC_RULE
 "1^9^100^6^0"

	)

99 #i‡–
WL_VIRTUAL_NUM
 == 1 )

100 
	#WL0_IFNAME_RULE
 "ø0"

	)

101 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

102 
	#WL0_IFNAME_RULE
 "ø0|ø1"

	)

103 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

104 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

106 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

107 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

108 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

109 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

110 #ñi‡–
WL_NUM
 == 2 )

111 
	#WL_BASIC_RULE
 "1^9^100^6^0|1^9^100^6^0"

	)

112 #i‡–
WL_VIRTUAL_NUM
 == 1 )

113 
	#WL0_IFNAME_RULE
 "ø0"

	)

114 
	#WL1_IFNAME_RULE
 "ø1"

	)

115 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

116 
	#WL0_IFNAME_RULE
 "ø0|ø2"

	)

117 
	#WL1_IFNAME_RULE
 "ø1|ø3"

	)

118 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

119 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

120 
	#WL1_IFNAME_RULE
 "ø1|ø5|ø6|ø7"

	)

122 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

123 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

124 
	#WL1_RULE_NUM
 
WL_VIRTUAL_NUM


	)

125 
	#WL1_RULE_MAX
 
WL_VIRTUAL_NUM


	)

126 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

127 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

128 #ñi‡(
WL_NUM
 == 0 )

133 
	#BW_TYPE
 \

138 "V50M50M", "V100M100M","Cu°om"

	)

139 #i‡–
EZP_PROD_SUBCAT
 == 0 )

140 
	#BW_DOWNLOAD_MAX
 "102400"

	)

141 
	#BW_UPLOAD_MAX
 "102400"

	)

142 
	#BW_DOWNLOAD_MIN
 "64"

	)

143 
	#BW_UPLOAD_MIN
 "64"

	)

144 #ñi‡–
EZP_PROD_SUBCAT
 == 1 )

145 
	#BW_DOWNLOAD_MAX
 "102400"

	)

146 
	#BW_UPLOAD_MAX
 "102400"

	)

147 
	#BW_DOWNLOAD_MIN
 "64"

	)

148 
	#BW_UPLOAD_MIN
 "64"

	)

149 #ñi‡–
EZP_PROD_SUBCAT
 == 2 )

150 
	#BW_DOWNLOAD_MAX
 "102400"

	)

151 
	#BW_UPLOAD_MAX
 "102400"

	)

152 
	#BW_DOWNLOAD_MIN
 "64"

	)

153 
	#BW_UPLOAD_MIN
 "64"

	)

154 #ñi‡–
EZP_PROD_SUBCAT
 == 3 )

155 
	#BW_DOWNLOAD_MAX
 "102400"

	)

156 
	#BW_UPLOAD_MAX
 "102400"

	)

157 
	#BW_DOWNLOAD_MIN
 "64"

	)

158 
	#BW_UPLOAD_MIN
 "64"

	)

159 #ñi‡–
EZP_PROD_SUBCAT
 == 4 )

160 
	#BW_DOWNLOAD_MAX
 "102400"

	)

161 
	#BW_UPLOAD_MAX
 "102400"

	)

162 
	#BW_DOWNLOAD_MIN
 "64"

	)

163 
	#BW_UPLOAD_MIN
 "64"

	)

164 #ñi‡–
EZP_PROD_SUBCAT
 == 5 )

165 
	#BW_DOWNLOAD_MAX
 "102400"

	)

166 
	#BW_UPLOAD_MAX
 "102400"

	)

167 
	#BW_DOWNLOAD_MIN
 "64"

	)

168 
	#BW_UPLOAD_MIN
 "64"

	)

169 #ñi‡–
EZP_PROD_SUBCAT
 == 6 )

170 
	#BW_DOWNLOAD_MAX
 "102400"

	)

171 
	#BW_UPLOAD_MAX
 "102400"

	)

172 
	#BW_DOWNLOAD_MIN
 "64"

	)

173 
	#BW_UPLOAD_MIN
 "64"

	)

176 
	#NVRAM_EZPACKET_DEFAULT_RT305X_LAN_NUM_1
 \

178 { "vœn1p‹ts", 
VLAN1_PORTS
, \

179 
NVRAM_NONE
, \

182 { "vœn1hw«me", 
VLAN_HWNAME
, \

183 
NVRAM_NONE
, \

186 

	)

187 
	#NVRAM_EZPACKET_DEFAULT_RT305X_WAN_NUM_1
 \

189 { "vœn2p‹ts", 
VLAN2_PORTS
, \

190 
NVRAM_NONE
, \

193 { "vœn2hw«me", 
VLAN_HWNAME
, \

194 
NVRAM_NONE
, \

197 

	)

199 
	#NVRAM_EZPACKET_DEFAULT_RT305X_WAN_NUM_2
 \

201 { "vœn2p‹ts", 
VLAN3_PORTS
, \

202 
NVRAM_NONE
, \

205 { "vœn3hw«me", 
VLAN_HWNAME
, \

206 
NVRAM_NONE
, \

209 

	)

	@nvram_ezpacket-rt305x.h

1 #ifde‡
CONFIG_EZP_ARCH_RT305X


2 
	#ARCH
 "RT305X"

	)

3 #i‡
deföed
(
EZP_PROD_SUPERCAT_X
)

4 #i‡
deföed
(
EZP_PROD_CAT_P
)

5 
	~"P/nvøm_ez∑ckë-π305x_P.h
"

7 #i‡
deföed
(
EZP_PROD_CAT_K
)

8 
	~"K/nvøm_ez∑ckë-π305x_K.h
"

10 #i‡
deföed
(
EZP_PROD_CAT_G
)

11 
	~"G/nvøm_ez∑ckë-π305x_G.h
"

13 #i‡
deföed
(
EZP_PROD_CAT_I
)

14 
	~"I/nvøm_ez∑ckë-π305x_I.h
"

18 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
Ë&& !deföed(
NVRAM_EZPACKET_APP_H
)

19 
	~"nvøm_ez∑ckë-≠p.h
"

22 #i‡
deföed
(
EZP_PROD_SUPERCAT_X
)

23 #i‡
deföed
(
EZP_PROD_CAT_P
)

24 
	~"P/nvøm_ez∑ckë_P.h
"

25 
	~"P/nvøm_ez∑ckë-≠p_P.h
"

27 #i‡
deföed
(
EZP_PROD_CAT_K
)

28 
	~"K/nvøm_ez∑ckë_K.h
"

29 
	~"K/nvøm_ez∑ckë-≠p_K.h
"

31 #i‡
deföed
(
EZP_PROD_CAT_G
)

32 
	~"G/nvøm_ez∑ckë_G.h
"

33 
	~"G/nvøm_ez∑ckë-≠p_G.h
"

35 #i‡
deföed
(
EZP_PROD_CAT_I
)

36 
	~"I/nvøm_ez∑ckë_I.h
"

37 
	~"I/nvøm_ez∑ckë-≠p_I.h
"

41 #i‚de‡
WL_NUM


42 
	#WL_NUM
 1

	)

45 #ifde‡
EZP_PROD_BRAND_PLANET


46 
	#WL_VIRTUAL_NUM
 4

	)

49 #i‡
deföed
(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_AXB
Ë|| deföed(
PLATFORM_LIS
Ë|| deföed(
PLATFORM_AXM
Ë|| deföed(
PLATFORM_M2E
)

50 
	#WL_VIRTUAL_NUM
 1

	)

51 #ñi‡
deföed
(
PLATFORM_ALS
)

52 
	#WL_VIRTUAL_NUM
 2

	)

55 #i‚de‡
WL_VIRTUAL_NUM


56 
	#WL_VIRTUAL_NUM
 2

	)

59 #i‚de‡
WL_WDS_NUM


60 
	#WL_WDS_NUM
 4

	)

63 #i‚de‡
WL_APCLI_NUM


64 
	#WL_APCLI_NUM
 1

	)

67 #i‡–
WL_NUM
 == 1 )

68 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
Ë&& !deföed(
EZP_SUB_BRAND_APOLLO
)

69 
	#WL_BASIC_RULE
 "0^9^100^6^0"

	)

70 #ñi‡
deföed
 (
EZP_PROD_BRAND_AXIM
)

71 
	#WL_BASIC_RULE
 "1^9^100^0^0"

	)

73 
	#WL_BASIC_RULE
 "1^9^100^6^0"

	)

75 #i‡–
WL_VIRTUAL_NUM
 == 1 )

76 
	#WL0_IFNAME_RULE
 "ø0"

	)

77 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

78 
	#WL0_IFNAME_RULE
 "ø0|ø1"

	)

79 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

80 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

82 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

83 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

84 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

85 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

86 #ñi‡–
WL_NUM
 == 2 )

87 
	#WL_BASIC_RULE
 "1^9^100^6^0|1^9^100^6^0"

	)

88 #i‡–
WL_VIRTUAL_NUM
 == 1 )

89 
	#WL0_IFNAME_RULE
 "ø0"

	)

90 
	#WL1_IFNAME_RULE
 "ø1"

	)

91 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

92 
	#WL0_IFNAME_RULE
 "ø0|ø2"

	)

93 
	#WL1_IFNAME_RULE
 "ø1|ø3"

	)

94 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

95 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

96 
	#WL1_IFNAME_RULE
 "ø1|ø5|ø6|ø7"

	)

98 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

99 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

100 
	#WL1_RULE_NUM
 
WL_VIRTUAL_NUM


	)

101 
	#WL1_RULE_MAX
 
WL_VIRTUAL_NUM


	)

102 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

103 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

104 #ñi‡(
WL_NUM
 == 0 )

105 
	#WL_BASIC_RULE
 "0^9^100^6^0"

	)

106 #i‡–
WL_VIRTUAL_NUM
 == 1 )

107 
	#WL0_IFNAME_RULE
 "ø0"

	)

108 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

109 
	#WL0_IFNAME_RULE
 "ø0|ø1"

	)

110 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

111 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

113 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

114 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

115 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

116 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

121 #i‡–
WAN_NUM
 =1 ) && ( 
LAN_NUM
 == 1 )

123 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

124 #i‡
deföed
(
PLATFORM_AXM
Ë|| deföed(
PLATFORM_LIS
)

125 
	#WAN0_IFNAME
 "≠˛i0"

	)

126 #ñi‡
deföed
(
PLATFORM_M2E
Ë|| deföed(
PLATFORM_ALS
)

127 
	#WAN0_IFNAME
 "vœn2"

	)

128 #ñi‡
deföed
(
PLATFORM_AXA
)

129 
	#WAN0_IFNAME
 "vœn2"

	)

130 #ñi‡(
APPMGR_WWAN
 == 1)

132 
	#WAN0_IFNAME
 "µp0"

	)

134 
	#WAN0_IFNAME
 "vœn2"

	)

138 
	#WAN0_IFNAMES
 ""

	)

139 
	#WAN0_HWNAME
 ""

	)

140 
	#WAN0_DEVICE
 "vœn2"

	)

141 
	#WAN0_PORTS
 "4"

	)

143 
	#LAN0_IFNAME
 "br0"

	)

144 
	#LAN0_IFNAMES
 "vœn1Ña0Ña1áp˛i0"

	)

145 
	#LAN0_IFNAMES_WDS
 "vœn1Ña0Ña1áp˛i0 wds0 wds1 wds2 wds3"

	)

146 
	#LAN0_HWNAME
 ""

	)

147 
	#LAN0_DEVICE
 "vœn1"

	)

149 #i‡
deföed
(
AR8316
Ë|| deföed(
AR8328
)

150 #i‡
deföed
 (
EZP_SUB_BRAND_GARMIN
)

151 
	#VLAN_RULE_NUM
 4

	)

153 
	#VLAN_RULE_NUM
 2

	)

155 
	#VLAN_RULE_MAX
 8

	)

156 
	#VLANPORT_RULE_NUM
 5

	)

157 
	#VLANPORT_RULE_MAX
 6

	)

158 #i‡
deföed
 (
EZP_SUB_BRAND_GARMIN
)

160 
	#VLAN_RULE
 "LAN1^1^ëh2^1^011111|WAN1^1^ëh2^2^100001|ARM^1^ëh2^4^011111|GMN^1^ëh2^3^011111"

	)

161 
	#VLANPORT_RULE
 "PORT1^0^1^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^2^1^2^010111^1|PORT4^3^3^1^2^011011^1|PORT5^4^4^1^2^011101^1|PORT6^5^5^2^2^111111^1"

	)

162 #ñi‡
deföed
 (
PLATFORM_AMD
Ë|| deföed (
PLATFORM_AMC
Ë|| deföed (
PLATFORM_GMA
)

163 
	#VLAN_RULE
 "LAN1^1^ëh2^1^011111|WAN1^1^ëh2^2^100001"

	)

164 
	#VLANPORT_RULE
 "PORT1^0^2^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^1^1^2^011011^1|PORT5^4^1^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

166 
	#VLAN_RULE
 "LAN1^1^ëh2^1^111101|WAN1^1^ëh2^2^000011"

	)

167 
	#VLANPORT_RULE
 "PORT1^0^1^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^1^1^2^011011^1|PORT5^4^2^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

170 
	#VLAN_RULE_NUM
 2

	)

171 
	#VLAN_RULE_MAX
 8

	)

172 
	#VLANPORT_RULE_NUM
 5

	)

173 
	#VLANPORT_RULE_MAX
 7

	)

174 #i‡
deföed
 (
PLATFORM_BAB
Ë|| deföed (
PLATFORM_AXB
Ë|| deföed(
PLATFORM_AXM
)

176 
	#VLAN_RULE
 "LAN1^1^ëh2^1^0111101|WAN1^1^ëh2^2^1000001"

	)

177 
	#VLANPORT_RULE
 "PORT1^0^2^0^1|PORT2^1^1^0^1|PORT3^2^1^0^1|PORT4^3^1^0^1|PORT5^4^1^0^1|PORT6^5^0^0^1|PORT7^6^0^1^1"

	)

178 #ñi‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
Ë|| deföed(
PLATFORM_ALS
)

180 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1111001|WAN1^1^ëh2^2^0000101"

	)

181 
	#VLANPORT_RULE
 "PORT1^0^1^0^1|PORT2^1^1^0^1|PORT3^2^1^0^1|PORT4^3^1^0^1|PORT5^4^2^0^1|PORT6^5^0^0^1|PORT7^6^0^1^1"

	)

182 #ñi‡
deföed
 (
PLATFORM_LIS
)

183 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1111101|WAN1^1^ëh2^2^0000001"

	)

184 
	#VLANPORT_RULE
 "PORT1^0^1^0^1|PORT2^1^1^0^1|PORT3^2^1^0^1|PORT4^3^1^0^1|PORT5^4^1^0^1|PORT6^5^0^0^1|PORT7^6^0^1^1"

	)

186 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1111001|WAN1^1^ëh2^2^0000101"

	)

187 
	#VLANPORT_RULE
 "PORT1^0^1^0^1|PORT2^1^1^0^1|PORT3^2^1^0^1|PORT4^3^1^0^1|PORT5^4^2^0^1|PORT6^5^0^0^1|PORT7^6^0^1^1"

	)

192 
	#LAN0_PORTS
 "0 1 2 3"

	)

194 
	#VLAN2_PORTS
 "4 5"

	)

196 
	#VLAN1_PORTS
 "0 1 2 3 5*"

	)

197 
	#VLAN_HWNAME
 "ëh2"

	)

199 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

200 #i‡
deföed
(
EZP_PROD_CAT_K
)

202 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^"

	)

203 #ñi‡
deföed
(
PLATFORM_M2E
Ë|| deföed(
PLATFORM_ALS
)

204 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^"

	)

206 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^"

	)

210 
	#BR_RULE_NUM
 2

	)

211 
	#BR_RULE_MAX
 8

	)

213 
	#STATS_RULE
 "^1^60^vœn1 vœn2Öµ0 br0Ña0 usb0Éth0"

	)

215 #ñi‡–
WAN_NUM
 =2 ) && ( 
LAN_NUM
 == 1 )

217 
	#WAN0_IFNAME
 "vœn2"

	)

218 
	#WAN0_IFNAMES
 ""

	)

219 
	#WAN0_HWNAME
 ""

	)

220 
	#WAN0_DEVICE
 "vœn2"

	)

221 
	#WAN0_PORTS
 "4"

	)

224 #i‡
deföed
(
EZP_PROD_CAT_N
Ë|| deföed(
EZP_PROD_CAT_A
Ë|| deföed(
EZP_PROD_CAT_I
)

225 
	#WAN1_IFNAME
 "µp1"

	)

227 
	#WAN1_IFNAME
 "vœn3"

	)

230 #i‡
deföed
(
EZP_PROD_BRAND_ZYUS
)

231 
	#WAN1_DEVICE
 "µp1"

	)

233 
	#WAN1_DEVICE
 "vœn3"

	)

236 
	#WAN1_IFNAMES
 ""

	)

237 
	#WAN1_HWNAME
 ""

	)

238 
	#WAN1_PORTS
 "3"

	)

240 
	#LAN0_IFNAME
 "br0"

	)

241 
	#LAN0_IFNAMES
 "vœn1Ña0Ña1áp˛i0"

	)

242 
	#LAN0_IFNAMES_WDS
 "vœn1Ña0Ña1áp˛i0 wds0 wds1 wds2 wds3"

	)

243 
	#LAN0_HWNAME
 ""

	)

244 
	#LAN0_DEVICE
 "vœn1"

	)

245 
	#LAN0_PORTS
 "0 1 2"

	)

248 #i‡
deföed
(
AR8316
Ë|| deföed(
AR8328
)

249 
	#VLAN_RULE_MAX
 16

	)

250 
	#VLANPORT_RULE_NUM
 5

	)

251 
	#VLANPORT_RULE_MAX
 6

	)

252 #i‡
deföed
 (
PLATFORM_AMD
Ë|| deföed (
PLATFORM_AMC
Ë|| deföed (
PLATFORM_GMA
)

253 
	#VLAN_RULE_NUM
 2

	)

254 
	#VLAN_RULE
 "LAN1^1^ëh2^1^011111|WAN1^1^ëh2^2^100001"

	)

255 
	#VLANPORT_RULE
 "PORT1^0^2^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^1^1^2^011011^1|PORT5^4^1^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

256 #ñi‡
deföed
(
PLATFORM_ABE
Ë|| deföed(
PLATFORM_ABE16
)

257 
	#VLAN_RULE_NUM
 2

	)

258 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1111011^^1|WAN1^1^ëh2^2^0000111^^1"

	)

259 
	#VLANPORT_RULE
 "PORT1^0^1^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^1^1^2^011011^1|PORT5^4^2^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

260 #ñi‡
deföed
(
PLATFORM_BAD
)

261 
	#VLAN_RULE_NUM
 2

	)

262 
	#VLAN_RULE
 "LAN1^1^ëh2^1^111101|WAN1^1^ëh2^2^000011"

	)

263 
	#VLANPORT_RULE
 "PORT1^0^1^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^1^1^2^011011^1|PORT5^4^2^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

265 
	#VLAN_RULE_NUM
 3

	)

266 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1110011^^1|WAN1^1^ëh2^2^0000111^^1|WAN2^1^ëh2^3^0001011^^1"

	)

267 
	#VLANPORT_RULE
 "PORT1^0^1^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^3^1^2^011011^1|PORT5^4^2^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

270 
	#VLAN_RULE_NUM
 3

	)

271 
	#VLAN_RULE_MAX
 16

	)

272 
	#VLANPORT_RULE_NUM
 5

	)

273 
	#VLANPORT_RULE_MAX
 7

	)

274 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1110001|WAN1^1^ëh2^2^0000101|WAN2^1^ëh2^3^0001001"

	)

275 
	#VLANPORT_RULE
 "PORT1^0^1^0^1|PORT2^1^1^0^1|PORT3^2^1^0^1|PORT4^3^3^0^1|PORT5^4^2^0^1|PORT6^5^0^0^1|PORT7^6^0^1^1"

	)

279 
	#VLAN2_PORTS
 "4 5"

	)

281 
	#VLAN3_PORTS
 "3 5"

	)

283 
	#VLAN1_PORTS
 "0 1 2 5"

	)

285 
	#VLAN_HWNAME
 "ëh2"

	)

287 #i‡
deföed
(
EZP_PROD_BRAND_ZYUS
)

288 #i‡
deföed
(
EZP_PROD_CAT_N
)

289 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^"

	)

290 #ñi‡
deföed
(
EZP_PROD_CAT_A
)

291 
	#BR_RULE
 "LAN1^1^vœn1Ña0^|WAN1^0^vœn2^"

	)

293 
	#BR_RULE_NUM
 2

	)

294 
	#STATS_RULE
 "^1^60^vœn1 vœn2Öµ0Öµ1 br0Ña0 usb0Éth0Éth1"

	)

296 #i‡
deföed
 (
PLATFORM_AMC
)

297 
	#BR_RULE
 "LAN1^1^vœn1Ña0^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

299 #i‡
deföed
(
EZP_PROD_CAT_K
)

301 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

303 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

306 
	#BR_RULE_NUM
 3

	)

307 
	#STATS_RULE
 "^1^60^vœn3 vœn1 vœn2Öµ0Öµ1 br0Ña0 usb0Éth0Éth1"

	)

310 
	#BR_RULE_MAX
 16

	)

313 #ñi‡–
WAN_NUM
 =3 ) && ( 
LAN_NUM
 == 1 )

315 
	#WAN0_IFNAME
 "vœn2"

	)

316 
	#WAN0_IFNAMES
 ""

	)

317 
	#WAN0_HWNAME
 ""

	)

318 
	#WAN0_DEVICE
 "vœn2"

	)

319 
	#WAN0_PORTS
 "4"

	)

321 
	#WAN1_IFNAME
 "vœn3"

	)

322 
	#WAN1_IFNAMES
 ""

	)

323 
	#WAN1_HWNAME
 ""

	)

324 
	#WAN1_DEVICE
 "vœn3"

	)

325 
	#WAN1_PORTS
 "3"

	)

327 #i‡
deföed
(
EZP_PROD_CAT_N
Ë|| deföed(
EZP_PROD_CAT_A
)

328 
	#WAN2_IFNAME
 "µp2"

	)

329 
	#WAN2_DEVICE
 "µp2"

	)

331 
	#WAN2_IFNAME
 "vœn4"

	)

332 
	#WAN2_DEVICE
 "vœn4"

	)

335 
	#WAN2_IFNAMES
 ""

	)

336 
	#WAN2_HWNAME
 ""

	)

337 
	#WAN2_PORTS
 "2"

	)

339 
	#LAN0_IFNAME
 "br0"

	)

340 
	#LAN0_IFNAMES
 "vœn1Ña0Ña1áp˛i0"

	)

341 
	#LAN0_IFNAMES_WDS
 "vœn1Ña0Ña1áp˛i0 wds0 wds1 wds2 wds3"

	)

342 
	#LAN0_HWNAME
 ""

	)

343 
	#LAN0_DEVICE
 "vœn1"

	)

344 
	#LAN0_PORTS
 "0 1"

	)

346 #i‡
deföed
(
AR8316
Ë|| deföed(
AR8328
)

347 
	#VLAN_RULE_NUM
 3

	)

348 
	#VLAN_RULE_MAX
 16

	)

349 
	#VLANPORT_RULE_NUM
 5

	)

350 
	#VLANPORT_RULE_MAX
 6

	)

351 #i‡
deföed
 (
PLATFORM_AMD
Ë|| deföed (
PLATFORM_AMC
Ë|| deföed (
PLATFORM_GMA
)

352 
	#VLAN_RULE
 "LAN1^1^ëh2^1^011101|WAN1^1^ëh2^2^100001|WAN2^1^ëh2^3^000011"

	)

353 
	#VLANPORT_RULE
 "PORT1^0^2^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^1^1^2^011011^1|PORT5^4^3^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

355 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1110011^^1|WAN1^1^ëh2^2^0000111^^1|WAN2^1^ëh2^3^0001011^^1"

	)

356 
	#VLANPORT_RULE
 "PORT1^0^1^1^2^000001^1|PORT2^1^1^1^2^001111^1|PORT3^2^1^1^2^010111^1|PORT4^3^3^1^2^011011^1|PORT5^4^2^1^2^011101^1|PORT6^5^2^2^2^111111^1"

	)

359 
	#VLAN_RULE_NUM
 3

	)

360 
	#VLAN_RULE_MAX
 16

	)

361 
	#VLANPORT_RULE_NUM
 5

	)

362 
	#VLANPORT_RULE_MAX
 7

	)

363 
	#VLAN_RULE
 "LAN1^1^ëh2^1^1110001|WAN1^1^ëh2^2^0000101|WAN2^1^ëh2^3^0001001"

	)

364 
	#VLANPORT_RULE
 "PORT1^0^1^0^1|PORT2^1^1^0^1|PORT3^2^1^0^1|PORT4^3^3^0^1|PORT5^4^2^0^1|PORT6^5^0^0^1|PORT7^6^0^1^1"

	)

368 
	#VLAN2_PORTS
 "4 5"

	)

370 
	#VLAN3_PORTS
 "3 5"

	)

372 
	#VLAN1_PORTS
 "0 1 2 5"

	)

374 
	#VLAN_HWNAME
 "ëh2"

	)

376 #i‡
deföed
 (
PLATFORM_AMC
)

377 
	#BR_RULE
 "LAN1^1^vœn1Ña0^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

379 #i‡
deföed
(
EZP_PROD_CAT_K
)

381 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

383 
	#BR_RULE
 "LAN1^1^vœn1Ña0Ña1 wds0 wds1 wds2 wds3áp˛i0^|WAN1^0^vœn2^|WAN2^0^vœn3^"

	)

387 
	#BR_RULE_NUM
 3

	)

388 
	#BR_RULE_MAX
 16

	)

389 
	#STATS_RULE
 "^1^60^vœn3 vœn1 vœn2Öµ0Öµ1Öµ2 br0Ña0 usb0Éth0Éth1"

	)

396 
	#BW_TYPE
 \

400 "2M2M", "4M4M", "10M10M", "25M25M", "50M50M", "100M100M","Cu°om"

	)

401 #i‡–
EZP_PROD_SUBCAT
 == 0 )

402 
	#BW_DOWNLOAD_MAX
 "102400"

	)

403 
	#BW_UPLOAD_MAX
 "102400"

	)

404 
	#BW_DOWNLOAD_MIN
 "64"

	)

405 
	#BW_UPLOAD_MIN
 "64"

	)

406 #ñi‡–
EZP_PROD_SUBCAT
 == 1 )

407 
	#BW_DOWNLOAD_MAX
 "102400"

	)

408 
	#BW_UPLOAD_MAX
 "102400"

	)

409 
	#BW_DOWNLOAD_MIN
 "64"

	)

410 
	#BW_UPLOAD_MIN
 "64"

	)

411 #ñi‡–
EZP_PROD_SUBCAT
 == 2 )

412 
	#BW_DOWNLOAD_MAX
 "102400"

	)

413 
	#BW_UPLOAD_MAX
 "102400"

	)

414 
	#BW_DOWNLOAD_MIN
 "64"

	)

415 
	#BW_UPLOAD_MIN
 "64"

	)

416 #ñi‡–
EZP_PROD_SUBCAT
 == 3 )

417 
	#BW_DOWNLOAD_MAX
 "102400"

	)

418 
	#BW_UPLOAD_MAX
 "102400"

	)

419 
	#BW_DOWNLOAD_MIN
 "64"

	)

420 
	#BW_UPLOAD_MIN
 "64"

	)

421 #ñi‡–
EZP_PROD_SUBCAT
 == 4 )

422 #i‡
deföed
(
EZP_PROD_BRAND_ZYUS
)

423 
	#BW_DOWNLOAD_MAX
 "51200"

	)

424 
	#BW_UPLOAD_MAX
 "51200"

	)

426 
	#BW_DOWNLOAD_MAX
 "102400"

	)

427 
	#BW_UPLOAD_MAX
 "102400"

	)

429 
	#BW_DOWNLOAD_MIN
 "64"

	)

430 
	#BW_UPLOAD_MIN
 "64"

	)

431 #ñi‡–
EZP_PROD_SUBCAT
 == 5 )

432 
	#BW_DOWNLOAD_MAX
 "102400"

	)

433 
	#BW_UPLOAD_MAX
 "102400"

	)

434 
	#BW_DOWNLOAD_MIN
 "64"

	)

435 
	#BW_UPLOAD_MIN
 "64"

	)

436 #ñi‡–
EZP_PROD_SUBCAT
 == 6 )

437 
	#BW_DOWNLOAD_MAX
 "102400"

	)

438 
	#BW_UPLOAD_MAX
 "102400"

	)

439 
	#BW_DOWNLOAD_MIN
 "64"

	)

440 
	#BW_UPLOAD_MIN
 "64"

	)

443 
	#NVRAM_EZPACKET_DEFAULT_RT305X_LAN_NUM_1
 \

445 { "vœn1p‹ts", 
VLAN1_PORTS
, \

446 
NVRAM_NONE
, \

449 { "vœn1hw«me", 
VLAN_HWNAME
, \

450 
NVRAM_NONE
, \

453 

	)

454 
	#NVRAM_EZPACKET_DEFAULT_RT305X_WAN_NUM_1
 \

456 { "vœn2p‹ts", 
VLAN2_PORTS
, \

457 
NVRAM_NONE
, \

460 { "vœn2hw«me", 
VLAN_HWNAME
, \

461 
NVRAM_NONE
, \

464 

	)

466 
	#NVRAM_EZPACKET_DEFAULT_RT305X_WAN_NUM_2
 \

468 { "vœn2p‹ts", 
VLAN3_PORTS
, \

469 
NVRAM_NONE
, \

472 { "vœn3hw«me", 
VLAN_HWNAME
, \

473 
NVRAM_NONE
, \

476 

	)

	@nvram_ezpacket-rtl865x.h

2 
	#ARCH
 "Ró…ek"

	)

3 #i‡–
WAN_NUM
 =1 ) && ( 
LAN_NUM
 == 1 )

5 
	#WAN0_IFNAME
 "ëh0"

	)

6 
	#WAN0_IFNAMES
 ""

	)

7 
	#WAN0_HWNAME
 ""

	)

8 
	#WAN0_DEVICE
 "ëh0"

	)

9 
	#WAN0_PORTS
 "4"

	)

11 
	#LAN0_IFNAME
 "br0"

	)

12 
	#LAN0_IFNAMES
 "ëh1Ña0"

	)

13 
	#LAN0_IFNAMES_WDS
 "ëh1Ña0Ña1Ña2Ña3Ña4"

	)

14 
	#LAN0_HWNAME
 ""

	)

15 
	#LAN0_DEVICE
 "ëh1"

	)

16 
	#LAN0_PORTS
 "0 1 2 3"

	)

18 
	#STATS_RULE
 "^1^60^ëh0Éth1 br0Ña0"

	)

20 #ñi‡–
WAN_NUM
 =2 ) && ( 
LAN_NUM
 == 1 )

22 
	#WAN0_IFNAME
 "ëh0"

	)

23 
	#WAN0_IFNAMES
 ""

	)

24 
	#WAN0_HWNAME
 ""

	)

25 
	#WAN0_DEVICE
 "ëh0"

	)

26 
	#WAN0_PORTS
 "4"

	)

28 
	#WAN1_IFNAME
 "ëh1"

	)

29 
	#WAN1_IFNAMES
 ""

	)

30 
	#WAN1_HWNAME
 ""

	)

31 
	#WAN1_DEVICE
 "ëh1"

	)

32 
	#WAN1_PORTS
 "3"

	)

34 
	#LAN0_IFNAME
 "br0"

	)

35 
	#LAN0_IFNAMES
 "ëh2Ña0"

	)

36 
	#LAN0_IFNAMES_WDS
 "ëh2Ña0Ña1Ña2Ña3Ña4"

	)

37 
	#LAN0_HWNAME
 ""

	)

38 
	#LAN0_DEVICE
 ""

	)

39 
	#LAN0_PORTS
 "0 1 2"

	)

41 
	#STATS_RULE
 "^1^60^ëh0Éth1Éth2 br0Ña0"

	)

49 #i‚de‡
WL_NUM


50 
	#WL_NUM
 1

	)

53 #i‚de‡
WL_VIRTUAL_NUM


54 
	#WL_VIRTUAL_NUM
 1

	)

57 #i‚de‡
WL_WDS_NUM


58 
	#WL_WDS_NUM
 4

	)

61 #i‚de‡
WL_APCLI_NUM


62 
	#WL_APCLI_NUM
 1

	)

65 #i‡–
WL_NUM
 == 1 )

66 #i‡–
WL_VIRTUAL_NUM
 == 1 )

67 
	#WL0_IFNAME_RULE
 "ø0"

	)

68 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

69 
	#WL0_IFNAME_RULE
 "ø0|ø1"

	)

70 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

71 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

73 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

74 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

75 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

76 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

77 #ñi‡–
WL_NUM
 == 2 )

78 #i‡–
WL_VIRTUAL_NUM
 == 1 )

79 
	#WL0_IFNAME_RULE
 "ø0"

	)

80 
	#WL1_IFNAME_RULE
 "ø1"

	)

81 #ñi‡–
WL_VIRTUAL_NUM
 == 2 )

82 
	#WL0_IFNAME_RULE
 "ø0|ø2"

	)

83 
	#WL1_IFNAME_RULE
 "ø1|ø3"

	)

84 #ñi‡–
WL_VIRTUAL_NUM
 == 4 )

85 
	#WL0_IFNAME_RULE
 "ø0|ø1|ø2|ø3"

	)

86 
	#WL1_IFNAME_RULE
 "ø1|ø5|ø6|ø7"

	)

88 
	#WL0_RULE_NUM
 
WL_VIRTUAL_NUM


	)

89 
	#WL0_RULE_MAX
 
WL_VIRTUAL_NUM


	)

90 
	#WL1_RULE_NUM
 
WL_VIRTUAL_NUM


	)

91 
	#WL1_RULE_MAX
 
WL_VIRTUAL_NUM


	)

92 
	#WDS_RULE_MAX
 
WL_WDS_NUM


	)

93 
	#APCLI_RULE_MAX
 
WL_APCLI_NUM


	)

103 
	#BW_TYPE
 \

107 "C8M640K", "C10M1M", "V2M2M", "V4M4M", "V10M10M", "Cu°om"

	)

108 #i‡–
EZP_PROD_SUBCAT
 == 0 )

109 
	#BW_DOWNLOAD_MAX
 "12288"

	)

110 
	#BW_UPLOAD_MAX
 "12288"

	)

111 
	#BW_DOWNLOAD_MIN
 "64"

	)

112 
	#BW_UPLOAD_MIN
 "64"

	)

113 #ñi‡–
EZP_PROD_SUBCAT
 == 1 )

114 
	#BW_DOWNLOAD_MAX
 "12288"

	)

115 
	#BW_UPLOAD_MAX
 "12288"

	)

116 
	#BW_DOWNLOAD_MIN
 "64"

	)

117 
	#BW_UPLOAD_MIN
 "64"

	)

118 #ñi‡–
EZP_PROD_SUBCAT
 == 2 )

119 
	#BW_DOWNLOAD_MAX
 "12288"

	)

120 
	#BW_UPLOAD_MAX
 "12288"

	)

121 
	#BW_DOWNLOAD_MIN
 "64"

	)

122 
	#BW_UPLOAD_MIN
 "64"

	)

123 #ñi‡–
EZP_PROD_SUBCAT
 == 3 )

124 
	#BW_DOWNLOAD_MAX
 "12288"

	)

125 
	#BW_UPLOAD_MAX
 "12288"

	)

126 
	#BW_DOWNLOAD_MIN
 "64"

	)

127 
	#BW_UPLOAD_MIN
 "64"

	)

128 #ñi‡–
EZP_PROD_SUBCAT
 == 4 )

129 
	#BW_DOWNLOAD_MAX
 "12288"

	)

130 
	#BW_UPLOAD_MAX
 "12288"

	)

131 
	#BW_DOWNLOAD_MIN
 "64"

	)

132 
	#BW_UPLOAD_MIN
 "64"

	)

133 #ñi‡–
EZP_PROD_SUBCAT
 == 5 )

134 
	#BW_DOWNLOAD_MAX
 "12288"

	)

135 
	#BW_UPLOAD_MAX
 "12288"

	)

136 
	#BW_DOWNLOAD_MIN
 "64"

	)

137 
	#BW_UPLOAD_MIN
 "64"

	)

138 #ñi‡–
EZP_PROD_SUBCAT
 == 6 )

139 
	#BW_DOWNLOAD_MAX
 "12288"

	)

140 
	#BW_UPLOAD_MAX
 "12288"

	)

141 
	#BW_DOWNLOAD_MIN
 "64"

	)

142 
	#BW_UPLOAD_MIN
 "64"

	)

	@nvram_ezpacket.h

22 #i‚de‡
_NVRAM_EZPACKET_H


23 
	#_NVRAM_EZPACKET_H


	)

25 
	~<bcmnvøm.h
>

28 #ifde‡
CONFIG_EZP_ARCH_RT305X


29 
	~"nvøm_ez∑ckë-π305x.h
"

31 #ifde‡
CONFIG_EZP_ARCH_AS500


32 
	~"nvøm_ez∑ckë-as500.h
"

34 #ifde‡
CONFIG_EZP_ARCH_BRCM


35 
	~"nvøm_ez∑ckë-brcm.h
"

37 #ifde‡
CONFIG_EZP_ARCH_OX810


38 
	~"nvøm_ez∑ckë-ox810.h
"

40 #ifde‡
CONFIG_EZP_ARCH_RTL865X


41 
	~"nvøm_ez∑ckë-πl865x.h
"

44 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
Ë&& !deföed(
NVRAM_EZPACKET_APP_H
)

45 
	~"nvøm_ez∑ckë-≠p.h
"

48 #i‡
deföed
(
EZP_PROD_SUPERCAT_X
)

49 #i‡
deföed
(
EZP_PROD_CAT_P
)

50 
	~"P/nvøm_ez∑ckë_P.h
"

51 
	~"P/nvøm_ez∑ckë-≠p_P.h
"

53 #i‡
deföed
(
EZP_PROD_CAT_K
)

54 
	~"K/nvøm_ez∑ckë_K.h
"

55 
	~"K/nvøm_ez∑ckë-≠p_K.h
"

57 #i‡
deföed
(
EZP_PROD_CAT_G
)

58 
	~"G/nvøm_ez∑ckë_G.h
"

59 
	~"G/nvøm_ez∑ckë-≠p_G.h
"

61 #i‡
deföed
(
EZP_PROD_CAT_I
)

62 
	~"I/nvøm_ez∑ckë_I.h
"

63 
	~"I/nvøm_ez∑ckë-≠p_I.h
"

68 #i‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
)

69 
	#BCCLINET_WAN
 1

	)

71 
	#BCCLINET_WAN
 0

	)

75 #i‡–
LAN_NUM
 == 1 )

76 
	#LAN_MAIN_RULE
 "LAN1^1^1500^0^1"

	)

77 #i‡
deföed
(
EZP_PROD_BRAND_ZYUS
)

78 
	#LAN_IPADDR_MASK
 "192.168.10."

	)

79 #ñi‡
deföed
(
EZP_PROD_BRAND_PLANET
)

80 
	#LAN_IPADDR_MASK
 "192.168.0."

	)

81 #ñi‡
deföed
(
EZP_SUB_BRAND_GARMIN
)

82 
	#LAN_IPADDR_MASK
 "10.199.221."

	)

83 #ñi‡
deföed
(
EZP_SUB_BRAND_SONY
)

84 
	#LAN_IPADDR_MASK
 "192.168.40."

	)

85 #ñi‡
deföed
(
PLATFORM_AXM
)

86 
	#LAN_IPADDR_MASK
 "192.168.50."

	)

87 #ñi‡
deföed
(
PLATFORM_M2E
Ë|| deföed(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_ALS
)

88 
	#LAN_IPADDR_MASK
 "192.168.60."

	)

90 
	#LAN_IPADDR_MASK
 "192.168.1."

	)

92 #i‡
deföed
(
EZP_SUB_BRAND_APOLLO
)

93 
	#LAN_STATIC_RULE_DEFAULT
 
LAN_IPADDR_MASK
"254^24^^"LAN_IPADDR_MASK"254^"

	)

94 #ñi‡
deföed
(
EZP_SUB_BRAND_GARMIN
)

95 
	#LAN_STATIC_RULE_DEFAULT
 
LAN_IPADDR_MASK
"254^25^^"LAN_IPADDR_MASK"254^"

	)

97 
	#LAN_STATIC_RULE_DEFAULT
 
LAN_IPADDR_MASK
"1^24^^"LAN_IPADDR_MASK"1^"

	)

99 
	#GUEST_LAN_RULE
 "0^192.168.2.1^24"

	)

100 
	#LAN_HWADDR_CLONE_RULE
 "0^"

	)

101 
	#LAN_STATUS_RULE
 "0^0^0^n⁄e^0"

	)

106 
	#WIZARD_RULE
 "1^1^0^1^1^0^1^0"

	)

107 
	#WL_COUNTRY_CODE
 "TW"

	)

108 
	#WL_REGION_ABAND
 "7"

	)

110 #i‡–
EZP_PROD_SUBCAT
 == 0 )

112 #ifde‡
EZP_PROD_SUPERCAT_X


113 
	#X_MODE_DATA
 "St‹age^K|3G/4G^P"

	)

115 
	#X_MODE_DATA
 ""

	)

118 
	#FL_HWADDR_RULE_MAX
 "64"

	)

120 #i‡
deföed
(
EZP_PROD_CAT_P
Ë|| deföed(
EZP_PROD_CAT_K
Ë|| deföed(
EZP_PROD_CAT_U
Ë|| deföed(
EZP_PROD_CAT_W
Ë|| deföed(
EZP_PROD_CAT_R
)

121 
	#CT_MAX
 "10000"

	)

123 
	#CT_MAX
 "20000"

	)

126 
	#RT_RULE_MAX
 "32"

	)

128 #ifde‡
EZP_PROD_BRAND_PLANET


129 
	#BW_RULE_MAX
 "32"

	)

130 
	#BW_SBM_RULE_MAX
 "16"

	)

132 
	#BW_SBM_RULE_MAX
 "0"

	)

134 
	#BW_DBM_RULE_MAX
 "0"

	)

135 
	#SCHED_RULE_MAX
 "16"

	)

136 
	#FL_RULE_MAX
 "64"

	)

137 
	#FR_RULE_MAX
 "64"

	)

138 
	#WF_RULE_MAX
 "16"

	)

140 #ifde‡
EZP_PROD_BRAND_PLANET


141 
	#SBM_MAX
 "0"

	)

142 
	#DBM_MAX
 "1"

	)

144 
	#DBM_MAX
 "0"

	)

147 
	#FL_RULE_NUM
 "3"

	)

148 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

149 
	#VS_RULE_MAX
 "32"

	)

150 
	#BW_ENABLE
 "0"

	)

153 #ifde‡
EZP_PROD_BRAND_PLANET


154 
	#BW_SBM_RULE_NUM
 "1"

	)

155 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^^dißbÀd^dißbÀd^1"

	)

157 
	#BW_SBM_RULE_NUM
 "0"

	)

158 
	#BW_SBM_RULE
 ""

	)

161 
	#BW_DBM_RULE_NUM
 "0"

	)

162 
	#BW_DBM_RULE
 ""

	)

163 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^8^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

164 
	#VNC_SESSION_MAX
 "16"

	)

165 
	#BT_TORRENT_MAX
 "10"

	)

166 
	#FTPD_USER_RULE_MAX
 "4"

	)

167 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

168 
	#ISUSER_RULE_MAX
 "4"

	)

169 
	#ISHOST_RULE_MAX
 "4"

	)

172 #i‡–
WAN_NUM
 == 1 )

174 #i‡
deföed
(
EZP_PROD_CAT_O
)

175 
	#PPTPD_SESSION_MAX
 10

	)

176 
	#PPTPD_USER_RULE_MAX
 "10"

	)

177 
	#IPSEC_RULE_MAX
 "25"

	)

179 
	#PPTPD_SESSION_MAX
 0

	)

180 
	#PPTPD_USER_RULE_MAX
 "0"

	)

181 
	#IPSEC_RULE_MAX
 "0"

	)

184 
	#L2TPD_SESSION_MAX
 0

	)

185 
	#L2TPD_USER_RULE_MAX
 "0"

	)

187 #ifde‡
LAN_AUTOIP_SWITCH


188 
	#IP_SWITCH_RULE_NUM
 "2"

	)

189 
	#IP_SWITCH_RULE
 "192.168.100.1|"
LAN_IPADDR_MASK
"1"

	)

192 #ñi‡–
WAN_NUM
 == 2 )

194 #i‡
deföed
(
EZP_PROD_CAT_O
)

195 
	#PPTPD_SESSION_MAX
 10

	)

196 
	#PPTPD_USER_RULE_MAX
 "10"

	)

197 
	#IPSEC_RULE_MAX
 "25"

	)

199 
	#PPTPD_SESSION_MAX
 0

	)

200 
	#PPTPD_USER_RULE_MAX
 "0"

	)

201 
	#IPSEC_RULE_MAX
 "0"

	)

203 
	#L2TPD_SESSION_MAX
 0

	)

204 
	#L2TPD_USER_RULE_MAX
 "0"

	)

206 #ifde‡
LAN_AUTOIP_SWITCH


207 
	#IP_SWITCH_RULE_NUM
 "3"

	)

208 
	#IP_SWITCH_RULE
 "192.168.100.1|192.168.200.1|"
LAN_IPADDR_MASK
"1"

	)

211 #ñi‡–
WAN_NUM
 == 3 )

213 
	#PPTPD_SESSION_MAX
 0

	)

214 
	#PPTPD_USER_RULE_MAX
 "0"

	)

215 
	#L2TPD_SESSION_MAX
 0

	)

216 
	#L2TPD_USER_RULE_MAX
 "0"

	)

218 #ifde‡
LAN_AUTOIP_SWITCH


219 
	#IP_SWITCH_RULE_NUM
 "4"

	)

220 
	#IP_SWITCH_RULE
 "192.168.100.1|192.168.200.1|192.168.150.1|"
LAN_IPADDR_MASK
"1"

	)

223 
	#IPSEC_RULE_MAX
 "0"

	)

229 #ñi‡–
EZP_PROD_SUBCAT
 == 1 )

231 #ifde‡
EZP_PROD_SUPERCAT_X


232 
	#X_MODE_DATA
 "St‹age^G|3G/4G^I"

	)

234 
	#X_MODE_DATA
 ""

	)

237 
	#FL_HWADDR_RULE_MAX
 "64"

	)

239 #i‡
deföed
(
EZP_PROD_CAT_P
Ë|| deföed(
EZP_PROD_CAT_W
Ë|| deföed(
EZP_PROD_CAT_K
Ë|| deföed(
EZP_PROD_CAT_R
)

240 
	#CT_MAX
 "10000"

	)

242 
	#CT_MAX
 "20000"

	)

245 
	#RT_RULE_MAX
 "32"

	)

246 #ifde‡
EZP_PROD_BRAND_PLANET


247 
	#BW_RULE_MAX
 "32"

	)

248 
	#BW_SBM_RULE_MAX
 "1"

	)

249 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^^dißbÀd^dißbÀd^1"

	)

251 
	#BW_SBM_RULE_MAX
 "0"

	)

252 
	#BW_DBM_RULE_MAX
 "0"

	)

254 
	#SCHED_RULE_MAX
 "16"

	)

255 
	#FL_RULE_MAX
 "64"

	)

256 
	#FR_RULE_MAX
 "64"

	)

257 
	#WF_RULE_MAX
 "16"

	)

259 #ifde‡
EZP_PROD_BRAND_PLANET


260 
	#SBM_MAX
 "8"

	)

262 
	#DBM_MAX
 "8"

	)

263 #ifde‡
PLATFORM_ALS


264 
	#FL_RULE_NUM
 "0"

	)

265 
	#FL_RULE
 ""

	)

267 
	#FL_RULE_NUM
 "3"

	)

268 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

270 
	#VS_RULE_MAX
 "32"

	)

272 #i‡
deföed
 (
PLATFORM_AXM
)

273 
	#BW_ENABLE
 "1"

	)

275 
	#BW_ENABLE
 "0"

	)

277 #ifde‡
EZP_PROD_BRAND_PLANET


278 
	#BW_SBM_RULE_NUM
 "1"

	)

279 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^^dißbÀd^dißbÀd^1"

	)

281 
	#BW_SBM_RULE_NUM
 "0"

	)

282 
	#BW_SBM_RULE
 ""

	)

284 
	#BW_DBM_RULE_NUM
 "0"

	)

285 
	#BW_DBM_RULE
 ""

	)

287 #i‡
deföed
 (
EZP_PROD_BRAND_SONY
)

288 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^10^43200^œn^^dn§ñay^^^^"

	)

289 #ñi‡
deföed
 (
EZP_SUB_BRAND_GARMIN
)

290 
	#LAN_DHCPS_RULE
 "deÁu…^1^128^100^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

291 #ñi‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_AXM
Ë|| deföed (
PLATFORM_M2E
Ë|| deföed (
PLATFORM_ALS
)

292 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^50^120^œn^^dn§ñay^^^^"

	)

294 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^8^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

296 
	#VNC_SESSION_MAX
 "16"

	)

298 
	#BT_TORRENT_MAX
 "10"

	)

299 
	#FTPD_USER_RULE_MAX
 "4"

	)

300 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

301 
	#ISUSER_RULE_MAX
 "4"

	)

302 
	#ISHOST_RULE_MAX
 "4"

	)

305 #i‡–
WAN_NUM
 == 1 )

306 #ifde‡
PLATFORM_ALS


307 
	#PPTPD_USER_RULE_MAX
 "10"

	)

308 
	#L2TPD_USER_RULE_MAX
 "10"

	)

309 
	#PPTPD_SESSION_MAX
 10

	)

310 
	#L2TPD_SESSION_MAX
 10

	)

311 
	#IPSEC_RULE_MAX
 "10"

	)

313 
	#PPTPD_SESSION_MAX
 0

	)

314 
	#PPTPD_USER_RULE_MAX
 "0"

	)

315 
	#L2TPD_SESSION_MAX
 0

	)

316 
	#L2TPD_USER_RULE_MAX
 "0"

	)

317 
	#IPSEC_RULE_MAX
 "0"

	)

320 #ifde‡
LAN_AUTOIP_SWITCH


321 
	#IP_SWITCH_RULE_NUM
 "2"

	)

322 #ifde‡
EZP_SUB_BRAND_GARMIN


323 
	#IP_SWITCH_RULE
 "10.199.237.254|"
LAN_IPADDR_MASK
"254"

	)

325 
	#IP_SWITCH_RULE
 "192.168.100.1|"
LAN_IPADDR_MASK
"1"

	)

329 #ñi‡–
WAN_NUM
 == 2 )

330 
	#PPTPD_SESSION_MAX
 0

	)

331 
	#PPTPD_USER_RULE_MAX
 "0"

	)

332 
	#L2TPD_SESSION_MAX
 0

	)

333 
	#L2TPD_USER_RULE_MAX
 "0"

	)

334 
	#IPSEC_RULE_MAX
 "0"

	)

339 #ñi‡–
EZP_PROD_SUBCAT
 == 2 )

341 #ifde‡
EZP_PROD_SUPERCAT_X


342 
	#X_MODE_DATA
 "St‹age^G|3G/4G^I"

	)

344 
	#X_MODE_DATA
 ""

	)

347 
	#FL_HWADDR_RULE_MAX
 "64"

	)

350 #i‡
deföed
(
EZP_PROD_CAT_C
Ë|| deföed (
EZP_PROD_CAT_T
Ë|| deföed (
EZP_PROD_CAT_D
Ë|| deföed (
EZP_PROD_CAT_K
)

351 
	#CT_MAX
 "20000"

	)

353 
	#CT_MAX
 "40000"

	)

356 
	#RT_RULE_MAX
 "32"

	)

357 #ifde‡
EZP_PROD_BRAND_PLANET


358 
	#BW_RULE_MAX
 "32"

	)

361 #i‡
deföed
(
EZP_PROD_SUBSUBCAT_L
)

362 
	#BW_DBM_RULE_MAX
 "0"

	)

363 
	#BW_SBM_RULE_MAX
 "64"

	)

364 #ifde‡
EZP_PROD_BRAND_PLANET


365 
	#SBM_MAX
 "64"

	)

367 
	#DBM_MAX
 "1"

	)

368 
	#BW_DBM_RULE_NUM
 "0"

	)

369 
	#BW_DBM_RULE
 "DBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"27^8^"

	)

371 
	#BW_DBM_RULE_MAX
 "32"

	)

372 
	#BW_SBM_RULE_MAX
 "32"

	)

373 #ifde‡
EZP_PROD_BRAND_PLANET


374 
	#SBM_MAX
 "8"

	)

375 
	#DBM_MAX
 "8"

	)

377 
	#DBM_MAX
 "32"

	)

379 
	#BW_DBM_RULE_NUM
 "1"

	)

380 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"27^8^"

	)

383 
	#SCHED_RULE_MAX
 "16"

	)

384 
	#FL_RULE_MAX
 "64"

	)

385 
	#FR_RULE_MAX
 "64"

	)

386 
	#WF_RULE_MAX
 "16"

	)

387 
	#FL_RULE_NUM
 "3"

	)

389 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

390 
	#VS_RULE_MAX
 "32"

	)

391 
	#BW_ENABLE
 "0"

	)

392 
	#BW_SBM_RULE_NUM
 "1"

	)

393 #ifde‡
EZP_PROD_BRAND_PLANET


394 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^^dißbÀd^dißbÀd^1"

	)

396 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^"

	)

398 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^8^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

399 
	#VNC_SESSION_MAX
 "16"

	)

401 
	#BT_TORRENT_MAX
 "10"

	)

402 
	#FTPD_USER_RULE_MAX
 "8"

	)

403 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

404 
	#ISUSER_RULE_MAX
 "8"

	)

405 
	#ISHOST_RULE_MAX
 "8"

	)

408 #i‡–
WAN_NUM
 == 1 )

409 #i‡
deföed
(
EZP_PROD_CAT_M
)

410 
	#PPTPD_SESSION_MAX
 15

	)

411 
	#PPTPD_USER_RULE_MAX
 "15"

	)

412 
	#IPSEC_RULE_MAX
 "30"

	)

413 #ñi‡
deföed
(
EZP_PROD_CAT_G
Ë|| deföed(
EZP_PROD_CAT_I
)

414 
	#PPTPD_SESSION_MAX
 4

	)

415 
	#PPTPD_USER_RULE_MAX
 "4"

	)

416 
	#IPSEC_RULE_MAX
 "0"

	)

418 
	#PPTPD_SESSION_MAX
 0

	)

419 
	#PPTPD_USER_RULE_MAX
 "0"

	)

420 
	#IPSEC_RULE_MAX
 "0"

	)

422 
	#L2TPD_SESSION_MAX
 0

	)

423 
	#L2TPD_USER_RULE_MAX
 "0"

	)

425 #ñi‡–
WAN_NUM
 == 2 )

426 
	#PPTPD_SESSION_MAX
 0

	)

427 
	#PPTPD_USER_RULE_MAX
 "0"

	)

428 
	#L2TPD_SESSION_MAX
 0

	)

429 
	#L2TPD_USER_RULE_MAX
 "0"

	)

430 
	#IPSEC_RULE_MAX
 "0"

	)

435 #ñi‡–
EZP_PROD_SUBCAT
 == 3 )

437 #ifde‡
EZP_PROD_SUPERCAT_X


438 
	#X_MODE_DATA
 "St‹age^G|3G/4G^I"

	)

440 
	#X_MODE_DATA
 ""

	)

443 
	#FL_HWADDR_RULE_MAX
 "64"

	)

444 
	#CT_MAX
 "50000"

	)

445 
	#RT_RULE_MAX
 "32"

	)

447 #ifde‡
EZP_PROD_BRAND_PLANET


448 
	#BW_RULE_MAX
 "32"

	)

449 
	#BW_SBM_RULE_MAX
 "32"

	)

450 
	#BW_DBM_RULE_MAX
 "32"

	)

452 
	#BW_SBM_RULE_MAX
 "64"

	)

453 
	#BW_DBM_RULE_MAX
 "64"

	)

456 
	#SCHED_RULE_MAX
 "16"

	)

457 
	#FL_RULE_MAX
 "64"

	)

458 
	#FR_RULE_MAX
 "64"

	)

459 
	#WF_RULE_MAX
 "16"

	)

461 #ifde‡
EZP_PROD_BRAND_PLANET


462 
	#SBM_MAX
 "16"

	)

463 
	#DBM_MAX
 "16"

	)

465 
	#DBM_MAX
 "64"

	)

468 
	#VS_RULE_MAX
 "32"

	)

469 #i‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

470 
	#BW_ENABLE
 "1"

	)

472 
	#BW_ENABLE
 "0"

	)

475 #i‡
deföed
 (
EZP_PROD_BRAND_PLANET
)

476 
	#BW_SBM_RULE_NUM
 "1"

	)

477 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^^dißbÀd^dißbÀd^1"

	)

478 #ñi‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

479 
	#BW_SBM_RULE_NUM
 "1"

	)

480 
	#BW_SBM_RULE
 "DVR_PRIORITY^1^"
LAN_IPADDR_MASK
".129^"LAN_IPADDR_MASK".129^1^^^^w™1^øtio^75^^^^1^100^25600^25600"

	)

481 #ñi‡
deföed
 (
EZP_PROD_BRAND_PROX
)

482 
	#BW_SBM_RULE_NUM
 "0"

	)

483 
	#BW_SBM_RULE
 ""

	)

485 
	#BW_SBM_RULE_NUM
 "1"

	)

486 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^"

	)

489 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

490 
	#FL_RULE_NUM
 "0"

	)

491 
	#FL_RULE
 ""

	)

492 #i‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

493 
	#LAN_DHCPS_RULE
 "WAN1^1^50^50^3600^APOLLO^^dn§ñay^208.67.222.222^208.67.220.220^^"

	)

495 
	#LAN_DHCPS_RULE
 "deÁu…^1^33^32^86400^LAN-Cñl^^dn§ñay^208.67.222.222^208.67.220.220^^"

	)

497 
	#BW_DBM_RULE_NUM
 "0"

	)

498 
	#BW_DBM_RULE
 ""

	)

500 
	#FL_RULE_NUM
 "3"

	)

501 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

502 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^8^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

503 
	#BW_DBM_RULE_NUM
 "1"

	)

504 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"35^16^"

	)

507 
	#VNC_SESSION_MAX
 "16"

	)

509 
	#BT_TORRENT_MAX
 "15"

	)

510 
	#FTPD_USER_RULE_MAX
 "16"

	)

511 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

512 
	#ISUSER_RULE_MAX
 "16"

	)

513 
	#ISHOST_RULE_MAX
 "16"

	)

516 #i‡–
WAN_NUM
 == 1 )

517 
	#PPTPD_SESSION_MAX
 16

	)

518 
	#PPTPD_USER_RULE_MAX
 "16"

	)

519 
	#L2TPD_SESSION_MAX
 0

	)

520 
	#L2TPD_USER_RULE_MAX
 "0"

	)

521 
	#IPSEC_RULE_MAX
 "0"

	)

523 #ñi‡–
WAN_NUM
 == 2 )

524 
	#PPTPD_SESSION_MAX
 32

	)

525 
	#PPTPD_USER_RULE_MAX
 "32"

	)

526 
	#L2TPD_SESSION_MAX
 32

	)

527 
	#L2TPD_USER_RULE_MAX
 "32"

	)

528 #ifde‡
EZP_PROD_CAT_I


529 
	#IPSEC_RULE_MAX
 "32"

	)

531 
	#IPSEC_RULE_MAX
 "0"

	)

537 #ñi‡–
EZP_PROD_SUBCAT
 == 4 )

539 #ifde‡
EZP_PROD_SUPERCAT_X


540 
	#X_MODE_DATA
 "St‹age^G|3G/4G^I"

	)

542 
	#X_MODE_DATA
 ""

	)

545 #ifde‡
EZP_PROD_BRAND_PLANET


546 
	#FL_HWADDR_RULE_MAX
 "128"

	)

547 
	#RT_RULE_MAX
 "32"

	)

548 
	#BW_RULE_MAX
 "32"

	)

551 #i‡
deföed
(
EZP_PROD_BRAND_ZYUS
)

552 
	#CT_MAX
 "60000"

	)

553 
	#FL_HWADDR_RULE_MAX
 "32"

	)

554 
	#BW_SBM_RULE_MAX
 "32"

	)

555 
	#BW_DBM_RULE_MAX
 "32"

	)

556 
	#WF_RULE_MAX
 "64"

	)

557 
	#DBM_MAX
 "16"

	)

558 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^"

	)

559 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"35^16^"

	)

560 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^16^86400^œn^^i•dns^^^^"

	)

561 
	#PPTPD_SESSION_MAX
 16

	)

562 
	#PPTPD_USER_RULE_MAX
 "16"

	)

563 
	#IPSEC_RULE_MAX
 "32"

	)

564 #ñi‡
deföed
(
EZP_PROD_BRAND_PLANET
)

565 
	#CT_MAX
 "20000"

	)

566 
	#FL_HWADDR_RULE_MAX
 "128"

	)

567 
	#BW_SBM_RULE_MAX
 "16"

	)

568 
	#BW_DBM_RULE_MAX
 "0"

	)

569 
	#SBM_MAX
 "0"

	)

570 
	#WF_RULE_MAX
 "16"

	)

571 
	#DBM_MAX
 "1"

	)

572 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^^dißbÀd^dißbÀd^1"

	)

573 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"35^16^"

	)

574 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^16^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

575 
	#PPTPD_SESSION_MAX
 10

	)

576 
	#PPTPD_USER_RULE_MAX
 "10"

	)

577 
	#IPSEC_RULE_MAX
 "25"

	)

579 
	#CT_MAX
 "60000"

	)

580 
	#FL_HWADDR_RULE_MAX
 "128"

	)

581 
	#BW_SBM_RULE_MAX
 "64"

	)

582 
	#BW_DBM_RULE_MAX
 "64"

	)

583 
	#WF_RULE_MAX
 "16"

	)

584 
	#DBM_MAX
 "64"

	)

585 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^"

	)

586 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"35^16^"

	)

587 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^16^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

588 
	#PPTPD_SESSION_MAX
 32

	)

589 
	#PPTPD_USER_RULE_MAX
 "32"

	)

590 
	#IPSEC_RULE_MAX
 "32"

	)

593 
	#RT_RULE_MAX
 "32"

	)

594 
	#SCHED_RULE_MAX
 "16"

	)

595 
	#FL_RULE_MAX
 "64"

	)

596 
	#FR_RULE_MAX
 "64"

	)

597 
	#FL_RULE_NUM
 "3"

	)

598 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

599 
	#VS_RULE_MAX
 "32"

	)

600 
	#BW_ENABLE
 "0"

	)

601 
	#BW_SBM_RULE_NUM
 "1"

	)

602 
	#BW_DBM_RULE_NUM
 "1"

	)

603 
	#VNC_SESSION_MAX
 "16"

	)

605 
	#BT_TORRENT_MAX
 "15"

	)

606 
	#FTPD_USER_RULE_MAX
 "32"

	)

607 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

608 
	#ISUSER_RULE_MAX
 "32"

	)

609 
	#ISHOST_RULE_MAX
 "32"

	)

611 
	#L2TPD_SESSION_MAX
 32

	)

612 
	#L2TPD_USER_RULE_MAX
 "32"

	)

614 #ñi‡–
EZP_PROD_SUBCAT
 == 5 )

616 #ifde‡
EZP_PROD_SUPERCAT_X


617 
	#X_MODE_DATA
 "St‹age^G|3G/4G^I"

	)

619 
	#X_MODE_DATA
 ""

	)

622 
	#FL_HWADDR_RULE_MAX
 "64"

	)

623 
	#CT_MAX
 "80000"

	)

624 
	#RT_RULE_MAX
 "32"

	)

625 
	#BW_SBM_RULE_MAX
 "32"

	)

626 
	#BW_DBM_RULE_MAX
 "32"

	)

627 
	#SCHED_RULE_MAX
 "16"

	)

628 
	#FL_RULE_MAX
 "64"

	)

629 
	#FR_RULE_MAX
 "64"

	)

630 
	#WF_RULE_MAX
 "16"

	)

631 
	#DBM_MAX
 "32"

	)

632 
	#FL_RULE_NUM
 "3"

	)

633 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

634 
	#VS_RULE_MAX
 "32"

	)

635 
	#BW_ENABLE
 "0"

	)

636 
	#BW_SBM_RULE_NUM
 "1"

	)

637 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^"

	)

638 
	#BW_DBM_RULE_NUM
 "1"

	)

639 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"51^32^"

	)

640 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^32^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

641 
	#VNC_SESSION_MAX
 "16"

	)

643 
	#BT_TORRENT_MAX
 "15"

	)

644 
	#FTPD_USER_RULE_MAX
 "32"

	)

645 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

646 
	#ISUSER_RULE_MAX
 "32"

	)

647 
	#ISHOST_RULE_MAX
 "32"

	)

649 
	#PPTPD_SESSION_MAX
 32

	)

650 
	#PPTPD_USER_RULE_MAX
 "32"

	)

651 
	#L2TPD_SESSION_MAX
 32

	)

652 
	#L2TPD_USER_RULE_MAX
 "32"

	)

653 
	#IPSEC_RULE_MAX
 "32"

	)

655 #ñi‡–
EZP_PROD_SUBCAT
 == 6 )

657 #ifde‡
EZP_PROD_SUPERCAT_X


658 
	#X_MODE_DATA
 "St‹age^G|3G/4G^I"

	)

660 
	#X_MODE_DATA
 ""

	)

663 
	#FL_HWADDR_RULE_MAX
 "64"

	)

664 
	#CT_MAX
 "100000"

	)

665 
	#RT_RULE_MAX
 "32"

	)

666 
	#BW_SBM_RULE_MAX
 "64"

	)

667 
	#BW_DBM_RULE_MAX
 "64"

	)

668 
	#SCHED_RULE_MAX
 "16"

	)

669 
	#FL_RULE_MAX
 "64"

	)

670 
	#FR_RULE_MAX
 "64"

	)

671 
	#WF_RULE_MAX
 "16"

	)

672 
	#DBM_MAX
 "64"

	)

673 
	#FL_RULE_NUM
 "3"

	)

674 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

675 
	#VS_RULE_MAX
 "32"

	)

676 
	#BW_ENABLE
 "0"

	)

677 
	#BW_SBM_RULE_NUM
 "1"

	)

678 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^"

	)

679 
	#BW_DBM_RULE_NUM
 "1"

	)

680 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"83^64^"

	)

681 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^64^86400^œn^^›ídns^208.67.222.222^208.67.220.220^^"

	)

682 
	#VNC_SESSION_MAX
 "16"

	)

684 
	#BT_TORRENT_MAX
 "15"

	)

685 
	#FTPD_USER_RULE_MAX
 "32"

	)

686 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

687 
	#ISUSER_RULE_MAX
 "32"

	)

688 
	#ISHOST_RULE_MAX
 "32"

	)

690 
	#PPTPD_SESSION_MAX
 32

	)

691 
	#PPTPD_USER_RULE_MAX
 "32"

	)

692 
	#L2TPD_SESSION_MAX
 32

	)

693 
	#L2TPD_USER_RULE_MAX
 "32"

	)

694 
	#IPSEC_RULE_MAX
 "32"

	)

696 #ñi‡–
EZP_PROD_SUBCAT
 == 7 )

698 #ifde‡
EZP_PROD_SUPERCAT_X


699 
	#X_MODE_DATA
 "St‹age^G|3G/4G^I"

	)

701 
	#X_MODE_DATA
 ""

	)

704 
	#FL_HWADDR_RULE_MAX
 "64"

	)

705 
	#CT_MAX
 "120000"

	)

706 
	#RT_RULE_MAX
 "32"

	)

707 
	#BW_SBM_RULE_MAX
 "128"

	)

708 
	#BW_DBM_RULE_MAX
 "128"

	)

709 
	#SCHED_RULE_MAX
 "16"

	)

710 
	#FL_RULE_MAX
 "64"

	)

711 
	#FR_RULE_MAX
 "64"

	)

712 
	#WF_RULE_MAX
 "16"

	)

713 
	#DBM_MAX
 "128"

	)

714 
	#FL_RULE_NUM
 "3"

	)

715 
	#FL_RULE
 "MSN Mes£ngî^0^^^^^207.46.1.1^207.46.255.254^^^^^^0^0001^0^0|MSN Mes£ngî^0^^^^^65.54.1.1^65.54.255.254^^^^^^0^0002^1^1|Yahoo! Mes£ngî^0^^^^^216.155.1.1^216.155.255.254^^^^^^0^0003^2^2"

	)

716 
	#VS_RULE_MAX
 "32"

	)

717 
	#BW_ENABLE
 "0"

	)

718 
	#BW_SBM_RULE_NUM
 "1"

	)

719 
	#BW_SBM_RULE
 "SBM^0^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"20^1^^^^w™0^øtio^20^^^^0^100^^"

	)

720 
	#BW_DBM_RULE_NUM
 "1"

	)

721 
	#BW_DBM_RULE
 "DBM^1^"
LAN_IPADDR_MASK
"20^"LAN_IPADDR_MASK"83^64^"

	)

722 
	#LAN_DHCPS_RULE
 "deÁu…^1^20^64^86400^œn^^›ídns^208.67.220.220^208.67.222.222^^"

	)

723 
	#VNC_SESSION_MAX
 "16"

	)

725 
	#BT_TORRENT_MAX
 "15"

	)

726 
	#FTPD_USER_RULE_MAX
 "64"

	)

727 
	#IS_RULE
 "0^^AXIMCom^iscsi_disc^5^8192^8192"

	)

728 
	#ISUSER_RULE_MAX
 "64"

	)

729 
	#ISHOST_RULE_MAX
 "64"

	)

732 
	#PPTPD_SESSION_MAX
 64

	)

733 
	#PPTPD_USER_RULE_MAX
 "64"

	)

734 
	#L2TPD_SESSION_MAX
 64

	)

735 
	#L2TPD_USER_RULE_MAX
 "64"

	)

736 
	#IPSEC_RULE_MAX
 "32"

	)

744 
	#SUBCAT_MAX
 7

	)

746 
	#WAN_WWAN_MODE
 "auto", "hsd∑", "umts", "edge", "g¥s"

	)

749 #i‡–
WAN_NUM
 == 1 )

751 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

752 #i‡
deföed
(
PLATFORM_AXM
Ë|| deföed(
PLATFORM_LIS
)

753 
	#WAN0_PROTO
 "wi•"

	)

754 #ñi‡
deföed
(
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
Ë|| deföed (
PLATFORM_ALS
)

755 
	#WAN0_PROTO
 "dh˝"

	)

756 #ñi‡(
APPMGR_WWAN
 == 1)

757 
	#WAN0_PROTO
 "ww™"

	)

759 
	#WAN0_PROTO
 "dh˝"

	)

763 
	#WAN_MAIN_RULE
 "WAN1^1^1500^0^10"

	)

764 #i‡
deföed
 (
EZP_SUB_BRAND_GARMIN
)

765 
	#WAN_DETECT_RULE
 "1^4^5^pög^g©eway^8.8.8.8"

	)

766 #ñi‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
)

767 
	#WAN_DETECT_RULE
 "1^4^5^pög^g©eway^8.8.8.8"

	)

768 #ñi‡
deföed
 (
PLATFORM_ALS
)

769 
	#WAN_DETECT_RULE
 "0^4^5^pög^cu°om^8.8.8.8"

	)

771 
	#WAN_DETECT_RULE
 "0^4^30^pög^g©eway^"

	)

773 
	#WAN_LB_RULE
 "Æways⁄^1^^n⁄e^1"

	)

774 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

775 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0^0"

	)

776 #ñi‡
deföed
 (
EZP_SUB_BRAND_GARMIN
)

777 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0^0^0"

	)

778 #ñi‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
Ë|| deföed (
PLATFORM_ALS
)

779 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0^0"

	)

781 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0"

	)

783 
	#MAC_SENSE_RULE
 "^^^30^5^0^"

	)

784 
	#VPN_STATUS_RULE
 "0^0^n⁄e^0"

	)

785 
	#WAN_UPNP_STATUS_RULE
 "0^n⁄e^"

	)

786 
	#WAN_BW_RULE
 "2M2M^2048^2048^0^0^100^95^95^2048^256^2048^256"

	)

787 
	#WAN_STATIC_RULE
 "10.1.1.25^24^10.1.1.254^10.1.1.254^^"

	)

788 
	#WAN_DHCP_RULE
 "^^86400"

	)

789 
	#WAN_HTC_RULE
 "^^86400^512^0"

	)

790 
	#WAN_IPHONE_RULE
 "^^86400^1500^0"

	)

791 
	#WAN_BECEEM_RULE
 "g1^^"

	)

792 
	#WAN_WIMAX_RULE
 "1386^0"

	)

793 
	#WAN_PPPOE_RULE
 "ch≠^^^0^300^20^20^1492^1492"

	)

794 #i‡
deföed
 (
PLATFORM_ALS
)

795 
	#WAN_WWAN_RULE
 "0^0^3^^^auto^ch≠^^^0^300^20^20^1492^1492^#777^40^0^2^1^1^âyUSB^1^0"

	)

796 
	#RELAY_RULE
 "0^0|0^0"

	)

797 
	#ALERT_RULE
 "0^0^0^0^0"

	)

798 
	#FAILOVER_RULE
 "0^0^0"

	)

799 
	#MAIL_RULE
 "0^0^0^0^0^0^0^^^^^^^^"

	)

800 
	#RELAY_SCHEDULE_RULE
 "^^^^^^|^^^^^^"

	)

801 
	#FILE_MODE_RULE
 "1^1^1^0^0^0"

	)

803 
	#WAN_WWAN_RULE
 "2^0^0^^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0"

	)

805 
	#WAN_BARRY_RULE
 "^1^0^0^^^^*99***1#^0"

	)

806 #i‡
deföed
(
PLATFORM_M2E
)

807 
	#WAN_PPTP_L2TP_RULE_NUM
 "6"

	)

808 
	#WAN_PPTP_L2TP_RULE_MAX
 "6"

	)

809 
	#WAN_PPTP_L2TP_RULE
 "0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠"

	)

811 
	#WAN_PPTP_L2TP_RULE
 "0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠"

	)

814 
	#WAN_WWAN_PROBE_RULE
 "^^^^^^^^^^^^^^^"

	)

815 
	#WAN_BIGPOND_RULE
 "0^61.9.192.13^^"

	)

816 
	#WAN_HWADDR_CLONE_RULE
 "0^"

	)

817 
	#WAN_DDNS_RULE
 "WAN1_DDNS^0^dyndns^^^^"

	)

818 
	#WAN_OPENDNS_RULE
 "WAN1_OPENDNS^0^^^0^"

	)

819 
	#WAN_APPLE_FILTER_RULE
 "aúp‹t.us^118.214.253.15|≠∂e.com^118.214.253.15|ôoﬁs.öfo^118.214.253.15|thökdif„ª¡.us^118.214.253.15|≠∂eùh⁄e˚Œ.com^118.214.253.15"

	)

820 
	#RT_RULE
 "SMTP^0^^^^^t˝^^^25^25^w™0^deÁu…^"

	)

821 #i‡
deföed
 (
PLATFORM_ALS
)

822 
	#FR_RULE
 ""

	)

824 
	#FR_RULE
 "HTTP^0^w™0^t˝^80^80^"
LAN_IPADDR_MASK
"20^^|HTTPS^0^w™0^t˝^443^443^"LAN_IPADDR_MASK"20^^|POP3^0^w™0^t˝^110^110^"LAN_IPADDR_MASK"20^^|POP3S^0^w™0^t˝^995^995^"LAN_IPADDR_MASK"20^^|SMTP^0^w™0^t˝^25^25^"LAN_IPADDR_MASK"20^^|SMTPS^0^w™0^t˝^465^465^"LAN_IPADDR_MASK"20^^|SSH^0^w™0^t˝^22^22^"LAN_IPADDR_MASK"21^^|eMuÀ^0^w™0^bŸh^4662^4672^"LAN_IPADDR_MASK"21^^"

	)

828 
	#FR_DMZ_RULE
 "^0^"

	)

830 #ñi‡–
WAN_NUM
 == 2 )

832 #i‡!
deföed
(
EZP_PROD_SUPERCAT_X
)

833 #i‡(
APPMGR_WWAN
 == 1)

834 
	#WAN0_PROTO
 "ww™"

	)

836 #ifde‡
EZP_SUB_BRAND_APOLLO


837 
	#WAN0_PROTO
 "°©ic"

	)

839 
	#WAN0_PROTO
 "dh˝"

	)

844 
	#WAN_MAIN_RULE
 "WAN1^1^1500^0^10|WAN2^1^1500^0^10"

	)

846 #i‡
deföed
 (
EZP_PROD_CAT_N
Ë|| deföed (
EZP_PROD_CAT_A
Ë|| deföed (
EZP_PROD_CAT_I
)

847 
	#WAN1_PROTO
 "ww™"

	)

849 
	#WAN1_PROTO
 "dh˝"

	)

852 #i‡
deföed
 (
EZP_PROD_BRAND_ZYUS
)

853 
	#WAN_BW_RULE
 "^1000^100^0^0^75^90^90^60^3^607^37|^1000^100^0^0^75^90^90^60^3^607^37"

	)

854 #ifde‡
EZP_SUB_BRAND_FEENEY


855 
	#WAN_WWAN_RULE
 "0^12^0^i•.cöguœr^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^^1^0|0^12^5^^^auto^ch≠^^^0^300^20^20^1492^1492^#777^30^5^3^0^2^âyUSB^1^0"

	)

857 
	#WAN_WWAN_RULE
 "0^12^0^i•.cöguœr^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^^1^0|0^12^5^^^auto^ch≠^^^0^300^20^20^1492^1492^#777^0^0^0^0^0^^1^0"

	)

859 
	#FR_RULE
 "HTTP^0^w™0^t˝^80^80^"
LAN_IPADDR_MASK
"20^^|HTTPS^0^w™0^t˝^443^443^"LAN_IPADDR_MASK"20^^|POP3^0^w™0^t˝^110^110^"LAN_IPADDR_MASK"20^^|POP3S^0^w™0^t˝^995^995^"LAN_IPADDR_MASK"20^^|SMTP^0^w™0^t˝^25^25^"LAN_IPADDR_MASK"20^^|SMTPS^0^w™0^t˝^465^465^"LAN_IPADDR_MASK"20^^|SSH^0^w™0^t˝^22^22^"LAN_IPADDR_MASK"21^^|eMuÀ^0^w™0^bŸh^4662^4672^"LAN_IPADDR_MASK"21^^"

	)

860 #ñi‡
deföed
 (
EZP_PROD_BRAND_PROX
)

861 #i‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

862 
	#WAN_BW_RULE
 "100M100M^102400^102400^0^0^90^95^95^92160^1440^92160^1440|25M25M^25600^25600^0^0^95^95^95^24320^380^24320^380"

	)

863 
	#FR_RULE
 "DVR_WATCH_CELL^1^w™1^t˝^8016^8016^192.168.1.129^8016^8016|DVR_AUDIO_CELL^1^w™1^t˝^8116^8116^192.168.1.129^8116^8116|DVR_ADMIN_CELL^1^w™1^t˝^8200^8200^192.168.1.129^8200^8200|DVR_SEARCH_CELL^1^w™1^t˝^10019^10019^192.168.1.129^10019^10019|DVR_WATCH_WAN^1^w™0^t˝^8016^8016^192.168.1.129^8016^8016|DVR_AUDIO_WAN^1^w™0^t˝^8116^8116^192.168.1.129^8116^8116|DVR_ADMIN_WAN^1^w™0^t˝^8200^8200^192.168.1.129^8200^8200|DVR_SEARCH_WAN^1^w™0^t˝^10019^10019^192.168.1.129^10019^10019"

	)

865 
	#WAN_BW_RULE
 "2M256K^2048^256^0^0^90^95^95^155^19^1244^155|2M256K^2048^256^0^0^90^95^95^155^19^1244^155"

	)

866 
	#FR_RULE
 ""

	)

868 #i‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

869 
	#WAN_WWAN_RULE
 "2^0^0^^^auto^ch≠^^^0^300^5^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0|2^0^2^I¡î√t^^auto^ch≠^^^0^300^5^20^1492^1492^*99***1#^0^0^0^0^0^^1^0"

	)

871 
	#WAN_WWAN_RULE
 "2^0^0^^^auto^ch≠^^^0^300^5^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0|2^0^0^^^auto^ch≠^^^0^300^5^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0"

	)

874 
	#WAN_BW_RULE
 "2M256K^2048^256^0^0^90^95^95^155^19^1244^155|2M256K^2048^256^0^0^90^95^95^155^19^1244^155"

	)

875 
	#WAN_WWAN_RULE
 "2^0^0^^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0|2^0^0^^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0"

	)

876 
	#FR_RULE
 "HTTP^0^w™0^t˝^80^80^"
LAN_IPADDR_MASK
"20^^|HTTPS^0^w™0^t˝^443^443^"LAN_IPADDR_MASK"20^^|POP3^0^w™0^t˝^110^110^"LAN_IPADDR_MASK"20^^|POP3S^0^w™0^t˝^995^995^"LAN_IPADDR_MASK"20^^|SMTP^0^w™0^t˝^25^25^"LAN_IPADDR_MASK"20^^|SMTPS^0^w™0^t˝^465^465^"LAN_IPADDR_MASK"20^^|SSH^0^w™0^t˝^22^22^"LAN_IPADDR_MASK"21^^|eMuÀ^0^w™0^bŸh^4662^4672^"LAN_IPADDR_MASK"21^^"

	)

880 #ifde‡
EZP_PROD_BRAND_ZYUS


881 
	#WAN_LB_RULE
 "Æways⁄^1^^w™1^1|backup^1^^n⁄e^1"

	)

883 
	#WAN_LB_RULE
 "Æways⁄^1^^n⁄e^1|Æways⁄^1^^n⁄e^1"

	)

886 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

887 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0^0|0^0^n⁄e^0^0"

	)

889 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0|0^0^n⁄e^0"

	)

891 
	#MAC_SENSE_RULE
 "^^^30^5^0^"

	)

892 #ifde‡
deföed
 (
PLATFORM_ALS
)

893 
	#RELAY_RULE
 "0^0|0^0"

	)

894 
	#ALERT_RULE
 "0^0^0^0^0"

	)

895 
	#FAILOVER_RULE
 "0^0^0"

	)

896 
	#MAIL_RULE
 "0^0^0^0^0^0^0^^^^^^^^"

	)

897 
	#RELAY_SCHEDULE_RULE
 "^^^^^^|^^^^^^"

	)

898 
	#FILE_MODE_RULE
 "1^1^1^0^0^0"

	)

900 
	#VPN_STATUS_RULE
 "0^0^n⁄e^0|0^0^n⁄e^0"

	)

901 
	#WAN_UPNP_STATUS_RULE
 "0^n⁄e^"

	)

902 
	#WAN_DHCP_RULE
 "^^86400|^^86400"

	)

903 
	#WAN_HTC_RULE
 "^^86400^512^0|^^86400^512^0"

	)

904 
	#WAN_IPHONE_RULE
 "^^86400^1500^0|^^86400^1500^0"

	)

905 
	#WAN_BECEEM_RULE
 "g1^^|g1^^"

	)

906 
	#WAN_WIMAX_RULE
 "1386^0|1386^0"

	)

907 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

908 #ifde‡
EZP_SUB_BRAND_APOLLO


909 
	#WAN_DETECT_RULE
 "1^4^5^pög^g©eway^8.8.8.8|1^4^5^pög^cu°om^8.8.8.8"

	)

910 
	#WAN_STATIC_RULE
 "172.22.0.254^16^172.22.0.1^172.22.1.10^^^|^^^^^"

	)

912 
	#WAN_DETECT_RULE
 "1^4^5^pög^cu°om^8.8.8.8|1^4^5^pög^cu°om^8.8.8.8"

	)

913 
	#WAN_STATIC_RULE
 "^^^^^|^^^^^"

	)

915 
	#WAN_PPPOE_RULE
 "ch≠^^^0^300^5^20^1492^1492|ch≠^^^0^300^5^20^1492^1492"

	)

917 
	#WAN_DETECT_RULE
 "0^4^30^pög^g©eway^|0^4^30^pög^g©eway^"

	)

918 
	#WAN_STATIC_RULE
 "10.1.1.25^24^10.1.1.254^10.1.1.254^^|10.1.2.25^24^10.1.2.254^10.1.2.254^^"

	)

919 
	#WAN_PPPOE_RULE
 "ch≠^^^0^300^20^20^1492^1492|ch≠^^^0^300^20^20^1492^1492"

	)

921 
	#WAN_BARRY_RULE
 "^1^0^0^^^^*99***1#^0|^1^0^0^^^^*99***1#^0"

	)

922 
	#WAN_PPTP_L2TP_RULE
 "0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠"

	)

923 
	#WAN_WWAN_PROBE_RULE
 "^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^"

	)

924 
	#WAN_BIGPOND_RULE
 "0^61.9.192.13^^|0^61.9.192.13^^"

	)

925 
	#WAN_HWADDR_CLONE_RULE
 "0^|0^"

	)

926 
	#WAN_DDNS_RULE
 "WAN1_DDNS^0^dyndns^^^^|WAN2_DDNS^0^dyndns^^^^"

	)

927 
	#WAN_OPENDNS_RULE
 "WAN1_OPENDNS^0^^^0^|WAN2_OPENDNS^0^^^0^"

	)

928 
	#WAN_APPLE_FILTER_RULE
 "aúp‹t.us^118.214.253.15|≠∂e.com^118.214.253.15|ôoﬁs.öfo^118.214.253.15|thökdif„ª¡.us^118.214.253.15|≠∂eùh⁄e˚Œ.com^118.214.253.15"

	)

930 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

931 
	#RT_RULE
 ""

	)

933 
	#RT_RULE
 "SMTP^0^^^^^t˝^^^25^25^w™0^deÁu…^"

	)

936 
	#FR_DMZ_RULE
 "^0^|^0^"

	)

938 #ñi‡–
WAN_NUM
 == 3 )

940 
	#WAN_MAIN_RULE
 "WAN1^1^1500^0^10|WAN2^1^1500^0^10|WAN3^1^1500^0^10"

	)

941 
	#WAN0_PROTO
 "dh˝"

	)

942 
	#WAN1_PROTO
 "dh˝"

	)

943 
	#WAN2_PROTO
 "ww™"

	)

944 
	#WAN_DETECT_RULE
 "0^4^30^pög^g©eway^|0^4^30^pög^g©eway^|0^4^30^pög^g©eway^"

	)

945 
	#WAN_LB_RULE
 "Æways⁄^1^^n⁄e^1|Æways⁄^1^^n⁄e^1|Æways⁄^1^^n⁄e^1"

	)

946 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

947 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0^0|0^0^n⁄e^0^0|0^0^n⁄e^0^0"

	)

949 
	#WAN_STATUS_RULE
 "0^0^n⁄e^0|0^0^n⁄e^0|0^0^n⁄e^0"

	)

951 
	#MAC_SENSE_RULE
 "^^^30^5^0^"

	)

952 #ifde‡
deföed
 (
PLATFORM_ALS
)

953 
	#RELAY_RULE
 "0^0|0^0"

	)

954 
	#ALERT_RULE
 "0^0^0^0^0"

	)

955 
	#FAILOVER_RULE
 "0^0^0"

	)

956 
	#MAIL_RULE
 "0^0^0^0^0^0^0^^^^^^^^"

	)

957 
	#RELAY_SCHEDULE_RULE
 "^^^^^^|^^^^^^"

	)

958 
	#FILE_MODE_RULE
 "1^1^1^0^0^0"

	)

960 
	#VPN_STATUS_RULE
 "0^0^n⁄e^0|0^0^n⁄e^0|0^0^n⁄e^0"

	)

961 
	#WAN_UPNP_STATUS_RULE
 "0^n⁄e^"

	)

962 
	#WAN_BW_RULE
 "2M256K^2048^256^0^0^90^95^95^155^19^1244^155|2M256K^2048^256^0^0^90^95^95^155^19^1244^155|2M256K^2048^256^0^0^90^95^95^155^19^1244^155"

	)

963 
	#WAN_STATIC_RULE
 "10.1.1.25^24^10.1.1.254^10.1.1.254^^|10.1.2.25^24^10.1.2.254^10.1.2.254^^|10.1.2.25^24^10.1.2.254^10.1.2.254^^"

	)

964 
	#WAN_DHCP_RULE
 "^^86400|^^86400|^^86400"

	)

965 
	#WAN_HTC_RULE
 "^^86400^512^0|^^86400^512^0|^^86400^512^0"

	)

966 
	#WAN_IPHONE_RULE
 "^^86400^1500^0|^^86400^1500^0|^^86400^1500^0"

	)

967 
	#WAN_BECEEM_RULE
 "g1^^|g1^^|g1^^"

	)

968 
	#WAN_WIMAX_RULE
 "1386^0|1386^0|1386^0"

	)

969 
	#WAN_PPPOE_RULE
 "ch≠^^^0^300^20^20^1492^1492|ch≠^^^0^300^20^20^1492^1492|ch≠^^^0^300^20^20^1492^1492"

	)

970 
	#WAN_WWAN_RULE
 "2^0^0^^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0|2^0^0^^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0|2^0^0^^^auto^ch≠^^^0^300^20^20^1492^1492^*99***1#^0^0^0^0^0^0^1^0"

	)

971 
	#WAN_BARRY_RULE
 "^1^0^0^^^^*99***1#^0|^1^0^0^^^^*99***1#^0|^1^0^0^^^^*99***1#^0"

	)

972 
	#WAN_PPTP_L2TP_RULE
 "0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠|0^^µç^^°©ic^^^^^^1^300^i•^^^ch≠"

	)

973 
	#WAN_WWAN_PROBE_RULE
 "^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^"

	)

974 
	#WAN_BIGPOND_RULE
 "0^61.9.192.13^^|0^61.9.192.13^^|0^61.9.192.13^^"

	)

975 
	#WAN_HWADDR_CLONE_RULE
 "0^|0^|0^"

	)

976 
	#WAN_DDNS_RULE
 "WAN1_DDNS^0^dyndns^^^^|WAN2_DDNS^0^dyndns^^^^|WAN3_DDNS^0^dyndns^^^^"

	)

977 
	#WAN_OPENDNS_RULE
 "WAN1_OPENDNS^0^^^0^|WAN2_OPENDNS^0^^^0^|WAN3_OPENDNS^0^^^0^"

	)

978 
	#RT_RULE
 "SMTP^0^^^^^t˝^^^25^25^w™0^deÁu…^"

	)

979 
	#FR_RULE
 "HTTP^0^w™0^t˝^80^80^"
LAN_IPADDR_MASK
"20^^|HTTPS^0^w™0^t˝^443^443^"LAN_IPADDR_MASK"20^^|POP3^0^w™0^t˝^110^110^"LAN_IPADDR_MASK"20^^|POP3S^0^w™0^t˝^995^995^"LAN_IPADDR_MASK"20^^|SMTP^0^w™0^t˝^25^25^"LAN_IPADDR_MASK"20^^|SMTPS^0^w™0^t˝^465^465^"LAN_IPADDR_MASK"20^^|SSH^0^w™0^t˝^22^22^"LAN_IPADDR_MASK"21^^|eMuÀ^0^w™0^bŸh^4662^4672^"LAN_IPADDR_MASK"21^^"

	)

980 
	#FR_DMZ_RULE
 "^0^|^0^|^0^"

	)

986 
	#WL_ACL_MAX
 "64"

	)

987 
	#WL_ACL_BASIC_RULE
 "1^dißbÀd"

	)

989 #i‡(
WL_NUM
 > 0)

991 #i‡–
WL_NUM
 == 1 )

993 
	#WL_ADVANCED_RULE
 "1^≠^deÁu…^0^2346^2347^1^100^0^1^1^off^off^off^1^1^HT^1^0^1^1^1^0^33^5^0^1^64^0^0^0"

	)

994 #i‡
deföed
 (
EZP_PROD_BRAND_PROX
)

995 
	#WL_WPS_RULE
 "0^00000000^1^0"

	)

997 
	#WL_WPS_RULE
 "0^00000000^1^1"

	)

999 
	#WL_WPS_STA_RULE
 "0^^^^^^"

	)

1000 
	#WL_WDS_RULE
 "dißbÀd^1"

	)

1001 
	#WL_WME_RULE
 "15 1023 7 0 0 off^15 1023 3 0 0 off^7 15 2 6016 3008 off^3 7 2 3264 1504 off^15 1023 7 0 0 off^15 63 3 0 0 off^7 15 1 6016 3008 off^3 7 1 3264 1504 off^off^128"

	)

1002 #ñi‡–
WL_NUM
 == 2 )

1004 
	#WL_ADVANCED_RULE
 "1^≠^deÁu…^0^2346^2347^1^1000^0^1^1^off^off^off^1^0^0^0^0^0^1^1^0^33^5^0^1^64^0^0^0|1^≠^deÁu…^0^2346^2347^1^100^0^1^1^off^off^off^1^0^0^0^0^0^1^1^0^33^5^0^1^64^0^0^0"

	)

1005 
	#WL_WDS_RULE
 "dißbÀd^1|dißbÀd^1"

	)

1006 
	#WL_WME_RULE
 "15 1023 7 0 0 off^15 1023 3 0 0 off^7 15 2 6016 3008 off^3 7 2 3264 1504 off^15 1023 7 0 0 off^15 63 3 0 0 off^7 15 1 6016 3008 off^3 7 1 3264 1504 off^off^128|15 1023 7 0 0 off^15 1023 3 0 0 off^7 15 2 6016 3008 off^3 7 2 3264 1504 off^15 1023 7 0 0 off^15 63 3 0 0 off^7 15 1 6016 3008 off^3 7 1 3264 1504 off^off^128"

	)

1007 
	#WL_WPS_RULE
 "0^00000000^1^1|0^00000000^1^1"

	)

1008 
	#WL_WPS_STA_RULE
 "0^^^^^^|0^^^^^^"

	)

1013 #i‡–
WL_NUM
 == 1 )

1015 
	#WL0_WDS_BASIC_RULE
 "^dißbÀd|^dißbÀd|^dißbÀd|^dißbÀd"

	)

1016 
	#WL0_WDS_SEC_WEP_RULE
 "|||"

	)

1017 
	#WL0_WDS_SEC_WPA_RULE
 "^tkù|^tkù|^tkù|^tkù"

	)

1019 #ifde‡
EZP_PROD_BRAND_PROX


1020 
	#WL0_APCLI_RULE
 "0^^^dißbÀd^0^dh˝"

	)

1021 #ñi‡
EZP_SUB_BRAND_APOLLO


1022 
	#WL0_APCLI_RULE
 "0^^^psk2^0^°©ic"

	)

1024 
	#WL0_APCLI_RULE
 "0^^^dißbÀd^0"

	)

1026 
	#WL0_APCLI_SEC_WEP_RULE
 "1^^^"

	)

1027 
	#WL0_APCLI_SEC_WPA_RULE
 "^tkù"

	)

1028 
	#WL0_APCLI_SEC_WPA2_RULE
 "^´s"

	)

1029 #i‡(
WL0_RULE_MAX
 == 1)

1030 
	#WL0_BASIC_RULE
 "1^0^0^1^0"

	)

1031 #i‡
deföed
 (
EZP_PROD_BRAND_SONY
)

1032 
	#WL0_SSID_RULE
 "WG-C10"

	)

1033 #ñi‡
deföed
 (
EZP_SUB_BRAND_RFLINK
)

1034 
	#WL0_SSID_RULE
 "RF-LINK"

	)

1035 #ñi‡
deföed
 (
PLATFORM_AXM
)

1036 
	#WL0_SSID_RULE
 "TOGOMusic"

	)

1038 
	#WL0_SSID_RULE
 "AXIMCom"

	)

1040 
	#WL0_SEC_RULE
 "dißbÀd"

	)

1041 
	#WL0_SEC_WEP_RULE
 "1^^^^^^"

	)

1042 
	#WL0_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600^5000^3000"

	)

1043 
	#WL0_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1044 #ñi‡(
WL0_RULE_MAX
 == 2)

1045 
	#WL0_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0"

	)

1046 #i‡
deföed
 (
EZP_PROD_CAT_W
)

1047 
	#WL0_SSID_RULE
 "deÁu…1|deÁu…2"

	)

1049 #i‡
deföed
 (
EZP_PROD_BRAND_ZYUS
)

1050 
	#WL0_SSID_RULE
 "VFG6005N|Gue°"

	)

1051 #ñi‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

1052 
	#WL0_SSID_RULE
 "WC-310|WC-310-Gue°"

	)

1053 #ñi‡
deföed
 (
EZP_PROD_BRAND_PROX
)

1054 
	#WL0_SSID_RULE
 "Proxiˇ°01|Proxiˇ°02"

	)

1055 #ñi‡
deföed
 (
EZP_PROD_BRAND_PLANET
)

1056 
	#WL0_SSID_RULE
 "deÁu…|PLANET1"

	)

1057 #ñi‡
deföed
 (
EZP_PROD_BRAND_MYMO
)

1058 
	#WL0_SSID_RULE
 "MyMO1|MyMO2"

	)

1059 #ñi‡
deföed
 (
PLATFORM_M2E
)

1060 
	#WL0_SSID_RULE
 "AXIMCom|AXIMCom2"

	)

1061 #ñi‡
deföed
 (
PLATFORM_ALS
)

1062 
	#WL0_SSID_RULE
 "ALLISCOM1|ALLISCOM2"

	)

1064 
	#WL0_SSID_RULE
 "AXIMCom1|AXIMCom2"

	)

1067 #i‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

1068 
	#WL0_SEC_RULE
 "psk2|dißbÀd"

	)

1070 
	#WL0_SEC_RULE
 "dißbÀd|dißbÀd"

	)

1072 
	#WL0_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^"

	)

1073 
	#WL0_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000"

	)

1074 #i‡
deföed
 (
EZP_SUB_BRAND_APOLLO
)

1075 
	#WL0_SEC_WPA2_RULE
 "bW9üWxldmlkZW8h^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1077 
	#WL0_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1079 #ñi‡(
WL0_RULE_MAX
 == 4)

1080 
	#WL0_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0|0^0^0^1^0|0^0^0^1^0"

	)

1081 #i‡
deföed
 (
EZP_PROD_BRAND_PLANET
)

1082 
	#WL0_SSID_RULE
 "deÁu…|PLANET1|PLANET2|PLANET3"

	)

1084 #i‡
deföed
 (
EZP_PROD_CAT_W
)

1085 
	#WL0_SSID_RULE
 "deÁu…1|deÁu…2|deÁu…3|deÁu…4"

	)

1087 
	#WL0_SSID_RULE
 "AXIMCom1|AXIMCom2|AXIMCom3|AXIMCom4"

	)

1090 
	#WL0_SEC_RULE
 "dißbÀd|dißbÀd|dißbÀd|dißbÀd"

	)

1091 
	#WL0_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^|1^^^^^^|1^^^^^^"

	)

1092 
	#WL0_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000"

	)

1093 
	#WL0_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1096 
	#WL0_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0"

	)

1097 #i‡
deföed
 (
EZP_PROD_CAT_W
)

1098 
	#WL0_SSID_RULE
 "deÁu…1|deÁu…2"

	)

1100 
	#WL0_SSID_RULE
 "AXIMCom1|AXIMCom2"

	)

1102 
	#WL0_SEC_RULE
 "dißbÀd|dißbÀd"

	)

1103 
	#WL0_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^"

	)

1104 
	#WL0_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000"

	)

1105 
	#WL0_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1109 #i‡–
WL_NUM
 == 2 )

1111 
	#WL1_WDS_BASIC_RULE
 "^dißbÀd|^dißbÀd|^dißbÀd|^dißbÀd"

	)

1112 
	#WL1_WDS_SEC_WEP_RULE
 "|||"

	)

1113 
	#WL1_WDS_SEC_WPA_RULE
 "^tkù|^tkù|^tkù|^tkù"

	)

1115 
	#WL1_APCLI_RULE
 "1^^^dißbÀd"

	)

1116 
	#WL1_APCLI_SEC_WEP_RULE
 "1^^^"

	)

1117 
	#WL1_APCLI_SEC_WPA_RULE
 "^tkù"

	)

1118 
	#WL1_APCLI_SEC_WPA2_RULE
 "^´s"

	)

1119 #i‡(
WL1_RULE_MAX
 == 2)

1120 
	#WL1_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0"

	)

1121 
	#WL1_SSID_RULE
 "AXIMCom5|AXIMCom6"

	)

1122 
	#WL1_SEC_RULE
 "dißbÀd|dißbÀd"

	)

1123 
	#WL1_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^"

	)

1124 
	#WL1_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600|^tkù^^^1812^dißbÀ^3600"

	)

1125 
	#WL1_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^0|^´s^^^1812^dißbÀ^3600^0"

	)

1126 #ñi‡(
WL1_RULE_MAX
 == 4)

1127 
	#WL1_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0|0^0^0^1^0|0^0^0^1^0"

	)

1128 
	#WL1_SSID_RULE
 "AXIMCom5|AXIMCom6|AXIMCom7|AXIMCom8"

	)

1129 
	#WL1_SEC_RULE
 "dißbÀd|dißbÀd|dißbÀd|dißbÀd"

	)

1130 
	#WL1_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^|1^^^^^^|1^^^^^^"

	)

1131 
	#WL1_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600|^tkù^^^1812^dißbÀ^3600|^tkù^^^1812^dißbÀ^3600|^tkù^^^1812^dißbÀ^3600"

	)

1132 
	#WL1_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^0|^´s^^^1812^dißbÀ^3600^0|^´s^^^1812^dißbÀ^3600^0|^´s^^^1812^dißbÀ^3600^0"

	)

1135 
	#WL1_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0"

	)

1136 
	#WL1_SSID_RULE
 "AXIMCom5|AXIMCom6"

	)

1137 
	#WL1_SEC_RULE
 "dißbÀd|dißbÀd"

	)

1138 
	#WL1_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^"

	)

1139 
	#WL1_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600|^tkù^^^1812^dißbÀ^3600"

	)

1140 
	#WL1_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^0|^´s^^^1812^dißbÀ^3600^0"

	)

1146 
	#WL_ADVANCED_RULE
 "1^≠^deÁu…^0^2346^2347^1^1000^0^1^1^off^off^off^1^1^HT^1^0^1^1^1^0^33^5^0^1^64^0^0^0"

	)

1147 
	#WL_WPS_RULE
 "0^00000000^1^1"

	)

1148 
	#WL_WPS_STA_RULE
 "0^^^^^^"

	)

1149 
	#WL_WDS_RULE
 "dißbÀd^1"

	)

1150 
	#WL_WME_RULE
 "15 1023 7 0 0 off^15 1023 3 0 0 off^7 15 2 6016 3008 off^3 7 2 3264 1504 off^15 1023 7 0 0 off^15 63 3 0 0 off^7 15 1 6016 3008 off^3 7 1 3264 1504 off^off^128"

	)

1152 
	#WL0_WDS_BASIC_RULE
 "^dißbÀd|^dißbÀd|^dißbÀd|^dißbÀd"

	)

1153 
	#WL0_WDS_SEC_WEP_RULE
 "|||"

	)

1154 
	#WL0_WDS_SEC_WPA_RULE
 "^tkù|^tkù|^tkù|^tkù"

	)

1156 
	#WL0_APCLI_RULE
 "0^^^dißbÀd^0"

	)

1157 
	#WL0_APCLI_SEC_WEP_RULE
 "1^^^"

	)

1158 
	#WL0_APCLI_SEC_WPA_RULE
 "^tkù"

	)

1159 
	#WL0_APCLI_SEC_WPA2_RULE
 "^´s"

	)

1160 #i‡(
WL0_RULE_MAX
 == 2)

1161 
	#WL0_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0"

	)

1162 #i‡
deföed
 (
EZP_PROD_CAT_W
)

1163 
	#WL0_SSID_RULE
 "deÁu…1|deÁu…2"

	)

1165 #i‡
deföed
 (
EZP_PROD_BRAND_ZYUS
)

1166 
	#WL0_SSID_RULE
 "VFG6005N|Gue°"

	)

1168 
	#WL0_SSID_RULE
 "AXIMCom1|AXIMCom2"

	)

1171 
	#WL0_SEC_RULE
 "dißbÀd|dißbÀd"

	)

1172 
	#WL0_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^"

	)

1173 
	#WL0_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000"

	)

1174 
	#WL0_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1175 #ñi‡(
WL0_RULE_MAX
 == 4)

1176 
	#WL0_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0|0^0^0^1^0|0^0^0^1^0"

	)

1177 #i‡
deföed
 (
EZP_PROD_CAT_W
)

1178 
	#WL0_SSID_RULE
 "deÁu…1|deÁu…2|deÁu…3|deÁu…4"

	)

1180 
	#WL0_SSID_RULE
 "AXIMCom1|AXIMCom2|AXIMCom3|AXIMCom4"

	)

1182 
	#WL0_SEC_RULE
 "dißbÀd|dißbÀd|dißbÀd|dißbÀd"

	)

1183 
	#WL0_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^|1^^^^^^|1^^^^^^"

	)

1184 
	#WL0_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000"

	)

1185 
	#WL0_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1188 
	#WL0_BASIC_RULE
 "1^0^0^1^0|0^0^0^1^0"

	)

1189 #i‡
deföed
 (
EZP_PROD_CAT_W
)

1190 
	#WL0_SSID_RULE
 "deÁu…1|deÁu…2"

	)

1192 
	#WL0_SSID_RULE
 "AXIMCom1|AXIMCom2"

	)

1194 
	#WL0_SEC_RULE
 "dißbÀd|dißbÀd"

	)

1195 
	#WL0_SEC_WEP_RULE
 "1^^^^^^|1^^^^^^"

	)

1196 
	#WL0_SEC_WPA_RULE
 "^tkù^^^1812^dißbÀ^3600^5000^3000|^tkù^^^1812^dißbÀ^3600^5000^3000"

	)

1197 
	#WL0_SEC_WPA2_RULE
 "^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1|^´s^^^1812^dißbÀ^3600^5000^0^10^3000^1"

	)

1200 #i‡
deföed
 (
PLATFORM_AXA
Ë|| deföed (
PLATFORM_M2E
)

1201 
	#CNNT_RULE_NUM
 "3"

	)

1202 
	#CNNT_RULE_MAX
 "8"

	)

1203 
	#CNNT_RULE
 "1^Ethî√t^0^1^dh˝|1^WISP^0^0^wi•|1^USB^0^0^ùh⁄e"

	)

1204 
	#FTPD_RULE
 "1^21^1^1^10^10^3:4^133:022^1000^5^1"

	)

1205 
	#FTPD_USER_RULE
 "1^admö^admö∑ssw‹d^50^100^"

	)

1206 
	#FTPD_USER_RULE_NUM
 "1"

	)

1207 
	#NETSTAT_RULE
 "5"

	)

1208 #ñi‡
deföed
 (
PLATFORM_AXM
)

1209 
	#CNNT_RULE_NUM
 "1"

	)

1210 
	#CNNT_RULE_MAX
 "8"

	)

1211 
	#CNNT_RULE
 "1^WISP^0^0^wi•"

	)

1212 
	#FTPD_RULE
 "0^21^1^1^10^10^3:4^133:022^1000^5^0"

	)

1213 
	#FTPD_USER_RULE
 "0^admö^admö∑ssw‹d^50^100^"

	)

1214 
	#FTPD_USER_RULE_NUM
 "1"

	)

1215 
	#NETSTAT_RULE
 "3"

	)

1217 
	#CNNT_RULE_NUM
 "3"

	)

1218 
	#CNNT_RULE_MAX
 "8"

	)

1219 
	#CNNT_RULE
 "1^Ethî√t^0^0^dh˝|1^WISP^0^0^wi•|1^USB^0^0^ùh⁄e"

	)

1220 
	#FTPD_RULE
 "0^21^1^1^10^10^3:4^133:022^1000^5^0"

	)

1221 
	#FTPD_USER_RULE
 "0^admö^admö∑ssw‹d^50^100^"

	)

1222 
	#FTPD_USER_RULE_NUM
 "1"

	)

1223 
	#NETSTAT_RULE
 "3"

	)

1226 #i‡
deföed
 (
PLATFORM_AXA
)

1228 
	#CARD_READER_HARDWARE_RULE_MAX
 "1"

	)

1229 
	#CARD_READER_HARDWARE_RULE_NUM
 "1"

	)

1231 
	#CARD_READER_HARDWARE_RULE
 "sda^14^1"

	)

1232 
	#STORAGE_DEVICE_MOUNT_RULE
 "1-1.1^USB^0777^0777^1^0|1-1.2^SD^0777^0777^1^0"

	)

1233 
	#STORAGE_DEVICE_MOUNT_RULE_NUM
 "2"

	)

1234 
	#GPIODEF_RULE
 ""

	)

1235 #ñi‡
deföed
 (
PLATFORM_M2E
)

1237 
	#CARD_READER_HARDWARE_RULE_MAX
 "1"

	)

1238 
	#CARD_READER_HARDWARE_RULE_NUM
 "1"

	)

1240 
	#CARD_READER_HARDWARE_RULE
 "sda^43^1"

	)

1241 
	#STORAGE_DEVICE_MOUNT_RULE
 "1-1.1^USB^0777^0777^1^0|1-1.2^SD^0777^0777^1^0|1-1.3^Qsync^0777^0777^0^0"

	)

1242 
	#STORAGE_DEVICE_MOUNT_RULE_NUM
 "3"

	)

1243 
	#GPIODEF_RULE
 ""

	)

1244 #ñi‡
deföed
 (
PLATFORM_ALS
)

1246 
	#CARD_READER_HARDWARE_RULE_MAX
 "2"

	)

1247 
	#CARD_READER_HARDWARE_RULE_NUM
 "2"

	)

1249 
	#CARD_READER_HARDWARE_RULE
 "sda^43^1"

	)

1250 
	#STORAGE_DEVICE_MOUNT_RULE
 "1-1.2^USB^0777^0777^1^0|mmc0^SD^0777^0777^1^0"

	)

1251 
	#STORAGE_DEVICE_MOUNT_RULE_NUM
 "2"

	)

1252 
	#GPIODEF_RULE
 ""

	)

1253 #ñi‡
deföed
 (
EZP_SUB_BRAND_SONY
)

1255 
	#CARD_READER_HARDWARE_RULE_MAX
 "2"

	)

1256 
	#CARD_READER_HARDWARE_RULE_NUM
 "2"

	)

1258 
	#CARD_READER_HARDWARE_RULE
 "sda^11^1|sda^12^1"

	)

1259 
	#STORAGE_DEVICE_MOUNT_RULE
 "1-1.2^USB^0777^0777^1^0|1-1.1^SD^0777^0777^1^0"

	)

1260 
	#STORAGE_DEVICE_MOUNT_RULE_NUM
 "2"

	)

1261 
	#GPIODEF_RULE
 ""

	)

1263 
	#CARD_READER_HARDWARE_RULE_MAX
 "0"

	)

1264 
	#CARD_READER_HARDWARE_RULE_NUM
 "0"

	)

1266 
	#CARD_READER_HARDWARE_RULE
 ""

	)

1267 
	#STORAGE_DEVICE_MOUNT_RULE
 ""

	)

1268 
	#STORAGE_DEVICE_MOUNT_RULE_NUM
 "0"

	)

1269 
	#GPIODEF_RULE
 ""

	)

1272 #i‡
deföed
(
PLATFORM_ALS
)

1273 
	#ALS_BATTERY_RULE
 ""

	)

1274 
	#ALS_STATUS_RULE
 "0^0^0^0^0^0^0^0|0^0^0^0^0^0^0^0|0^0^0^0^0^0^0^0"

	)

1275 
	#ALS_SERAIL_RULE
 "p‹t1^115200^8^1^n⁄e^n⁄e^1^/dev/âyS0|p‹t2^115200^8^1^n⁄e^n⁄e^1^/dev/âyUSB0|p‹t3^115200^8^1^n⁄e^n⁄e^1^/dev/âyUSB1"

	)

1276 
	#ALS_OPERATING_RULE
 "0^7^0^4^1|0^7^0^4^1|0^7^0^4^1"

	)

1277 
	#ALS_OPERATING_DATA_PACKING_RULE
 "1024^700|1024^700|1024^700"

	)

1278 
	#ALS_OPERATING_OPTION_RULE
 "101^^4001^^4001^^4001^^4001^5011^5012^5013^5014^100|102^^4001^^4001^^4001^^4001^5011^5012^5013^5014^100|103^^4001^^4001^^4001^^4001^5011^5012^5013^5014^100"

	)

1283 
	#HTTP_REDIRECT_DEFAULT
 "0"

	)

1286 #i‡
deföed
(
EZP_SUB_BRAND_GARMIN
)

1287 
	#IGMP_PROXY_ENABLE
 "1"

	)

1289 
	#IGMP_PROXY_ENABLE
 "0"

	)

1293 
	#MFG_TEST_RESULT_RULE
 "^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|^|"

	)

1294 #i‡
deföed
 (
PLATFORM_GMA
)

1296 
	#WISP_DETECT_PORTAL_RULE
 "0^0"

	)

1302 
	#x°r
(
s
Ë
	`°r
(s)

	)

1303 
	#°r
(
s
Ë#s

	)

	@nvram_fw.h

1 #i‚de‡
_NVRAM_FW_H_


2 
	#_NVRAM_FW_H_


	)

6 
	mNVRAM_FW_0_0_0
 = 0,

7 
	mNVRAM_FW_1_6_5
,

8 
	mNVRAM_FW_1_6_6
,

9 
	mNVRAM_FW_1_6_7
,

10 
	mNVRAM_FW_1_7_0
,

11 
	mNVRAM_FW_1_7_1
,

12 
	mNVRAM_FW_1_7_2
,

13 
	mNVRAM_FW_1_7_3
,

14 
	mNVRAM_FW_1_7_4
,

15 
	mNVRAM_FW_1_7_5
,

16 
	mNVRAM_FW_1_7_6
,

17 
	mNVRAM_FW_1_7_7
,

18 
	mNVRAM_FW_1_7_8
,

19 
	mNVRAM_FW_1_7_9
,

20 
	mNVRAM_FW_1_7_10
,

21 
	mNVRAM_FW_1_7_11
,

22 
	mNVRAM_FW_2_0_0
,

23 
	mNVRAM_FW_2_0_1
,

24 
	mNVRAM_FW_2_0_2
,

25 
	mNVRAM_FW_2_0_3
,

26 
	mNVRAM_FW_2_0_4
,

27 
	mNVRAM_FW_2_0_5
,

28 
	mNVRAM_FW_2_0_6
,

29 
	mNVRAM_FW_2_0_7
,

30 
	mNVRAM_FW_2_0_8
,

31 
	mNVRAM_FW_2_0_9
,

32 
	mNVRAM_FW_2_0_10
,

33 
	mNVRAM_FW_2_0_11
,

34 
	mNVRAM_FW_2_0_12
,

35 
	mNVRAM_FW_2_0_13
,

36 
	mNVRAM_FW_2_0_14
,

37 
	mNVRAM_FW_2_0_15
,

38 
	mNVRAM_FW_3_0_0
,

39 
	mNVRAM_FW_3_0_1
,

40 
	mNVRAM_FW_3_0_2
,

41 
	mNVRAM_FW_3_0_3
,

42 
	mNVRAM_FW_3_0_4
,

43 
	mNVRAM_FW_3_0_5
,

44 
	mNVRAM_FW_3_0_6
,

45 
	mNVRAM_FW_3_0_7
,

46 
	mNVRAM_FW_3_0_8
,

47 
	mNVRAM_FW_3_0_9
,

48 
	mNVRAM_FW_3_0_10
,

49 
	mNVRAM_FW_3_0_11
,

50 
	mNVRAM_FW_3_0_12
,

51 
	mNVRAM_FW_3_0_13
,

52 
	mNVRAM_FW_3_0_14
,

53 
	mNVRAM_FW_3_0_15
,

54 
	mNVRAM_FW_3_0_16
,

55 
	mNVRAM_FW_3_0_17
,

56 
	mNVRAM_FW_3_0_18
,

57 
	mNVRAM_FW_3_0_19
,

58 
	mNVRAM_FW_3_0_20
,

59 
	mNVRAM_FW_3_1_0
,

60 
	mNVRAM_FW_3_1_1
,

61 
	mNVRAM_FW_3_1_2
,

62 
	mNVRAM_FW_3_1_3
,

63 
	mNVRAM_FW_3_1_4
,

64 
	mNVRAM_FW_3_1_5
,

65 
	mNVRAM_FW_3_1_6
,

66 
	mNVRAM_FW_3_1_7
,

67 
	mNVRAM_FW_3_1_8
,

68 
	mNVRAM_FW_3_1_9
,

69 
	mNVRAM_FW_3_1_10
,

70 
	mNVRAM_FW_3_2_0
,

71 
	mNVRAM_FW_3_2_1
,

72 
	mNVRAM_FW_3_2_2
,

73 
	mNVRAM_FW_INVALID
,

74 } 
	tnvøm_fw_vîsi⁄
;

76 
	snvøm_fw_tu∂e
 {

77 *
	mfw_°r
;

78 
nvøm_fw_vîsi⁄
 
	mfw_vîsi⁄
;

79 (*
	mfw_upgøde_func
)();

80 (*
	mfw_downgøde_func
)();

	@nvram_linux.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<î∫o.h
>

19 
	~<îr‹.h
>

20 
	~<°rög.h
>

21 
	~<sys/io˘l.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/°©.h
>

24 
	~<f˙é.h
>

25 
	~<sys/mm™.h
>

27 
	~<ty≥defs.h
>

28 
	~<bcmnvøm.h
>

29 
	~<shutûs.h
>

30 
	~<utûs.h
>

31 
	~"ezp-lib.h
"

32 
	~"nvøm_fw.h
"

33 
	~"nvøm_ez∑ckë.h
"

34 
	~"nvøm_d©a.h
"

37 #i‡
deföed
(
EZP_PROD_CAT_M
Ë|| deföed(
EZP_PROD_CAT_N
Ë|| deföed(
EZP_PROD_CAT_P
Ë|| deföed(
EZP_PROD_CAT_U
)

38 
	~"ezpcom-lib.h
"

41 
	#PATH_DEV_NVRAM
 "/dev/nvøm"

	)

42 
	#NVRAM_TMP_LEN
 4096

	)

44 #i‚de‡
EZP_PROD_VERSION


50 #i‡
deföed
(
NVRAM_MMAP
) && NVRAM_MMAP > 0

51 *
	gnvøm_buf
 = 
NULL
;

53 
	gnvøm_fd
 = -1;

54 
check_a˘i⁄
();

55 
fûe_to_buf
(*
∑th
, *
buf
, 
Àn
);

58 
fw_func_1_6_5_to_0_0_0
();

59 
fw_func_0_0_0_to_1_6_5
();

61 
fw_func_1_6_5_to_1_6_6
();

62 
fw_func_1_6_6_to_1_6_5
();

64 
fw_func_1_6_6_to_1_6_7
();

65 
fw_func_1_6_7_to_1_6_6
();

67 
fw_func_1_6_7_to_1_7_0
();

68 
fw_func_1_7_0_to_1_6_7
();

70 
fw_func_1_7_0_to_1_7_1
();

71 
fw_func_1_7_1_to_1_7_0
();

73 
fw_func_1_7_1_to_1_7_2
();

74 
fw_func_1_7_2_to_1_7_1
();

76 
fw_func_1_7_2_to_1_7_3
();

77 
fw_func_1_7_3_to_1_7_2
();

79 
fw_func_1_7_3_to_1_7_4
();

80 
fw_func_1_7_4_to_1_7_3
();

82 
fw_func_1_7_4_to_1_7_5
();

83 
fw_func_1_7_5_to_1_7_4
();

85 
fw_func_1_7_4_to_1_7_5
();

86 
fw_func_1_7_5_to_1_7_4
();

88 
fw_func_1_7_5_to_1_7_6
();

89 
fw_func_1_7_6_to_1_7_5
();

91 
fw_func_1_7_6_to_1_7_7
();

92 
fw_func_1_7_7_to_1_7_6
();

94 
fw_func_1_7_7_to_1_7_8
();

95 
fw_func_1_7_8_to_1_7_7
();

97 
fw_func_1_7_8_to_1_7_9
();

98 
fw_func_1_7_9_to_1_7_8
();

100 
fw_func_1_7_9_to_1_7_10
();

101 
fw_func_1_7_10_to_1_7_9
();

103 
fw_func_1_7_10_to_1_7_11
();

104 
fw_func_1_7_11_to_1_7_10
();

106 
fw_func_1_7_11_to_2_0_0
();

107 
fw_func_2_0_0_to_1_7_11
();

109 
fw_func_2_0_0_to_2_0_1
();

110 
fw_func_2_0_1_to_2_0_0
();

112 
fw_func_2_0_1_to_2_0_2
();

113 
fw_func_2_0_2_to_2_0_1
();

115 
fw_func_2_0_2_to_2_0_3
();

116 
fw_func_2_0_3_to_2_0_2
();

118 
fw_func_2_0_3_to_2_0_4
();

119 
fw_func_2_0_4_to_2_0_3
();

121 
fw_func_2_0_4_to_2_0_5
();

122 
fw_func_2_0_5_to_2_0_4
();

124 
fw_func_2_0_5_to_2_0_6
();

125 
fw_func_2_0_6_to_2_0_5
();

127 
fw_func_2_0_6_to_2_0_7
();

128 
fw_func_2_0_7_to_2_0_6
();

130 
fw_func_2_0_7_to_2_0_8
();

131 
fw_func_2_0_8_to_2_0_7
();

133 
fw_func_2_0_8_to_2_0_9
();

134 
fw_func_2_0_9_to_2_0_8
();

136 
fw_func_2_0_9_to_2_0_10
();

137 
fw_func_2_0_10_to_2_0_9
();

139 
fw_func_2_0_10_to_2_0_11
();

140 
fw_func_2_0_11_to_2_0_10
();

142 
fw_func_2_0_11_to_2_0_12
();

143 
fw_func_2_0_12_to_2_0_11
();

145 
fw_func_2_0_12_to_2_0_13
();

146 
fw_func_2_0_13_to_2_0_12
();

148 
fw_func_2_0_13_to_2_0_14
();

149 
fw_func_2_0_14_to_2_0_13
();

151 
fw_func_2_0_14_to_2_0_15
();

152 
fw_func_2_0_15_to_2_0_14
();

154 
fw_func_2_0_15_to_3_0_0
();

155 
fw_func_3_0_0_to_2_0_15
();

157 
fw_func_3_0_0_to_3_0_1
();

158 
fw_func_3_0_1_to_3_0_0
();

160 
fw_func_3_0_1_to_3_0_2
();

161 
fw_func_3_0_2_to_3_0_1
();

163 
fw_func_3_0_2_to_3_0_3
();

164 
fw_func_3_0_3_to_3_0_2
();

166 
fw_func_3_0_3_to_3_0_4
();

167 
fw_func_3_0_4_to_3_0_3
();

169 
fw_func_3_0_4_to_3_0_5
();

170 
fw_func_3_0_5_to_3_0_4
();

172 
fw_func_3_0_5_to_3_0_6
();

173 
fw_func_3_0_6_to_3_0_5
();

175 
fw_func_3_0_6_to_3_0_7
();

176 
fw_func_3_0_7_to_3_0_6
();

178 
fw_func_3_0_7_to_3_0_8
();

179 
fw_func_3_0_8_to_3_0_7
();

181 
fw_func_3_0_8_to_3_0_9
();

182 
fw_func_3_0_9_to_3_0_8
();

184 
fw_func_3_0_9_to_3_0_10
();

185 
fw_func_3_0_10_to_3_0_9
();

187 
fw_func_3_0_10_to_3_0_11
();

188 
fw_func_3_0_11_to_3_0_10
();

190 
fw_func_3_0_11_to_3_0_12
();

191 
fw_func_3_0_12_to_3_0_11
();

193 
fw_func_3_0_12_to_3_0_13
();

194 
fw_func_3_0_13_to_3_0_12
();

196 
fw_func_3_0_13_to_3_0_14
();

197 
fw_func_3_0_14_to_3_0_13
();

199 
fw_func_3_0_14_to_3_0_15
();

200 
fw_func_3_0_15_to_3_0_14
();

202 
fw_func_3_0_15_to_3_0_16
();

203 
fw_func_3_0_16_to_3_0_15
();

205 
fw_func_3_0_16_to_3_0_17
();

206 
fw_func_3_0_17_to_3_0_16
();

208 
fw_func_3_0_17_to_3_0_18
();

209 
fw_func_3_0_18_to_3_0_17
();

211 
fw_func_3_0_18_to_3_0_19
();

212 
fw_func_3_0_19_to_3_0_18
();

214 
fw_func_3_0_19_to_3_0_20
();

215 
fw_func_3_0_20_to_3_0_19
();

217 
fw_func_3_0_20_to_3_1_0
();

218 
fw_func_3_1_0_to_3_0_20
();

220 
fw_func_3_1_0_to_3_1_1
();

221 
fw_func_3_1_1_to_3_1_0
();

223 
fw_func_3_1_1_to_3_1_2
();

224 
fw_func_3_1_2_to_3_1_1
();

226 
fw_func_3_1_2_to_3_1_3
();

227 
fw_func_3_1_3_to_3_1_2
();

229 
fw_func_3_1_3_to_3_1_4
();

230 
fw_func_3_1_4_to_3_1_3
();

232 
fw_func_3_1_4_to_3_1_5
();

233 
fw_func_3_1_5_to_3_1_4
();

235 
fw_func_3_1_5_to_3_1_6
();

236 
fw_func_3_1_6_to_3_1_5
();

238 
fw_func_3_1_6_to_3_1_7
();

239 
fw_func_3_1_7_to_3_1_6
();

241 
fw_func_3_1_7_to_3_1_8
();

242 
fw_func_3_1_8_to_3_1_7
();

244 
fw_func_3_1_8_to_3_1_9
();

245 
fw_func_3_1_9_to_3_1_8
();

247 
fw_func_3_1_9_to_3_1_10
();

248 
fw_func_3_1_10_to_3_1_9
();

250 
fw_func_3_1_9_to_3_2_0
();

251 
fw_func_3_2_0_to_3_1_9
();

253 
fw_func_3_2_0_to_3_2_1
();

254 
fw_func_3_2_1_to_3_2_0
();

256 
fw_func_3_2_1_to_3_2_2
();

257 
fw_func_3_2_2_to_3_2_1
();

258 
nvøm_fw_tu∂e
 
	gnvøm_fw_èbÀ
[] = {

259 { "0.0.0", 
NVRAM_FW_0_0_0
, 
NULL
, NULL },

260 { "1.6.5", 
NVRAM_FW_1_6_5
, 
fw_func_0_0_0_to_1_6_5
, 
fw_func_1_6_5_to_0_0_0
 },

261 { "1.6.6", 
NVRAM_FW_1_6_6
, 
fw_func_1_6_5_to_1_6_6
, 
fw_func_1_6_6_to_1_6_5
 },

262 { "1.6.7", 
NVRAM_FW_1_6_7
, 
fw_func_1_6_6_to_1_6_7
, 
fw_func_1_6_7_to_1_6_6
 },

263 { "1.7.0", 
NVRAM_FW_1_7_0
, 
fw_func_1_6_7_to_1_7_0
, 
fw_func_1_7_0_to_1_6_7
 },

264 { "1.7.1", 
NVRAM_FW_1_7_1
, 
fw_func_1_7_0_to_1_7_1
, 
fw_func_1_7_1_to_1_7_0
 },

265 { "1.7.2", 
NVRAM_FW_1_7_2
, 
fw_func_1_7_1_to_1_7_2
, 
fw_func_1_7_2_to_1_7_1
 },

266 { "1.7.3", 
NVRAM_FW_1_7_3
, 
fw_func_1_7_2_to_1_7_3
, 
fw_func_1_7_3_to_1_7_2
 },

267 { "1.7.4", 
NVRAM_FW_1_7_4
, 
fw_func_1_7_3_to_1_7_4
, 
fw_func_1_7_4_to_1_7_3
 },

268 { "1.7.5", 
NVRAM_FW_1_7_5
, 
fw_func_1_7_4_to_1_7_5
, 
fw_func_1_7_5_to_1_7_4
 },

269 { "1.7.6", 
NVRAM_FW_1_7_6
, 
fw_func_1_7_5_to_1_7_6
, 
fw_func_1_7_6_to_1_7_5
 },

270 { "1.7.7", 
NVRAM_FW_1_7_7
, 
fw_func_1_7_6_to_1_7_7
, 
fw_func_1_7_7_to_1_7_6
 },

271 { "1.7.8", 
NVRAM_FW_1_7_8
, 
fw_func_1_7_7_to_1_7_8
, 
fw_func_1_7_8_to_1_7_7
 },

272 { "1.7.9", 
NVRAM_FW_1_7_9
, 
fw_func_1_7_8_to_1_7_9
, 
fw_func_1_7_9_to_1_7_8
 },

273 { "1.7.10", 
NVRAM_FW_1_7_10
, 
fw_func_1_7_9_to_1_7_10
,

274 
fw_func_1_7_10_to_1_7_9
 },

275 { "1.7.11", 
NVRAM_FW_1_7_11
, 
fw_func_1_7_10_to_1_7_11
,

276 
fw_func_1_7_11_to_1_7_10
 },

277 { "2.0.0", 
NVRAM_FW_2_0_0
, 
fw_func_1_7_11_to_2_0_0
, 
fw_func_2_0_0_to_1_7_11
 },

278 { "2.0.1", 
NVRAM_FW_2_0_1
, 
fw_func_2_0_0_to_2_0_1
, 
fw_func_2_0_1_to_2_0_0
 },

279 { "2.0.2", 
NVRAM_FW_2_0_2
, 
fw_func_2_0_1_to_2_0_2
, 
fw_func_2_0_2_to_2_0_1
 },

280 { "2.0.3", 
NVRAM_FW_2_0_3
, 
fw_func_2_0_2_to_2_0_3
, 
fw_func_2_0_3_to_2_0_2
 },

281 { "2.0.4", 
NVRAM_FW_2_0_4
, 
fw_func_2_0_3_to_2_0_4
, 
fw_func_2_0_4_to_2_0_3
 },

282 { "2.0.5", 
NVRAM_FW_2_0_5
, 
fw_func_2_0_4_to_2_0_5
, 
fw_func_2_0_5_to_2_0_4
 },

283 { "2.0.6", 
NVRAM_FW_2_0_6
, 
fw_func_2_0_5_to_2_0_6
, 
fw_func_2_0_6_to_2_0_5
 },

284 { "2.0.7", 
NVRAM_FW_2_0_7
, 
fw_func_2_0_6_to_2_0_7
, 
fw_func_2_0_7_to_2_0_6
 },

285 { "2.0.8", 
NVRAM_FW_2_0_8
, 
fw_func_2_0_7_to_2_0_8
, 
fw_func_2_0_8_to_2_0_7
 },

286 { "2.0.9", 
NVRAM_FW_2_0_9
, 
fw_func_2_0_8_to_2_0_9
, 
fw_func_2_0_9_to_2_0_8
 },

287 { "2.0.10", 
NVRAM_FW_2_0_10
, 
fw_func_2_0_9_to_2_0_10
, 
fw_func_2_0_10_to_2_0_9
 },

288 { "2.0.11", 
NVRAM_FW_2_0_11
, 
fw_func_2_0_10_to_2_0_11
, 
fw_func_2_0_11_to_2_0_10
 },

289 { "2.0.12", 
NVRAM_FW_2_0_12
, 
fw_func_2_0_11_to_2_0_12
, 
fw_func_2_0_12_to_2_0_11
 },

290 { "2.0.12", 
NVRAM_FW_2_0_13
, 
fw_func_2_0_12_to_2_0_13
, 
fw_func_2_0_13_to_2_0_12
 },

291 { "2.0.12", 
NVRAM_FW_2_0_14
, 
fw_func_2_0_13_to_2_0_14
, 
fw_func_2_0_14_to_2_0_13
 },

292 { "2.0.12", 
NVRAM_FW_2_0_15
, 
fw_func_2_0_14_to_2_0_15
, 
fw_func_2_0_15_to_2_0_14
 },

293 { "3.0.0", 
NVRAM_FW_3_0_0
, 
fw_func_2_0_15_to_3_0_0
, 
fw_func_3_0_0_to_2_0_15
 },

294 { "3.0.1", 
NVRAM_FW_3_0_1
, 
fw_func_3_0_0_to_3_0_1
, 
fw_func_3_0_1_to_3_0_0
 },

295 { "3.0.2", 
NVRAM_FW_3_0_2
, 
fw_func_3_0_1_to_3_0_2
, 
fw_func_3_0_2_to_3_0_1
 },

296 { "3.0.3", 
NVRAM_FW_3_0_3
, 
fw_func_3_0_2_to_3_0_3
, 
fw_func_3_0_3_to_3_0_2
 },

297 { "3.0.4", 
NVRAM_FW_3_0_4
, 
fw_func_3_0_3_to_3_0_4
, 
fw_func_3_0_4_to_3_0_3
 },

298 { "3.0.5", 
NVRAM_FW_3_0_5
, 
fw_func_3_0_4_to_3_0_5
, 
fw_func_3_0_5_to_3_0_4
 },

299 { "3.0.6", 
NVRAM_FW_3_0_6
, 
fw_func_3_0_5_to_3_0_6
, 
fw_func_3_0_6_to_3_0_5
 },

300 { "3.0.7", 
NVRAM_FW_3_0_7
, 
fw_func_3_0_6_to_3_0_7
, 
fw_func_3_0_7_to_3_0_6
 },

301 { "3.0.8", 
NVRAM_FW_3_0_8
, 
fw_func_3_0_7_to_3_0_8
, 
fw_func_3_0_8_to_3_0_7
 },

302 { "3.0.9", 
NVRAM_FW_3_0_9
, 
fw_func_3_0_8_to_3_0_9
, 
fw_func_3_0_9_to_3_0_8
 },

303 { "3.0.10", 
NVRAM_FW_3_0_10
, 
fw_func_3_0_9_to_3_0_10
, 
fw_func_3_0_10_to_3_0_9
 },

304 { "3.0.11", 
NVRAM_FW_3_0_11
, 
fw_func_3_0_10_to_3_0_11
, 
fw_func_3_0_11_to_3_0_10
 },

305 { "3.0.12", 
NVRAM_FW_3_0_12
, 
fw_func_3_0_11_to_3_0_12
, 
fw_func_3_0_12_to_3_0_11
 },

306 { "3.0.13", 
NVRAM_FW_3_0_13
, 
fw_func_3_0_12_to_3_0_13
, 
fw_func_3_0_13_to_3_0_12
 },

307 { "3.0.14", 
NVRAM_FW_3_0_14
, 
fw_func_3_0_13_to_3_0_14
, 
fw_func_3_0_14_to_3_0_13
 },

308 { "3.0.15", 
NVRAM_FW_3_0_15
, 
fw_func_3_0_14_to_3_0_15
, 
fw_func_3_0_15_to_3_0_14
 },

309 { "3.0.16", 
NVRAM_FW_3_0_16
, 
fw_func_3_0_15_to_3_0_16
, 
fw_func_3_0_16_to_3_0_15
 },

310 { "3.0.17", 
NVRAM_FW_3_0_17
, 
fw_func_3_0_16_to_3_0_17
, 
fw_func_3_0_17_to_3_0_16
 },

311 { "3.0.18", 
NVRAM_FW_3_0_18
, 
fw_func_3_0_17_to_3_0_18
, 
fw_func_3_0_18_to_3_0_17
 },

312 { "3.0.19", 
NVRAM_FW_3_0_19
, 
fw_func_3_0_18_to_3_0_19
, 
fw_func_3_0_19_to_3_0_18
 },

313 { "3.0.20", 
NVRAM_FW_3_0_20
, 
fw_func_3_0_19_to_3_0_20
, 
fw_func_3_0_20_to_3_0_19
 },

314 { "3.1.0", 
NVRAM_FW_3_1_0
, 
fw_func_3_0_20_to_3_1_0
, 
fw_func_3_1_0_to_3_0_20
 },

315 { "3.1.1", 
NVRAM_FW_3_1_1
, 
fw_func_3_1_0_to_3_1_1
, 
fw_func_3_1_1_to_3_1_0
 },

316 { "3.1.2", 
NVRAM_FW_3_1_2
, 
fw_func_3_1_1_to_3_1_2
, 
fw_func_3_1_2_to_3_1_1
 },

317 { "3.1.3", 
NVRAM_FW_3_1_3
, 
fw_func_3_1_2_to_3_1_3
, 
fw_func_3_1_3_to_3_1_2
 },

318 { "3.1.4", 
NVRAM_FW_3_1_4
, 
fw_func_3_1_3_to_3_1_4
, 
fw_func_3_1_4_to_3_1_3
 },

319 { "3.1.5", 
NVRAM_FW_3_1_5
, 
fw_func_3_1_4_to_3_1_5
, 
fw_func_3_1_5_to_3_1_4
 },

320 { "3.1.6", 
NVRAM_FW_3_1_6
, 
fw_func_3_1_5_to_3_1_6
, 
fw_func_3_1_6_to_3_1_5
 },

321 { "3.1.7", 
NVRAM_FW_3_1_7
, 
fw_func_3_1_6_to_3_1_7
, 
fw_func_3_1_7_to_3_1_6
 },

322 { "3.1.8", 
NVRAM_FW_3_1_8
, 
fw_func_3_1_7_to_3_1_8
, 
fw_func_3_1_8_to_3_1_7
 },

323 { "3.1.9", 
NVRAM_FW_3_1_9
, 
fw_func_3_1_8_to_3_1_9
, 
fw_func_3_1_9_to_3_1_8
 },

324 { "3.1.10", 
NVRAM_FW_3_1_10
, 
fw_func_3_1_9_to_3_1_10
, 
fw_func_3_1_10_to_3_1_9
 },

325 { "3.2.0", 
NVRAM_FW_3_2_0
, 
fw_func_3_1_9_to_3_2_0
, 
fw_func_3_2_0_to_3_1_9
 },

326 { "3.2.1", 
NVRAM_FW_3_2_1
, 
fw_func_3_2_0_to_3_2_1
, 
fw_func_3_2_1_to_3_2_0
 },

327 { "3.2.2", 
NVRAM_FW_3_2_2
, 
fw_func_3_2_1_to_3_2_2
, 
fw_func_3_2_2_to_3_2_1
 },

328 { 
NULL
, 0, NULL, NULL }

332 
	$nvøm_öô
(*
unu£d
)

334 i‡((
nvøm_fd
 = 
	`›í
(
PATH_DEV_NVRAM
, 
O_RDWR
)) < 0)

335 
îr
;

337 #i‡
	`deföed
(
NVRAM_MMAP
) && NVRAM_MMAP > 0

339 i‡((
nvøm_buf
 = 
	`mm≠
(
NULL
, 
NVRAM_SPACE
, 
PROT_READ
, 
MAP_SHARED
, 
nvøm_fd
, 0)Ë=
MAP_FAILED
) {

340 
	`˛o£
(
nvøm_fd
);

341 
nvøm_fd
 = -1;

342 
îr
;

348 
îr
:

349 
	`≥º‹
(
PATH_DEV_NVRAM
);

350  
î∫o
;

351 
	}
}

353 #ifde‡
EZP_PROD_SUPERCAT_X


355 
	$gë_¥od_ˇt
(*
¥od_ˇt_buf
, 
size_t
 
bufsz
)

357 *
¥od_ˇt_ruÀ
 = "prod_cat";

358 
size_t
 
cou¡
;

359 
tmp
[100];

360 *
off
 = (*Ë
tmp
;

362 i‡(
nvøm_fd
 < 0) {

363 i‡(
	`nvøm_öô
(
NULL
)){

364 
¥od_ˇt_buf
[0] = '\0';

368 
cou¡
 = 
	`°æí
(
¥od_ˇt_ruÀ
) + 1;

369 
	`°r˝y
((*Ë
off
, 
¥od_ˇt_ruÀ
);

370 
cou¡
 = 
	`ªad
(
nvøm_fd
, 
off
, count);

371 i‡(
cou¡
 == ()) {

372 
	`°∫˝y
(
¥od_ˇt_buf
, (*)&
nvøm_buf
[*
off
], 
bufsz
);

375 
¥od_ˇt_buf
[0] = '\0';

377 
	}
}

379 
	$gë_«me_wôh_¥odˇt
(c⁄° *
«me
, *
bu‚ame
, 
size_t
 
bufsz
) {

380 
¥od_ˇt_buf
[4];

381 
	`gë_¥od_ˇt
(
¥od_ˇt_buf
, (prod_cat_buf));

382 
	`¢¥ötf
(
bu‚ame
, 
bufsz
, "%s_%s", 
«me
, 
¥od_ˇt_buf
);

383 
	}
}

386 #i‡
deföed
(
NVRAM_MMAP
) && NVRAM_MMAP > 0

389 #ifde‡
EZP_PROD_SUPERCAT_X


390 
	$_nvøm_gë
(c⁄° *
«me
, 
wôh_¥od_ˇt
)

392 
	$nvøm_gë
(c⁄° *
«me
)

395 
size_t
 
cou¡
 = 
	`°æí
(
«me
) + 1;

396 
tmp
[100], *
vÆue
;

397 *
off
 = (*Ë
tmp
;

398 #ifde‡
EZP_PROD_SUPERCAT_X


399 
cuº_¥od_ˇt
[4];

400 *
¥od_ˇt_ruÀ
 = "prod_cat";

402 i‡(
nvøm_fd
 < 0)

403 i‡(
	`nvøm_öô
(
NULL
))

404  
NULL
;

406 i‡(
cou¡
 > (
tmp
)) {

407 i‡(!(
off
 = 
	`mÆloc
(
cou¡
)))

408  
NULL
;

410 #ifde‡
EZP_PROD_SUPERCAT_X


412 i‡(
wôh_¥od_ˇt
) {

413 
	`gë_¥od_ˇt
(
cuº_¥od_ˇt
, (curr_prod_cat));

416 
cou¡
 = 
	`°æí
(
«me
) + 1;

417 
off
 = (*Ë
tmp
;

419 
	`°r˝y
((*Ë
off
, 
«me
);

420 
cou¡
 = 
	`ªad
(
nvøm_fd
, 
off
, count);

422 i‡(
cou¡
 == ())

423 
vÆue
 = &
nvøm_buf
[*
off
];

424 i‡(
cou¡
 < 0) {

425 
vÆue
 = 
NULL
;

426 
	`≥º‹
(
PATH_DEV_NVRAM
);

429 
vÆue
 = 
NULL
;

430 #ifde‡
EZP_PROD_SUPERCAT_X


432 i‡(
wôh_¥od_ˇt
 && 
cuº_¥od_ˇt
[0]) {

433 
	`•rötf
(
tmp
, "%s_%s", 
«me
, 
cuº_¥od_ˇt
);

434 
cou¡
 = 
	`°æí
(
tmp
) + 1;

435 
off
 = (*Ë
tmp
;

436 
cou¡
 = 
	`ªad
(
nvøm_fd
, 
off
, count);

437 i‡(
cou¡
 == ())

438 
vÆue
 = &
nvøm_buf
[*
off
];

439 i‡(
cou¡
 < 0) {

440 
	`≥º‹
(
PATH_DEV_NVRAM
);

443 
vÆue
 = 
NULL
;

448 i‡(
off
 !(*Ë
tmp
)

449 
	`‰ì
(
off
);

450  
vÆue
;

451 
	}
}

455 #ifde‡
EZP_PROD_SUPERCAT_X


457 
	$nvøm_gë
(c⁄° *
«me
)

459  
	`_nvøm_gë
(
«me
,1);

460 
	}
}

467 
	$nvøm_gë
(c⁄° *
«me
)

469 
size_t
 
cou¡
 = 1024 ;

470 *
vÆue
;

472 i‡(
nvøm_fd
 < 0)

473 i‡(
	`nvøm_öô
(
NULL
))

474  
NULL
;

476 i‡(!(
vÆue
 = 
	`mÆloc
(
cou¡
)))

477  
NULL
;

480 
	`°r˝y
((*Ë
vÆue
, 
«me
);

482 
cou¡
 = 
	`ªad
(
nvøm_fd
, 
vÆue
, count);

484 i‡(
cou¡
 < 0) {

485 
	`≥º‹
(
PATH_DEV_NVRAM
);

486 
	`‰ì
(
vÆue
) ;

487 
vÆue
 = 
NULL
;

489 i‡(
cou¡
 == 0) {

490 
vÆue
[0] = '\0' ;

493  
vÆue
;

494 
	}
}

498 
	$nvøm_gëÆl
(*
buf
, 
cou¡
)

500 
ªt
;

502 i‡(
nvøm_fd
 < 0)

503 i‡((
ªt
 = 
	`nvøm_öô
(
NULL
)))

504  
ªt
;

506 i‡(
cou¡
 == 0)

510 *
buf
 = '\0';

512 
ªt
 = 
	`ªad
(
nvøm_fd
, 
buf
, 
cou¡
);

514 i‡(
ªt
 < 0)

515 
	`≥º‹
(
PATH_DEV_NVRAM
);

517  (
ªt
 =
cou¡
) ? 0 :Ñet;

518 
	}
}

521 
	$nvøm_gë_›ti⁄
(c⁄° *
«me
)

523 
nvøm_tu∂e
 *
v
;

524 
v
 = &
nvøm_ez∑ckë_deÁu…
[0]; v->
«me
 ; v++) {

525 i‡(!
	`°rcmp
(
v
->
«me
,Çame)) {

526  
v
->
›ti⁄
;

530  
NVRAM_UNDEFINED
;

531 
	}
}

534 
	$_nvøm_£t
(c⁄° *
«me
, c⁄° *
vÆue
)

536 
size_t
 
cou¡
 = 
	`°æí
(
«me
) + 1;

537 
tmp
[100], *
buf
 =Åmp;

538 
ªt
;

540 i‡(
nvøm_fd
 < 0)

541 i‡((
ªt
 = 
	`nvøm_öô
(
NULL
)))

542  
ªt
;

545 i‡(
vÆue
)

546 
cou¡
 +
	`°æí
(
vÆue
) + 1;

548 i‡(
cou¡
 > (
tmp
)) {

549 i‡(!(
buf
 = 
	`mÆloc
(
cou¡
)))

550  -
ENOMEM
;

553 i‡(
vÆue
)

554 
	`•rötf
(
buf
, "%s=%s", 
«me
, 
vÆue
);

556 
	`°r˝y
(
buf
, 
«me
);

558 
ªt
 = 
	`wrôe
(
nvøm_fd
, 
buf
, 
cou¡
);

560 i‡(
ªt
 < 0)

561 
	`≥º‹
(
PATH_DEV_NVRAM
);

563 i‡(
buf
 !
tmp
)

564 
	`‰ì
(
buf
);

566  (
ªt
 =
cou¡
) ? 0 :Ñet;

567 
	}
}

570 #ifde‡
EZP_PROD_SUPERCAT_X


571 
	$nvøm_£t_¥od
(c⁄° *
«me
, c⁄° *
vÆue
, 
wôh_¥od_ˇt
)

573 
	$nvøm_£t
(c⁄° *
«me
, c⁄° *
vÆue
)

576 #ifde‡
EZP_PROD_SUPERCAT_X


577 
cuº_¥od_ˇt
[4];

578 *
¥od_ˇt_ruÀ
 = "prod_cat";

580 
uöt32
 
›t
;

581 
tm≤ame
[100];

583 
	`°∫˝y
(
tm≤ame
, 
«me
, (tmpname));

584 
›t
 = 
	`nvøm_gë_›ti⁄
(
tm≤ame
);

586 i‡(
›t
 & 
NVRAM_UNDEFINED
) {

587 #ifde‡
EZP_PROD_SUPERCAT_X


589 i‡(
wôh_¥od_ˇt
) {

590 
	`gë_«me_wôh_¥odˇt
(
«me
, 
tm≤ame
, (tmpname));

591 
›t
 = 
	`nvøm_gë_›ti⁄
(
tm≤ame
);

593 i‡(
›t
 & 
NVRAM_UNDEFINED
) {

594  
EINVAL
;

599 i‡(
	`_nvøm_gë
(
«me
, 0)) {

600 
	`_nvøm_£t
(
«me
, 
NULL
);

605  
EINVAL
;

608 i‡(
›t
 & 
NVRAM_PROTECTED
) {

609 *
exi°
 = 
	`nvøm_gë
(
tm≤ame
);

610 i‡(
exi°
 && *exist) {

611  
EACCES
;

614  
	`_nvøm_£t
(
tm≤ame
, 
vÆue
);

615 
	}
}

618 #ifde‡
EZP_PROD_SUPERCAT_X


620 
	$nvøm_£t
(c⁄° *
«me
, c⁄° *
vÆue
) {

621  
	`nvøm_£t_¥od
(
«me
, 
vÆue
, 1);

622 
	}
}

626 
	$nvøm_f£t
(c⁄° *
«me
, c⁄° *
vÆue
)

628 #ifde‡
EZP_PROD_SUPERCAT_X


629 
uöt32
 
›t
;

630 
tm≤ame
[100];

631 
cuº_¥od_ˇt
[4];

632 *
¥od_ˇt_ruÀ
 = "prod_cat";

633 
size_t
 
cou¡
;

635 
	`gë_«me_wôh_¥odˇt
(
«me
, 
tm≤ame
, (tmpname));

636 
›t
 = 
	`nvøm_gë_›ti⁄
(
tm≤ame
);

638 i‡(!(
›t
 & 
NVRAM_UNDEFINED
)) {

642 i‡(
	`_nvøm_gë
(
«me
, 0)) {

643 
	`_nvøm_£t
(
«me
, 
NULL
);

645  
	`_nvøm_£t
(
tm≤ame
, 
vÆue
);

650  
	`_nvøm_£t
(
«me
, 
vÆue
);

651 
	}
}

654 
	$nvøm_un£t
(c⁄° *
«me
)

656  
	`nvøm_f£t
(
«me
, 
NULL
);

657 
	}
}

660 
	$nvøm_commô
()

662 
ªt
;

664 if((
	`check_a˘i⁄
(Ë=
ACT_IDLE
) ||

665 (
	`check_a˘i⁄
(Ë=
ACT_SW_RESTORE
) ||

666 (
	`check_a˘i⁄
(Ë=
ACT_HW_RESTORE
)){

667 i‡(
nvøm_fd
 < 0)

668 i‡((
ªt
 = 
	`nvøm_öô
(
NULL
)))

669  
ªt
;

671 
ªt
 = 
	`io˘l
(
nvøm_fd
, 
NVRAM_MAGIC
, 
NULL
);

673 i‡(
ªt
 < 0)

674 
	`≥º‹
(
PATH_DEV_NVRAM
);

677  
ªt
;

678 
	}
}

681 
	$nvøm_boŸ
()

683 
nvøm_tu∂e
 *
v
;

684 *
vÆue
;

685 
v
 = &
nvøm_ez∑ckë_deÁu…
[0]; v->
«me
 ; v++) {

686 
vÆue
 = 
	`nvøm_gë
(
v
->
«me
);

687 i‡(!
vÆue
 || !*value) {

689 i‡(
v
->
›ti⁄
 & 
NVRAM_EMPTY
)

692 i‡(
v
->
›ti⁄
 & 
NVRAM_DEFAULT
) {

693 
deÁu…_«me
[64];

695 
	`•rötf
(
deÁu…_«me
, "%s_deÁu…", 
v
->
«me
);

696 
v
->
vÆue
 = 
	`nvøm_gë
(
deÁu…_«me
);

699 
	`nvøm_f£t
(
v
->
«me
, v->
vÆue
);

702 i‡(
v
->
›ti⁄
 & 
NVRAM_TEMP
)

704 
	`nvøm_f£t
(
v
->
«me
, v->
vÆue
);

707 
	}
}

708 
	#VER_TO_VERID
(
__MAJOR__
, 
__SUB__
, 
__MINOR__
, 
__AB__
, 
__VAB__
Ë((__MAJOR__<<(4+8+4+8)Ë+ (__SUB__<<(8+4+8)Ë+ (__MINOR__<<(4+8)Ë+((__AB__ ='r'Ë? 0 :((__AB__-'a' + 1)<<8)Ë+ (__VAB__))

	)

709 
	$gë_vî
(*
vî°r
, *
ªlvî
, *
Æphabëavî
, *
°age
) {

710 *
dash±r
;

711 *
dŸ±r
;

712 *
ahph≠å
;

713 *
bë≠å
;

714 *
vî°¨t
;

715 
ªlv
 = 0, 
Æphabëav
 = 0, 
dŸ_Àvñ
 = 0, 
shi·_vÆ
 = 8;

717 if(!
vî°r
) ;

718 
dash±r
 = 
	`°rchr
(
vî°r
, '-');

719 
dŸ±r
 = 
	`°rchr
(
vî°r
, '.');

720 
ahph≠å
 = 
	`°rchr
(
vî°r
, 'A');

721 
bë≠å
 = 
	`°rchr
(
vî°r
, 'B');

722 
vî°¨t
 = 
vî°r
;

723 if(!
dŸ±r
) ;

726 
dŸ±r
) {

727 if(
dŸ_Àvñ
 < 2) {

728 
shi·_vÆ
 = 4;

730 
shi·_vÆ
 = 8;

732 
ªlv
 = (ªlv << 
shi·_vÆ
Ë+ 
	`©oi
(
vî°¨t
);

733 
vî°¨t
 = 
dŸ±r
 + 1;

734 
dŸ±r
 = 
	`°rchr
(
vî°¨t
, '.');

735 
dŸ_Àvñ
 ++;

737 if(!
dŸ±r
) {

738 
ªlv
 = (ªlv << 8Ë+ 
	`©oi
(
vî°¨t
);

741 if(
ahph≠å
 && 
dash±r
) {

742 *
°age
 = 'b';

743 
ªlv
 = (relv << 4) + 1;

744 
Æphabëav
 = 
	`©oi
(
ahph≠å
 + 1);

745 } if(
bë≠å
 && 
dash±r
) {

746 *
°age
 = 'c';

747 
ªlv
 = (relv << 4) + 2;

748 
Æphabëav
 = 
	`©oi
(
bë≠å
 + 1);

750 *
°age
 = 'a';

751 
ªlv
 = (relv << 4);

752 
Æphabëav
 = 0;

754 
ªlv
 = (ªlv << 8Ë+ 
Æphabëav
;

755 *
Æphabëavî
 = 
Æphabëav
;

756 *
ªlvî
 = 
ªlv
;

757 
	}
}

760 
	$n⁄_°™d¨d_ªÀa£_¥o˚ss
(*
ﬁd_°r
, *
√w_°r
) {

761 
ﬁdvî
 = 0, 
ﬁdabvî
 = 0, 
√wvî
 = 0, 
√wabvî
 = 0;

762 
ﬁdab
 = 'r', 
√wab
 = 'r';

763 
tocommô
 = 0;

764 
	`gë_vî
(
ﬁd_°r
, &
ﬁdvî
, &
ﬁdabvî
, &
ﬁdab
);

765 
	`gë_vî
(
√w_°r
, &
√wvî
, &
√wabvî
, &
√wab
);

766 if(
ﬁdab
 !
√wab
 && oldab != 'a' &&Çewab != 'a')  0;

767 if((
ﬁdvî
 >> 12Ë!(
√wvî
 >> 12))  0;

776 if(
√wvî
 =
	`VER_TO_VERID
(3,0,7,'a',37)) {

777 
	`ez∂ib_ª∂a˚_©å
("ntp_rule", 0, "zone", "UTC0");

778 
	`ez∂ib_ª∂a˚_©å
("ntp_rule", 0, "daylight", "0");

779 
tocommô
 = 1;

781 #ifde‡
PLATFORM_M2E


784 if((
ﬁdvî
 <
	`VER_TO_VERID
(3,1,0,'a',2)Ë&& (
√wvî
 >= VER_TO_VERID(3,1,0,'a',2))) {

785 
	`nvøm_deÁu…
();

786 
tocommô
 = 1;

789 if((
ﬁdvî
 < 
	`VER_TO_VERID
(3,1,0,'a',9)Ë&& (
√wvî
 >= VER_TO_VERID(3,1,0,'a',9))) {

790 
	`nvøm_deÁu…_ruÀ
("wan_pptp_l2tp_rule");

791 
tocommô
 = 1;

795 if((
ﬁdvî
 >
	`VER_TO_VERID
(3,1,0,'a',9)Ë&& (
√wvî
 < VER_TO_VERID(3,1,0,'a',9))) {

796 
	`nvøm_£t
("wan_pptp_l2tp_rule", "");

797 
tocommô
 = 1;

799 if((
ﬁdvî
 < 
	`VER_TO_VERID
(3,1,0,'a',14)Ë&& (
√wvî
 >= VER_TO_VERID(3,1,0,'a',14))) {

800 
	`sy°em
("mtd write /rom/rom/uboot.bin Bootload");

801 
	`nvøm_deÁu…
();

802 
tocommô
 = 1;

805 #ifde‡
PLATFORM_AXA


807 if((
ﬁdvî
 < 
	`VER_TO_VERID
(3,0,7,'a',50)Ë&& (
√wvî
 >= VER_TO_VERID(3,0,7,'a',50))) {

808 
	`nvøm_deÁu…
();

809 
tocommô
 = 1;

812  
tocommô
;

813 
	}
}

816 
	$•ecül_¥o˚ssög
(*
√w_°r
)

818 
tmp
[32];

819 *
vÆ
;

820 
ch™ge
 = 0;

822 
	`ez∂ib_gë_©å_vÆ
("ssh_ruÀ", 0, "íabÀ", 
tmp
, (tmp),

823 
EZPLIB_USE_CLI
);

824 i‡(
tmp
[0] != '0') {

825 
	`ez∂ib_ª∂a˚_©å
("ssh_rule", 0, "enable", "0");

828 
vÆ
 = 
	`nvøm_gë
("turbonat_enable");

829 i‡(!
vÆ
 || *val == '0') {

830 
	`nvøm_f£t
("turbonat_enable", "1");

847 
	`nvøm_commô
();

849 
	}
}

852 
	$fw_vîsi⁄_upd©e
(*
√w_°r
)

855 
	`nvøm_f£t
("fw_vîsi⁄", 
√w_°r
);

856 
	`nvøm_f£t
("cu°om_fw_vîsi⁄", 
	`x°r
(
CUSTOM_PROD_VERSION
));

857 
	`nvøm_commô
();

859 
	}
}

862 
	$mo§a_•ecül_fúmw¨e_£âög
()

864 *
tmp
;

866 
tmp
 = 
	`nvøm_gë
("ntp_rule");

867 i‡(!
tmp
) {

868 
	`nvøm_f£t
("ntp_rule", "^1^pool^north-america.pool.ntp.org^^UTC0^1");

869 
	`nvøm_commô
();

870 } i‡(
	`°rcmp
(
tmp
, "^1^pool^north-america.pool.ntp.org^^UTC0^1")) {

872 
	`nvøm_f£t
("ntp_rule", "^1^pool^north-america.pool.ntp.org^^UTC0^1");

873 
	`nvøm_commô
();

876 
	}
}

879 
	$nvøm_upgøde
(*
sour˚
)

881 
nvøm_fw_tu∂e
 *
v
;

882 
ﬁd
, 
√w
;

883 
ﬁd_°r
[32];

884 
√w_°r
[32];

885 
d°_vî_°r
[32];

886 
i
, 
ch™ge
 = 0;

888 i‡(
sour˚
 && *source) {

889 
	`°r˝y
(
ﬁd_°r
, 
sour˚
);

891 
	`°r˝y
(
ﬁd_°r
, 
	`nvøm_ß„_gë
("fw_version"));

893 
	`°r˝y
(
√w_°r
, 
	`x°r
(
EZP_PROD_VERSION
));

894 
	`°r˝y
(
d°_vî_°r
, 
	`x°r
(
EZP_PROD_VERSION
));

895 i‡(
	`°rcmp
(
ﬁd_°r
, 
√w_°r
)) {

897 #i‡
	`deföed
(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_M2E
)

898 if(
	`n⁄_°™d¨d_ªÀa£_¥o˚ss
(
ﬁd_°r
, 
√w_°r
))

899 
ch™ge
 = 1;

904 if(
	`•ecül_¥o˚ssög
(
√w_°r
))

905 
ch™ge
 = 1;

906 
	`fw_vîsi⁄_upd©e
(
d°_vî_°r
);

910 
i
 = 0; 
ﬁd_°r
[i] ='.' || 
	`isdigô
(old_str[i]) ; i++);

911 
ﬁd_°r
[
i
]='\0';

912 
i
 = 0; 
√w_°r
[i] ='.' || 
	`isdigô
(new_str[i]) ; i++);

913 
√w_°r
[
i
]='\0';

916 i‡(!*
ﬁd_°r
) {

917 
	`°r˝y
(
ﬁd_°r
, 
nvøm_fw_èbÀ
[0].
fw_°r
);

921 
ﬁd
 = 0xEFFFFFFF;

922 
v
 = &
nvøm_fw_èbÀ
[0]; v->
fw_°r
 ; v++) {

923 i‡(!
	`°rcmp
(
v
->
fw_°r
, 
ﬁd_°r
)) {

924 
ﬁd
 = 
v
->
fw_vîsi⁄
;

926 i‡(!
	`°rcmp
(
v
->
fw_°r
, 
√w_°r
)) {

927 
√w
 = 
v
->
fw_vîsi⁄
;

931 #i‡
	`deföed
(
EZP_SUB_BRAND_SONY
)

932 
	`mo§a_•ecül_fúmw¨e_£âög
();

935 i‡(
ﬁd
 < 
√w
) {

936 
	`¥ötf
("Upgødê[%s->%s]\n", 
ﬁd_°r
, 
√w_°r
);

938 
i
 = 
ﬁd
 + 1; i <
√w
; i++) {

939 i‡(
nvøm_fw_èbÀ
[
i
].
fw_upgøde_func
) {

940 (*
nvøm_fw_èbÀ
[
i
].
fw_upgøde_func
)();

943 
ch™ge
 = 1;

946 if(
	`°rcmp
(
	`nvøm_ß„_gë
("prod_subsubcat"), "")) {

949 
	`nvøm_un£t
("prod_subsubcat");

950 
ch™ge
 = 1;

952  
ch™ge
;

953 
	}
}

956 
	$nvøm_downgøde
(*
èrgë
)

958 
nvøm_fw_tu∂e
 *
v
;

959 
ﬁd
, 
√w
 = 
NVRAM_FW_INVALID
;

960 
ﬁd_°r
[32];

961 
√w_°r
[32];

962 
d°_vî_°r
[32];

963 
i
, 
ch™ge
 = 0;

965 
	`°r˝y
(
ﬁd_°r
, 
	`nvøm_ß„_gë
("fw_version"));

966 
	`°r˝y
(
√w_°r
, 
èrgë
);

967 
	`°r˝y
(
d°_vî_°r
, 
èrgë
);

969 i‡(
	`°rcmp
(
ﬁd_°r
, 
√w_°r
)) {

973 #i‡
	`deföed
(
PLATFORM_AXA
Ë|| deföed(
PLATFORM_M2E
)

974 
	`n⁄_°™d¨d_ªÀa£_¥o˚ss
(
ﬁd_°r
, 
√w_°r
);

976 
ch™ge
 = 
	`•ecül_¥o˚ssög
(
√w_°r
);

980 
i
 = 0; 
ﬁd_°r
[i] ='.' || 
	`isdigô
(old_str[i]) ; i++);

981 
ﬁd_°r
[
i
]='\0';

982 
i
 = 0; 
√w_°r
[i] ='.' || 
	`isdigô
(new_str[i]) ; i++);

983 
√w_°r
[
i
]='\0';

986 i‡(!*
ﬁd_°r
) {

987 
	`°r˝y
(
ﬁd_°r
, 
nvøm_fw_èbÀ
[0].
fw_°r
);

989 i‡(!*
√w_°r
) {

990 
	`°r˝y
(
√w_°r
, 
nvøm_fw_èbÀ
[0].
fw_°r
);

994 
ﬁd
 = 0;

995 
v
 = &
nvøm_fw_èbÀ
[0]; v->
fw_°r
 ; v++) {

996 i‡(!
	`°rcmp
(
v
->
fw_°r
, 
ﬁd_°r
)) {

997 
ﬁd
 = 
v
->
fw_vîsi⁄
;

999 i‡(!
	`°rcmp
(
v
->
fw_°r
, 
√w_°r
)) {

1000 
√w
 = 
v
->
fw_vîsi⁄
;

1003 i‡(
ﬁd
 > 
√w
) {

1004 
	`¥ötf
("Downgødê[%s->%s]\n", 
ﬁd_°r
, 
√w_°r
);

1006 
i
 = 
ﬁd
; i >
√w
 + 1; i-- ) {

1007 i‡(
nvøm_fw_èbÀ
[
i
].
fw_downgøde_func
) {

1008 (*
nvøm_fw_èbÀ
[
i
].
fw_downgøde_func
)();

1011 
	`fw_vîsi⁄_upd©e
(
d°_vî_°r
);

1012 
ch™ge
 = 1;

1014 if(
	`°rcmp
(
	`nvøm_ß„_gë
("prod_subsubcat"), "")) {

1017 
	`nvøm_un£t
("prod_subsubcat");

1018 
ch™ge
 = 1;

1020  
ch™ge
;

1021 
	}
}

1024 
	$nvøm_deÁu…
()

1026 
nvøm_tu∂e
 *
v
;

1027 
v
 = &
nvøm_ez∑ckë_deÁu…
[0]; v->
«me
 ; v++) {

1028 
	`nvøm_£t
(
v
->
«me
, v->
vÆue
);

1030 
	}
}

1033 
	$nvøm_deÁu…_ruÀ
(*
ruÀ«me
)

1035 
nvøm_tu∂e
 *
v
;

1036 
v
 = &
nvøm_ez∑ckë_deÁu…
[0]; v->
«me
 ; v++) {

1037 if(!
	`°rcmp
(
v
->
«me
, 
ruÀ«me
)) {

1038 
	`nvøm_£t
(
v
->
«me
, v->
vÆue
);

1042 
	}
}

1045 
	$nvøm_exp‹t
(*
fûíame
)

1047 
FILE
 *
Â
;

1048 
nvøm_tu∂e
 *
v
;

1049 *
vÆue
;

1051 i‡–!(
Â
 = 
	`f›í
(
fûíame
, "wb") ))

1054 
	`Ârötf
(
Â
, "[EZP_LOG v1.1] %†%†[EZP_%s%s] " 
	`x°r
(
EZP_PROD_VERSION
) "\n",

1055 
	`nvøm_ß„_gë
("brand"),Çvram_safe_get("model"),

1056 
	`nvøm_ß„_gë
("prod_cat"),Çvram_safe_get("prod_subcat"));

1058 
v
 = &
nvøm_ez∑ckë_deÁu…
[0]; v->
«me
 ; v++) {

1060 i‡((
v
->
›ti⁄
 & 
NVRAM_PROTECTED
) ||

1061 (
v
->
›ti⁄
 & 
NVRAM_TEMP
)) {

1064 
vÆue
 = 
	`nvøm_ß„_gë
(
v
->
«me
);

1065 
	`Ârötf
(
Â
, "%s=%s\n", 
v
->
«me
, 
vÆue
);

1067 
	`f˛o£
(
Â
);

1068 
	}
}

1071 
	$nvøm_imp‹t
(*
fûíame
)

1073 
FILE
 *
Â
;

1074 *
p
, *
q
;

1075 
buf
[
NVRAM_TMP_LEN
];

1076 
ﬁd_°r
[32], 
√w_°r
[32];

1077 
ﬁd
, 
√w
;

1078 
i
;

1080 
nvøm_tu∂e
 *
v
;

1081 
nvøm_fw_tu∂e
 *
w
;

1083 i‡–!(
Â
 = 
	`f›í
(
fûíame
, "r") ))

1087 
	`fgës
(
buf
, (buf), 
Â
);

1088 i‡((
p
 = 
	`°r°r
(
buf
, "EZP_LOG")Ë=
NULL
) {

1089 
	`¥ötf
("log file formatÉrror\n");

1092 i‡((
p
 = 
	`°r°r
’ + 
	`°æí
("EZP_LOG"), "EZP_")Ë=
NULL
) {

1093 
	`¥ötf
("log file formatÉrror:Öroduct\n");

1096 
p
 +
	`°æí
("EZP_");

1098 
q
 = 
	`nvøm_ß„_gë
("prod_cat");

1099 i‡(
p
[0] !
q
[0]) {

1100 
	`¥ötf
("log file formatÉrror: category\n");

1104 
q
 = 
	`nvøm_ß„_gë
("prod_subcat");

1105 i‡(
p
[1] !
q
[0]) {

1106 
	`¥ötf
("log file formatÉrror: subcategory\n");

1110 
p
 = 
	`°rchr
(p, ']');

1111 
p
 += 1;

1113 i‡(*
p
 == '\n' || *p == '\0') {

1114 
	`°r˝y
(
ﬁd_°r
, "0.0.0");

1116 
	`°∫˝y
(
ﬁd_°r
, 
p
 + 1, 
	`°æí
(p + 1));

1120 
	`°r˝y
(
√w_°r
, 
	`x°r
(
EZP_PROD_VERSION
));

1122 
i
 = 0; 
ﬁd_°r
[i] ='.' || 
	`isdigô
(old_str[i]) ; i++);

1123 
ﬁd_°r
[
i
]='\0';

1124 
i
 = 0; 
√w_°r
[i] ='.' || 
	`isdigô
(new_str[i]) ; i++);

1125 
√w_°r
[
i
]='\0';

1129 
ﬁd
 = 0x0FFFFFFF;

1131 
w
 = &
nvøm_fw_èbÀ
[0]; w->
fw_°r
 ; w++) {

1132 i‡(!
	`°rcmp
(
w
->
fw_°r
, 
ﬁd_°r
)) {

1133 
ﬁd
 = 
w
->
fw_vîsi⁄
;

1135 i‡(!
	`°rcmp
(
w
->
fw_°r
, 
√w_°r
)) {

1136 
√w
 = 
w
->
fw_vîsi⁄
;

1140 i‡(
ﬁd
 > 
√w
) {

1141 
	`¥ötf
("log file formatÉrror:Çewer version configuration format\n");

1145 
	`fgës
(
buf
, (buf), 
Â
)) {

1146 i‡((
p
 = 
	`°rchr
(
buf
, '=')Ë=
NULL
)

1150 *
p
 = 0;

1152 
v
 = &
nvøm_ez∑ckë_deÁu…
[0]; v->
«me
 ; v++) {

1153 i‡(!
	`°rcmp
(
v
->
«me
, 
buf
)) {

1158 i‡(!
v
->
«me
 || (v->
›ti⁄
 & 
NVRAM_PROTECTED
) ||

1159 (
v
->
›ti⁄
 & 
NVRAM_TEMP
)) {

1161 
	`¥ötf
("övÆid: %s=%s\n", 
buf
, 
p
 + 1);

1165 i‡(*(
p
 + 1) == '\n') {

1167 
	`nvøm_£t
(
buf
, "");

1170 
p
++;

1172 i‡(*(
p
 + 
	`°æí
(p) - 1) == '\n') {

1173 *(
p
 + 
	`°æí
(p) - 1) = '\0';

1175 
	`nvøm_£t
(
buf
, 
p
);

1178 
	`f˛o£
(
Â
);

1180 
	`nvøm_upgøde
(
ﬁd_°r
);

1183 
	}
}

1186 
	$check_a˘i⁄
()

1188 
buf
[80] = "";

1190 if(
	`fûe_to_buf
(
ACTION_FILE
, 
buf
, (buf))){

1191 if(!
	`°rcmp
(
buf
, "ACT_TFTP_UPGRADE")){

1192 
	`˝rötf
("Upgrading fromÅftpÇow, quietÉxit....\n");

1193  
ACT_TFTP_UPGRADE
;

1195 if(!
	`°rcmp
(
buf
, "ACT_WEBS_UPGRADE")){

1196 
	`˝rötf
("Upgrading from web (https)Çow, quietÉxit....\n");

1197  
ACT_WEBS_UPGRADE
;

1199 if(!
	`°rcmp
(
buf
, "ACT_WEB_UPGRADE")){

1200 
	`˝rötf
("Upgrading from web (http)Çow, quietÉxit....\n");

1201  
ACT_WEB_UPGRADE
;

1203 if(!
	`°rcmp
(
buf
, "ACT_SW_RESTORE")){

1204 
	`˝rötf
("ReceiveÑestore command from web, quietÉxit....\n");

1205  
ACT_SW_RESTORE
;

1207 if(!
	`°rcmp
(
buf
, "ACT_HW_RESTORE")){

1208 
	`˝rötf
("ReceiveÑestore commond fromÑesetbutton, quietÉxit....\n");

1209  
ACT_HW_RESTORE
;

1213  
ACT_IDLE
;

1214 
	}
}

1217 
	$fûe_to_buf
(*
∑th
, *
buf
, 
Àn
)

1219 
FILE
 *
Â
;

1221 
	`mem£t
(
buf
, 0 , 
Àn
);

1223 i‡((
Â
 = 
	`f›í
(
∑th
, "r"))) {

1224 
	`fgës
(
buf
, 
Àn
, 
Â
);

1225 
	`f˛o£
(
Â
);

1230 
	}
}

1232 
	$fw_func_0_0_0_to_1_6_5
()

1234 
i
, 
j
, 
Àn
;

1235 
√w
[1024];

1236 
tmp
[64];

1237 *
°r
 = &
√w
[0];

1238 *
ruÀ_£t
 = "wan_bw_rule";

1239 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
);

1241 
	`¥ötf
("fw_func_0_0_0_to_1_6_5\n");

1245 i‡(
vÆue
 && *value) {

1255 
i
 = 0, 
j
 = 0, 
Àn
 = 0; i < 
WAN_NUM
; i++) {

1257 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ty≥", 
tmp
, (tmp),

1258 
EZPLIB_USE_CLI
);

1259 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1260 
j
 +
Àn
;

1261 
°r
 +
Àn
;

1263 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dl", 
tmp
, (tmp),

1264 
EZPLIB_USE_CLI
);

1265 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1266 
j
 +
Àn
;

1267 
°r
 +
Àn
;

1269 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ul", 
tmp
, (tmp),

1270 
EZPLIB_USE_CLI
);

1271 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1272 
j
 +
Àn
;

1273 
°r
 +
Àn
;

1276 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^", 
tmp
);

1277 
j
 +
Àn
;

1278 
°r
 +
Àn
;

1280 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^", 
tmp
);

1281 
j
 +
Àn
;

1282 
°r
 +
Àn
;

1284 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ex≥π_dl", 
tmp
, (tmp),

1285 
EZPLIB_USE_CLI
);

1286 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1287 
j
 +
Àn
;

1288 
°r
 +
Àn
;

1290 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ex≥π_ul", 
tmp
, (tmp),

1291 
EZPLIB_USE_CLI
);

1292 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1293 
j
 +
Àn
;

1294 
°r
 +
Àn
;

1296 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "lök_≥r˚¡", 
tmp
, (tmp),

1297 
EZPLIB_USE_CLI
);

1298 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1299 
j
 +
Àn
;

1300 
°r
 +
Àn
;

1302 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "globÆ_≥r˚¡", 
tmp
, (tmp),

1303 
EZPLIB_USE_CLI
);

1304 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1305 
j
 +
Àn
;

1306 
°r
 +
Àn
;

1308 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "u£r_≥r˚¡", 
tmp
, (tmp),

1309 
EZPLIB_USE_CLI
);

1310 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1311 
j
 +
Àn
;

1312 
°r
 +
Àn
;

1314 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmax", 
tmp
, (tmp),

1315 
EZPLIB_USE_CLI
);

1316 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1317 
j
 +
Àn
;

1318 
°r
 +
Àn
;

1321 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmö", 
tmp
, (tmp),

1322 
EZPLIB_USE_CLI
);

1323 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

1324 
j
 +
Àn
;

1325 
°r
 +
Àn
;

1327 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

1331 
	}
}

1333 
	$fw_func_1_6_5_to_0_0_0
()

1335 
i
, 
j
, 
Àn
;

1336 
√w
[1024];

1337 
tmp
[128];

1338 *
°r
 = &
√w
[0];

1339 *
ruÀ_£t
 = "wan_bw_rule";

1340 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
);

1342 
	`¥ötf
("fw_func_1_6_5_to_0_0_0\n");

1344 
i
 = 0; i < 
WAN_NUM
; i++) {

1345 
	`¢¥ötf
(
tmp
, 64, "w™%d_bw_mode", 
i
);

1346 
	`nvøm_un£t
(
tmp
);

1349 i‡(
vÆue
 && *value) {

1350 
i
 = 0, 
j
 = 0, 
Àn
 = 0; i < 
WAN_NUM
; i++) {

1352 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ty≥", 
tmp
, (tmp),

1353 
EZPLIB_USE_CLI
);

1354 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1355 
j
 +
Àn
;

1356 
°r
 +
Àn
;

1358 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dl", 
tmp
, (tmp),

1359 
EZPLIB_USE_CLI
);

1360 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1361 
j
 +
Àn
;

1362 
°r
 +
Àn
;

1364 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ul", 
tmp
, (tmp),

1365 
EZPLIB_USE_CLI
);

1366 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1367 
j
 +
Àn
;

1368 
°r
 +
Àn
;

1370 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "lök_≥r˚¡", 
tmp
, (tmp),

1371 
EZPLIB_USE_CLI
);

1372 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1373 
j
 +
Àn
;

1374 
°r
 +
Àn
;

1376 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "globÆ_≥r˚¡", 
tmp
, (tmp),

1377 
EZPLIB_USE_CLI
);

1378 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1379 
j
 +
Àn
;

1380 
°r
 +
Àn
;

1382 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "u£r_≥r˚¡", 
tmp
, (tmp),

1383 
EZPLIB_USE_CLI
);

1384 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1385 
j
 +
Àn
;

1386 
°r
 +
Àn
;

1388 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmax", 
tmp
, (tmp),

1389 
EZPLIB_USE_CLI
);

1390 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1391 
j
 +
Àn
;

1392 
°r
 +
Àn
;

1394 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmö", 
tmp
, (tmp),

1395 
EZPLIB_USE_CLI
);

1396 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1397 
j
 +
Àn
;

1398 
°r
 +
Àn
;

1400 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_downmax", 
tmp
, (tmp),

1401 
EZPLIB_USE_CLI
);

1402 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1403 
j
 +
Àn
;

1404 
°r
 +
Àn
;

1407 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_downmö", 
tmp
, (tmp),

1408 
EZPLIB_USE_CLI
);

1409 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

1410 
j
 +
Àn
;

1411 
°r
 +
Àn
;

1413 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

1417 
	}
}

1419 
	$fw_func_1_6_5_to_1_6_6
()

1421 
i
, 
j
, 
Àn
;

1422 
√w
[1024];

1423 
tmp
[64];

1424 *
°r
 = &
√w
[0];

1425 *
ruÀ_£t
 = "upnp_rule";

1426 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
);

1428 
	`¥ötf
("fw_func_1_6_5_to_1_6_6\n");

1431 i‡(
vÆue
 && *value) {

1439 
i
 = 
j
 = 0;

1441 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "«me", 
tmp
, (tmp),

1442 
EZPLIB_USE_CLI
);

1443 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1444 
j
 +
Àn
;

1445 
°r
 +
Àn
;

1447 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "íabÀ", 
tmp
, (tmp),

1448 
EZPLIB_USE_CLI
);

1449 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1450 
j
 +
Àn
;

1451 
°r
 +
Àn
;

1454 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^", 
tmp
);

1455 
j
 +
Àn
;

1456 
°r
 +
Àn
;

1458 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "pmp_íabÀ", 
tmp
, (tmp),

1459 
EZPLIB_USE_CLI
);

1460 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1461 
j
 +
Àn
;

1462 
°r
 +
Àn
;

1464 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "extif", 
tmp
, (tmp),

1465 
EZPLIB_USE_CLI
);

1466 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1467 
j
 +
Àn
;

1468 
°r
 +
Àn
;

1471 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "öif", 
tmp
, (tmp),

1472 
EZPLIB_USE_CLI
);

1473 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

1474 
j
 +
Àn
;

1475 
°r
 +
Àn
;

1477 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

1480 
	}
}

1482 
	$fw_func_1_6_6_to_1_6_5
()

1484 
i
, 
j
, 
Àn
;

1485 
√w
[1024];

1486 
tmp
[128];

1487 *
°r
 = &
√w
[0];

1488 *
ruÀ_£t
 = "upnp_rule";

1489 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
);

1491 
	`¥ötf
("fw_func_1_6_6_to_1_6_5\n");

1494 i‡(
vÆue
 && *value) {

1495 
i
 = 0;

1497 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "«me", 
tmp
, (tmp),

1498 
EZPLIB_USE_CLI
);

1499 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1500 
j
 +
Àn
;

1501 
°r
 +
Àn
;

1503 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "íabÀ", 
tmp
, (tmp),

1504 
EZPLIB_USE_CLI
);

1505 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1506 
j
 +
Àn
;

1507 
°r
 +
Àn
;

1509 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "extif", 
tmp
, (tmp),

1510 
EZPLIB_USE_CLI
);

1511 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1512 
j
 +
Àn
;

1513 
°r
 +
Àn
;

1515 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "öif", 
tmp
, (tmp),

1516 
EZPLIB_USE_CLI
);

1517 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1518 
j
 +
Àn
;

1519 
°r
 +
Àn
;

1522 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "p‹t", 
tmp
, (tmp),

1523 
EZPLIB_USE_CLI
);

1524 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

1525 
j
 +
Àn
;

1526 
°r
 +
Àn
;

1528 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

1531 
	}
}

1532 
	$fw_func_1_6_6_to_1_6_7
()

1534 
i
, 
j
, 
Àn
;

1535 
√w
[1024];

1536 
tmp
[64];

1537 *
°r
 = &
√w
[0];

1538 *
ruÀ_£t
 = "wan_bw_rule";

1539 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
);

1541 
	`¥ötf
("fw_func_1_6_6_to_1_6_7\n");

1544 i‡(
vÆue
 && *value) {

1553 
i
 = 0, 
j
 = 0, 
Àn
 = 0; i < 
WAN_NUM
; i++) {

1555 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ty≥", 
tmp
, (tmp),

1556 
EZPLIB_USE_CLI
);

1558 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "A%s^", 
tmp
);

1559 
j
 +
Àn
;

1560 
°r
 +
Àn
;

1562 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dl", 
tmp
, (tmp),

1563 
EZPLIB_USE_CLI
);

1564 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1565 
j
 +
Àn
;

1566 
°r
 +
Àn
;

1568 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ul", 
tmp
, (tmp),

1569 
EZPLIB_USE_CLI
);

1570 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1571 
j
 +
Àn
;

1572 
°r
 +
Àn
;

1574 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ex≥π_dl", 
tmp
, (tmp),

1575 
EZPLIB_USE_CLI
);

1576 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1577 
j
 +
Àn
;

1578 
°r
 +
Àn
;

1580 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ex≥π_ul", 
tmp
, (tmp),

1581 
EZPLIB_USE_CLI
);

1582 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1583 
j
 +
Àn
;

1584 
°r
 +
Àn
;

1586 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "lök_≥r˚¡", 
tmp
, (tmp),

1587 
EZPLIB_USE_CLI
);

1588 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1589 
j
 +
Àn
;

1590 
°r
 +
Àn
;

1592 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "globÆ_≥r˚¡", 
tmp
, (tmp),

1593 
EZPLIB_USE_CLI
);

1594 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1595 
j
 +
Àn
;

1596 
°r
 +
Àn
;

1598 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "u£r_≥r˚¡", 
tmp
, (tmp),

1599 
EZPLIB_USE_CLI
);

1600 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1601 
j
 +
Àn
;

1602 
°r
 +
Àn
;

1604 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmax", 
tmp
, (tmp),

1605 
EZPLIB_USE_CLI
);

1606 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1607 
j
 +
Àn
;

1608 
°r
 +
Àn
;

1610 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmö", 
tmp
, (tmp),

1611 
EZPLIB_USE_CLI
);

1612 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1613 
j
 +
Àn
;

1614 
°r
 +
Àn
;

1616 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_downmax", 
tmp
, (tmp),

1617 
EZPLIB_USE_CLI
);

1618 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1619 
j
 +
Àn
;

1620 
°r
 +
Àn
;

1622 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_downmö", 
tmp
, (tmp),

1623 
EZPLIB_USE_CLI
);

1624 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

1625 
j
 +
Àn
;

1626 
°r
 +
Àn
;

1628 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

1632 
	}
}

1634 
	$fw_func_1_6_7_to_1_6_6
()

1636 
i
, 
j
, 
k
, 
Àn
;

1637 
√w
[1024];

1638 
tmp
[128];

1639 *
°r
 = &
√w
[0];

1640 *
ruÀ_£t
 = "wan_bw_rule";

1641 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
);

1642 *
ty≥
;

1643 
tmp_dl
[128], 
tmp_ul
[128];

1644 *
bw_ty≥
[] = {

1646 "12M1M", 
NULL


1649 
	`¥ötf
("fw_func_1_6_7_to_1_6_6\n");

1652 i‡(
vÆue
 && *value) {

1653 
i
 = 0, 
j
 = 0, 
Àn
 = 0; i < 
WAN_NUM
; i++) {

1654 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ty≥", 
tmp
, (tmp),

1655 
EZPLIB_USE_CLI
);

1656 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dl", 
tmp_dl
, (
tmp
),

1657 
EZPLIB_USE_CLI
);

1658 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ul", 
tmp_ul
, (
tmp
),

1659 
EZPLIB_USE_CLI
);

1661 i‡(!
	`°rcmp
(
tmp
, "Custom")) {

1662 
ty≥
 = "Custom";

1664 
ty≥
 = &
tmp
[1];

1665 
k
 = 0; 
bw_ty≥
[k]; k++) {

1666 i‡(!
	`°rcmp
(
ty≥
, 
bw_ty≥
[
k
])) {

1670 i‡(!
bw_ty≥
[
k
]) {

1672 
ty≥
 = "2M256K";

1673 
	`°r˝y
(
tmp_dl
, "2048");

1674 
	`°r˝y
(
tmp_ul
, "256");

1677 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^%s^%s^", 
ty≥
, 
tmp_dl
, 
tmp_ul
);

1678 
j
 +
Àn
;

1679 
°r
 +
Àn
;

1681 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ex≥π_dl", 
tmp
, (tmp),

1682 
EZPLIB_USE_CLI
);

1683 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1684 
j
 +
Àn
;

1685 
°r
 +
Àn
;

1687 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ex≥π_ul", 
tmp
, (tmp),

1688 
EZPLIB_USE_CLI
);

1689 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1690 
j
 +
Àn
;

1691 
°r
 +
Àn
;

1693 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "lök_≥r˚¡", 
tmp
, (tmp),

1694 
EZPLIB_USE_CLI
);

1695 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1696 
j
 +
Àn
;

1697 
°r
 +
Àn
;

1699 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "globÆ_≥r˚¡", 
tmp
, (tmp),

1700 
EZPLIB_USE_CLI
);

1701 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1702 
j
 +
Àn
;

1703 
°r
 +
Àn
;

1705 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "u£r_≥r˚¡", 
tmp
, (tmp),

1706 
EZPLIB_USE_CLI
);

1707 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1708 
j
 +
Àn
;

1709 
°r
 +
Àn
;

1711 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmax", 
tmp
, (tmp),

1712 
EZPLIB_USE_CLI
);

1713 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1714 
j
 +
Àn
;

1715 
°r
 +
Àn
;

1717 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_upmö", 
tmp
, (tmp),

1718 
EZPLIB_USE_CLI
);

1719 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1720 
j
 +
Àn
;

1721 
°r
 +
Àn
;

1723 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_downmax", 
tmp
, (tmp),

1724 
EZPLIB_USE_CLI
);

1725 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1726 
j
 +
Àn
;

1727 
°r
 +
Àn
;

1729 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "dbm_downmö", 
tmp
, (tmp),

1730 
EZPLIB_USE_CLI
);

1731 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

1732 
j
 +
Àn
;

1733 
°r
 +
Àn
;

1735 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

1739 
	}
}

1740 
	$fw_func_1_6_7_to_1_7_0
()

1742 
	`¥ötf
("fw_func_1_6_7_to_1_7_0\n");

1744 
	}
}

1745 
	$fw_func_1_7_0_to_1_6_7
()

1747 
	`¥ötf
("fw_func_1_7_0_to_1_6_7\n");

1749 
	}
}

1750 
	$fw_func_1_7_0_to_1_7_1
()

1752 
	`¥ötf
("fw_func_1_7_0_to_1_7_1\n");

1754 
	}
}

1755 
	$fw_func_1_7_1_to_1_7_0
()

1757 
	`¥ötf
("fw_func_1_7_1_to_1_7_0\n");

1759 
	}
}

1760 
	$fw_func_1_7_1_to_1_7_2
()

1762 
	`¥ötf
("fw_func_1_7_1_to_1_7_2\n");

1764 
	}
}

1765 
	$fw_func_1_7_2_to_1_7_1
()

1767 
	`¥ötf
("fw_func_1_7_2_to_1_7_1\n");

1769 
	}
}

1770 
	$fw_func_1_7_2_to_1_7_3
()

1772 
	`¥ötf
("fw_func_1_7_2_to_1_7_3\n");

1774 
	}
}

1775 
	$fw_func_1_7_3_to_1_7_2
()

1777 
	`¥ötf
("fw_func_1_7_3_to_1_7_2\n");

1779 
	}
}

1780 
	$fw_func_1_7_3_to_1_7_4
()

1782 
	`¥ötf
("fw_func_1_7_3_to_1_7_4\n");

1784 
	}
}

1785 
	$fw_func_1_7_4_to_1_7_3
()

1787 
	`¥ötf
("fw_func_1_7_4_to_1_7_3\n");

1789 
	}
}

1790 
	$fw_func_1_7_4_to_1_7_5
()

1792 *
ruÀ_£t
 = "upnp_rule";

1793 
tmp
[32];

1795 
	`¥ötf
("fw_func_1_7_4_to_1_7_5\n");

1798 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "pmp_íabÀ", 
tmp
, (tmp),

1799 
EZPLIB_USE_CLI
);

1800 i‡(!
	`°rcmp
(
tmp
, "1")) {

1801 
	`ez∂ib_ª∂a˚_©å
(
ruÀ_£t
, 0, "pmp_enable", "0");

1805 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "p‹t", 
tmp
, —mp), 
EZPLIB_USE_CLI
);

1806 i‡(!
	`°rcmp
(
tmp
, "5000")) {

1807 
	`ez∂ib_ª∂a˚_©å
(
ruÀ_£t
, 0, "port", "5555");

1811 
	}
}

1812 
	$fw_func_1_7_5_to_1_7_4
()

1814 
	`¥ötf
("fw_func_1_7_5_to_1_7_4\n");

1817 
	}
}

1818 
	$fw_func_1_7_5_to_1_7_6
()

1820 
i
, 
j
, 
Àn
, 
ruÀ_num
, 
max
;

1821 
√w
[1024], 
ﬁd
[1024];

1822 
tmp
[64], 
tmp2
[64], 
tmp3
[64];

1823 *
°r
 = &
√w
[0];

1824 *
ruÀ_£t
 = "ntp_rule";

1825 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
), *
vÆue2
;

1826 *
wl_íabÀ
, *
±r
;

1828 
	`¥ötf
("fw_func_1_7_5_to_1_7_6\n");

1832 i‡(
vÆue
 && *value) {

1840 
i
 = 
j
 = 0;

1841 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "«me", 
tmp
, (tmp),

1842 
EZPLIB_USE_CLI
);

1843 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1844 
j
 +
Àn
;

1845 
°r
 +
Àn
;

1847 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "íabÀ", 
tmp
, (tmp),

1848 
EZPLIB_USE_CLI
);

1849 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1850 
j
 +
Àn
;

1851 
°r
 +
Àn
;

1854 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "poﬁ^", 
tmp
);

1855 
j
 +
Àn
;

1856 
°r
 +
Àn
;

1858 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ty≥", 
tmp
, (tmp),

1859 
EZPLIB_USE_CLI
);

1860 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1861 
j
 +
Àn
;

1862 
°r
 +
Àn
;

1865 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "^", 
tmp
);

1866 
j
 +
Àn
;

1867 
°r
 +
Àn
;

1871 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "poﬁ", 
tmp
, (tmp),

1872 
EZPLIB_USE_CLI
);

1873 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

1874 
j
 +
Àn
;

1875 
°r
 +
Àn
;

1877 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

1880 
ruÀ_num
 = 
	`©oi
(
	`nvøm_ß„_gë
("ipsec_rule_num"));

1881 
ruÀ_£t
 = "ipsec_rule";

1883 
i
 = 
j
 = 0; i < 
ruÀ_num
; i++) {

1884 
°r
 = &
√w
[0];

1885 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
i
, 
ﬁd
, 1024);

1888 i‡(
ﬁd
[0]) {

1895 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 0, 1, 
tmp
, (tmp));

1896 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1897 
j
 +
Àn
;

1898 
°r
 +
Àn
;

1901 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 3, 11, 
tmp
, (tmp));

1902 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1903 
j
 +
Àn
;

1904 
°r
 +
Àn
;

1907 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 27, 30, 
tmp
, (tmp));

1908 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1909 
j
 +
Àn
;

1910 
°r
 +
Àn
;

1913 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 2, 2, 
tmp
, (tmp));

1914 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1915 
j
 +
Àn
;

1916 
°r
 +
Àn
;

1919 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 12, 12, 
tmp
, (tmp));

1920 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1921 
j
 +
Àn
;

1922 
°r
 +
Àn
;

1925 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 18, 18, 
tmp
, (tmp));

1926 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1927 
j
 +
Àn
;

1928 
°r
 +
Àn
;

1931 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 24, 25, 
tmp
, (tmp));

1932 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

1933 
j
 +
Àn
;

1934 
°r
 +
Àn
;

1937 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 13, 13, 
tmp
, (tmp));

1938 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 14, 14, 
tmp2
, (
tmp
));

1939 i‡(
tmp
[0] == '1') {

1940 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "md5");

1941 } i‡(
tmp2
[0] == '1') {

1942 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "sha1");

1945 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "md5");

1947 
j
 +
Àn
;

1948 
°r
 +
Àn
;

1951 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 15, 15, 
tmp
, (tmp));

1952 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 16, 16, 
tmp2
, (
tmp
));

1953 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 17, 17, 
tmp3
, (
tmp
));

1954 i‡(
tmp2
[0] == '1') {

1955 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "3des");

1956 } i‡(
tmp3
[0] == '1') {

1957 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "aes");

1958 } i‡(
tmp
[0] == '1') {

1959 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "des");

1962 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "3des");

1964 
j
 +
Àn
;

1965 
°r
 +
Àn
;

1968 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "dh2^");

1969 
j
 +
Àn
;

1970 
°r
 +
Àn
;

1973 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 19, 19, 
tmp
, (tmp));

1974 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 20, 20, 
tmp2
, (
tmp
));

1975 i‡(
tmp
[0] == '1') {

1976 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "md5");

1977 } i‡(
tmp2
[0] == '1') {

1978 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "sha1");

1981 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "md5");

1983 
j
 +
Àn
;

1984 
°r
 +
Àn
;

1987 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 21, 21, 
tmp
, (tmp));

1988 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 22, 22, 
tmp2
, (
tmp
));

1989 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 23, 23, 
tmp3
, (
tmp
));

1990 i‡(
tmp2
[0] == '1') {

1991 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "3des");

1992 } i‡(
tmp3
[0] == '1') {

1993 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "aes");

1994 } i‡(
tmp
[0] == '1') {

1995 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "des");

1998 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", "3des");

2000 
j
 +
Àn
;

2001 
°r
 +
Àn
;

2004 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "dh2");

2005 
j
 +
Àn
;

2006 
°r
 +
Àn
;

2008 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

2012 #i‡(
WL_NUM
 > 0 )

2014 
vÆue
 = 
	`nvøm_ß„_gë
("wl0_radio");

2015 
vÆue2
 = 
	`nvøm_ß„_gë
("wl_basic_rule");

2018 i‡(*
vÆue
 && !*
vÆue2
) {

2020 
i
 = 
j
 = 0;

2021 
ruÀ_£t
 = "wl_basic_rule";

2023 
	`nvøm_f£t
(
ruÀ_£t
, 
WL_BASIC_RULE
);

2024 
°r
 = &
√w
[0];

2027 
±r
 = 
	`nvøm_ß„_gë
("wl0_radio");

2028 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2029 
j
 +
Àn
;

2030 
°r
 +
Àn
;

2033 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "√t_mode", 
tmp
, (tmp),

2034 
EZPLIB_USE_CLI
);

2035 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2036 
j
 +
Àn
;

2037 
°r
 +
Àn
;

2040 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "txpowî", 
tmp
, (tmp),

2041 
EZPLIB_USE_CLI
);

2042 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2043 
j
 +
Àn
;

2044 
°r
 +
Àn
;

2047 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ch™√l", 
tmp
, (tmp),

2048 
EZPLIB_USE_CLI
);

2049 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

2050 
j
 +
Àn
;

2051 
°r
 +
Àn
;

2053 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
√w
);

2056 
i
 = 
j
 = 0;

2057 
ruÀ_£t
 = "wl0_basic_rule";

2059 
	`nvøm_f£t
(
ruÀ_£t
, 
WL0_BASIC_RULE
);

2060 
°r
 = &
√w
[0];

2063 
±r
 = 
	`nvøm_ß„_gë
("wl0_radio");

2064 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2065 
j
 +
Àn
;

2066 
°r
 +
Àn
;

2069 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "hiddí", 
tmp
, (tmp),

2070 
EZPLIB_USE_CLI
);

2071 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2072 
j
 +
Àn
;

2073 
°r
 +
Àn
;

2076 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "øã", 
tmp
, (tmp),

2077 
EZPLIB_USE_CLI
);

2078 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2079 
j
 +
Àn
;

2080 
°r
 +
Àn
;

2083 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "wme", 
tmp
, (tmp),

2084 
EZPLIB_USE_CLI
);

2085 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

2086 
j
 +
Àn
;

2087 
°r
 +
Àn
;

2089 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
√w
);

2092 
ruÀ_£t
 = "wl0_ssid_rule";

2094 
	`nvøm_f£t
(
ruÀ_£t
, 
WL0_SSID_RULE
);

2096 
±r
 = 
	`nvøm_ß„_gë
("wl0_ssid");

2097 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
±r
);

2100 
ruÀ_£t
 = "wl0_sec_rule";

2102 
	`nvøm_f£t
(
ruÀ_£t
, 
WL0_SEC_RULE
);

2104 
±r
 = 
	`nvøm_ß„_gë
("wl0_sec_mode");

2105 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
±r
);

2108 
i
 = 
j
 = 0;

2109 
ruÀ_£t
 = "wl0_sec_wep_rule";

2111 
	`nvøm_f£t
(
ruÀ_£t
, 
WL0_SEC_WEP_RULE
);

2112 
°r
 = &
√w
[0];

2115 
±r
 = 
	`nvøm_ß„_gë
("wl0_key");

2116 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2117 
j
 +
Àn
;

2118 
°r
 +
Àn
;

2120 
±r
 = 
	`nvøm_ß„_gë
("wl0_key1");

2121 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2122 
j
 +
Àn
;

2123 
°r
 +
Àn
;

2125 
±r
 = 
	`nvøm_ß„_gë
("wl0_key2");

2126 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2127 
j
 +
Àn
;

2128 
°r
 +
Àn
;

2130 
±r
 = 
	`nvøm_ß„_gë
("wl0_key3");

2131 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2132 
j
 +
Àn
;

2133 
°r
 +
Àn
;

2135 
±r
 = 
	`nvøm_ß„_gë
("wl0_key4");

2136 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2137 
j
 +
Àn
;

2138 
°r
 +
Àn
;

2140 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
√w
);

2143 
i
 = 
j
 = 0;

2144 
ruÀ_£t
 = "wl0_sec_wpa_rule";

2146 
	`nvøm_f£t
(
ruÀ_£t
, 
WL0_SEC_WPA_RULE
);

2147 
°r
 = &
√w
[0];

2150 
±r
 = 
	`nvøm_ß„_gë
("wl0_wpa_psk");

2151 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2152 
j
 +
Àn
;

2153 
°r
 +
Àn
;

2156 
±r
 = 
	`nvøm_ß„_gë
("wl0_crypto");

2157 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2158 
j
 +
Àn
;

2159 
°r
 +
Àn
;

2162 
±r
 = 
	`nvøm_ß„_gë
("wl0_radius_key");

2163 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2164 
j
 +
Àn
;

2165 
°r
 +
Àn
;

2168 
±r
 = 
	`nvøm_ß„_gë
("wl0_radius_ipaddr");

2169 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2170 
j
 +
Àn
;

2171 
°r
 +
Àn
;

2174 
±r
 = 
	`nvøm_ß„_gë
("wl0_radius_port");

2175 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2176 
j
 +
Àn
;

2177 
°r
 +
Àn
;

2180 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ªkey_mode", 
tmp
, (tmp),

2181 
EZPLIB_USE_CLI
);

2182 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2183 
j
 +
Àn
;

2184 
°r
 +
Àn
;

2187 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ªkey_time_öãrvÆ", 
tmp
, (tmp),

2188 
EZPLIB_USE_CLI
);

2189 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2190 
j
 +
Àn
;

2191 
°r
 +
Àn
;

2194 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ªkey_pkt_öãrvÆ", 
tmp
, (tmp),

2195 
EZPLIB_USE_CLI
);

2196 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

2197 
j
 +
Àn
;

2198 
°r
 +
Àn
;

2200 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
√w
);

2203 
i
 = 
j
 = 0;

2204 
ruÀ_£t
 = "wl0_sec_wpa2_rule";

2206 
	`nvøm_f£t
(
ruÀ_£t
, 
WL0_SEC_WPA2_RULE
);

2207 
°r
 = &
√w
[0];

2210 
±r
 = 
	`nvøm_ß„_gë
("wl0_wpa_psk");

2211 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2212 
j
 +
Àn
;

2213 
°r
 +
Àn
;

2216 
±r
 = 
	`nvøm_ß„_gë
("wl0_crypto");

2217 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2218 
j
 +
Àn
;

2219 
°r
 +
Àn
;

2222 
±r
 = 
	`nvøm_ß„_gë
("wl0_radius_key");

2223 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2224 
j
 +
Àn
;

2225 
°r
 +
Àn
;

2228 
±r
 = 
	`nvøm_ß„_gë
("wl0_radius_ipaddr");

2229 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2230 
j
 +
Àn
;

2231 
°r
 +
Àn
;

2234 
±r
 = 
	`nvøm_ß„_gë
("wl0_radius_port");

2235 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
±r
);

2236 
j
 +
Àn
;

2237 
°r
 +
Àn
;

2240 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ªkey_mode", 
tmp
, (tmp),

2241 
EZPLIB_USE_CLI
);

2242 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2243 
j
 +
Àn
;

2244 
°r
 +
Àn
;

2247 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ªkey_time_öãrvÆ", 
tmp
, (tmp),

2248 
EZPLIB_USE_CLI
);

2249 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2250 
j
 +
Àn
;

2251 
°r
 +
Àn
;

2254 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "ªkey_pkt_öãrvÆ", 
tmp
, (tmp),

2255 
EZPLIB_USE_CLI
);

2256 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2257 
j
 +
Àn
;

2258 
°r
 +
Àn
;

2261 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "¥óuth", 
tmp
, (tmp),

2262 
EZPLIB_USE_CLI
);

2263 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2264 
j
 +
Àn
;

2265 
°r
 +
Àn
;

2267 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
√w
);

2270 
i
 = 
j
 = 0;

2271 
ruÀ_£t
 = "wl_wds_rule";

2273 
	`nvøm_f£t
(
ruÀ_£t
, 
WL_WDS_RULE
);

2274 
°r
 = &
√w
[0];

2276 
±r
 = 
	`nvøm_ß„_gë
("wl0_wds_enable");

2277 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^1",

2278 (
±r
[0] == '0') ? "disabled" : "repeater");

2279 
j
 +
Àn
;

2280 
°r
 +
Àn
;

2282 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
√w
);

2285 
i
 = 
j
 = 0;

2286 
ruÀ_£t
 = "wl0_wds_basic_rule";

2288 
	`nvøm_f£t
(
ruÀ_£t
, 
WL0_WDS_BASIC_RULE
);

2291 
	`nvøm_£t
("wl0_wds_ruÀ_num", 
	`x°r
(
WDS_RULE_MAX
));

2292 
max
 = 
	`©oi
(
	`nvøm_ß„_gë
("wl0_wds_rule_num"));

2294 
i
 = 0; i < 
max
; i++) {

2295 
	`ez∂ib_gë_subruÀ
("wl0_wds", 0, 
i
, i, 
tmp
, (tmp));

2296 
	`¢¥ötf
(
√w
, “ew), "%s^dißbÀd", 
tmp
);

2297 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

2302 
	`nvøm_un£t
("wl0_radio");

2307 
	}
}

2308 
	$fw_func_1_7_6_to_1_7_5
()

2310 
i
, 
j
, 
Àn
, 
ruÀ_num
;

2311 
√w
[1024], 
ﬁd
[1024];

2312 
tmp
[64];

2313 *
°r
 = &
√w
[0];

2314 *
ruÀ_£t
 = "ntp_rule";

2315 *
vÆue
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
), *
vÆue2
;

2317 
	`¥ötf
("fw_func_1_7_6_to_1_7_5\n");

2319 i‡(
vÆue
 && *value) {

2320 
i
 = 
j
 = 0;

2321 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "«me", 
tmp
, (tmp),

2322 
EZPLIB_USE_CLI
);

2323 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2324 
j
 +
Àn
;

2325 
°r
 +
Àn
;

2327 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "íabÀ", 
tmp
, (tmp),

2328 
EZPLIB_USE_CLI
);

2329 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2330 
j
 +
Àn
;

2331 
°r
 +
Àn
;

2333 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "poﬁ", 
tmp
, (tmp),

2334 
EZPLIB_USE_CLI
);

2335 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2336 
j
 +
Àn
;

2337 
°r
 +
Àn
;

2339 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "z⁄e", 
tmp
, (tmp),

2340 
EZPLIB_USE_CLI
);

2341 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

2342 
j
 +
Àn
;

2343 
°r
 +
Àn
;

2345 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

2348 
ruÀ_num
 = 
	`©oi
(
	`nvøm_ß„_gë
("ipsec_rule_num"));

2349 
ruÀ_£t
 = "ipsec_rule";

2351 
i
 = 
j
 = 0; i < 
ruÀ_num
; i++) {

2352 
°r
 = &
√w
[0];

2353 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
i
, 
ﬁd
, 1024);

2356 i‡(
ﬁd
[0]) {

2358 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 0, 1, 
tmp
, (tmp));

2359 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2360 
j
 +
Àn
;

2361 
°r
 +
Àn
;

2364 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "adv", 
tmp
, (tmp),

2365 
EZPLIB_USE_CLI
);

2366 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2367 
j
 +
Àn
;

2368 
°r
 +
Àn
;

2371 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 2, 10, 
tmp
, (tmp));

2372 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2373 
j
 +
Àn
;

2374 
°r
 +
Àn
;

2377 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "pha£1_mode", 
tmp
, (tmp),

2378 
EZPLIB_USE_CLI
);

2379 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2380 
j
 +
Àn
;

2381 
°r
 +
Àn
;

2384 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "pha£1_auth", 
tmp
, (tmp),

2385 
EZPLIB_USE_CLI
);

2386 i‡(!
	`°rcmp
(
tmp
, "md5")) {

2387 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "1^0^");

2388 } i‡(!
	`°rcmp
(
tmp
, "sha1")) {

2389 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^1^");

2391 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "1^1^");

2393 
j
 +
Àn
;

2394 
°r
 +
Àn
;

2397 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "pha£1_í¸y±", 
tmp
, (tmp),

2398 
EZPLIB_USE_CLI
);

2399 i‡(!
	`°rcmp
(
tmp
, "des")) {

2400 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "1^0^0^");

2401 } i‡(!
	`°rcmp
(
tmp
, "3des")) {

2402 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^1^0^");

2403 } i‡(!
	`°rcmp
(
tmp
, "aes")) {

2404 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^0^1^");

2406 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "1^1^1^");

2408 
j
 +
Àn
;

2409 
°r
 +
Àn
;

2411 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "pha£1_id", 
tmp
, (tmp),

2412 
EZPLIB_USE_CLI
);

2413 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2414 
j
 +
Àn
;

2415 
°r
 +
Àn
;

2418 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "pha£2_auth", 
tmp
, (tmp),

2419 
EZPLIB_USE_CLI
);

2420 i‡(!
	`°rcmp
(
tmp
, "md5")) {

2421 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "1^0^");

2422 } i‡(!
	`°rcmp
(
tmp
, "sha1")) {

2423 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^1^");

2425 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "1^1^");

2427 
j
 +
Àn
;

2428 
°r
 +
Àn
;

2431 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 
i
, "pha£2_í¸y±", 
tmp
, (tmp),

2432 
EZPLIB_USE_CLI
);

2433 i‡(!
	`°rcmp
(
tmp
, "des")) {

2434 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "1^0^0^");

2435 } i‡(!
	`°rcmp
(
tmp
, "3des")) {

2436 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^1^0^");

2437 } i‡(!
	`°rcmp
(
tmp
, "aes")) {

2438 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^0^1^");

2440 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^0^0^");

2442 
j
 +
Àn
;

2443 
°r
 +
Àn
;

2446 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 18, 19, 
tmp
, (tmp));

2447 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s^", 
tmp
);

2448 
j
 +
Àn
;

2449 
°r
 +
Àn
;

2452 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "0^", 
tmp
);

2453 
j
 +
Àn
;

2454 
°r
 +
Àn
;

2457 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 11, 14, 
tmp
, (tmp));

2458 
Àn
 = 
	`¢¥ötf
(
°r
, 1024 - 
j
, "%s", 
tmp
);

2459 
j
 +
Àn
;

2460 
°r
 +
Àn
;

2462 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

2466 
vÆue
 = 
	`nvøm_ß„_gë
("wl0_radio");

2467 
vÆue2
 = 
	`nvøm_ß„_gë
("wl_basic_rule");

2469 i‡(!*
vÆue
 && *
vÆue2
) {

2471 
ruÀ_£t
 = "wl_basic_rule";

2472 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "íabÀ", 
tmp
, (tmp),

2473 
EZPLIB_USE_CLI
);

2474 
	`nvøm_f£t
("wl0_ødio", 
tmp
);

2477 
ruÀ_£t
 = "wl0_ssid_rule";

2478 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "ssid", 
tmp
, (tmp),

2479 
EZPLIB_USE_CLI
);

2480 
	`nvøm_f£t
("wl0_ssid", 
tmp
);

2484 
ruÀ_£t
 = "wl0_sec_rule";

2485 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "£cmode", 
tmp
, (tmp),

2486 
EZPLIB_USE_CLI
);

2487 
	`nvøm_£t
("wl0_£c_mode", 
tmp
);

2490 
ruÀ_£t
 = "wl0_sec_wep_rule";

2491 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "key_ödex", 
tmp
, (tmp),

2492 
EZPLIB_USE_CLI
);

2493 
	`nvøm_£t
("wl0_key", 
tmp
);

2496 
ruÀ_£t
 = "wl0_sec_wep_rule";

2497 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "key1", 
tmp
, (tmp),

2498 
EZPLIB_USE_CLI
);

2499 
	`nvøm_£t
("wl0_key1", 
tmp
);

2502 
ruÀ_£t
 = "wl0_sec_wep_rule";

2503 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "key2", 
tmp
, (tmp),

2504 
EZPLIB_USE_CLI
);

2505 
	`nvøm_£t
("wl0_key1", 
tmp
);

2508 
ruÀ_£t
 = "wl0_sec_wep_rule";

2509 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "key3", 
tmp
, (tmp),

2510 
EZPLIB_USE_CLI
);

2511 
	`nvøm_£t
("wl0_key1", 
tmp
);

2514 
ruÀ_£t
 = "wl0_sec_wep_rule";

2515 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "key4", 
tmp
, (tmp),

2516 
EZPLIB_USE_CLI
);

2517 
	`nvøm_£t
("wl0_key1", 
tmp
);

2522 
	`nvøm_un£t
("wl_basic_rule");

2525 
	}
}

2526 
	$fw_func_1_7_6_to_1_7_7
()

2528 *
ruÀ_£t
;

2529 
√w
[1024], 
ﬁd
[1024];

2530 
tmp
[64];

2531 *
°r
 = &
√w
[0];

2532 
i
, 
j
, 
num
, 
vnum
;

2534 
	`¥ötf
("fw_func_1_7_6_to_1_7_7\n");

2536 #i‡(
WL_NUM
 >0)

2537 
ruÀ_£t
 = "wl_wds_rule";

2538 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "mode", 
tmp
, —mp), 
EZPLIB_USE_CLI
);

2539 i‡(
tmp
[0] == '0') {

2541 
	`ez∂ib_gë_©å_vÆ
(
ruÀ_£t
, 0, "timeout", 
tmp
, (tmp),

2542 
EZPLIB_USE_CLI
);

2543 
	`¢¥ötf
(
√w
, “ew), "dißbÀd^%s", 
tmp
);

2544 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 0, 
√w
);

2547 
ruÀ_£t
 = "wl0_wds_basic_rule";

2548 
°r
 = 
	`nvøm_ß„_gë
(
ruÀ_£t
);

2549 i‡(!
	`°rcmp
(
°r
, "0^1")) {

2553 
	`nvøm_£t
(
ruÀ_£t
, 
WL0_WDS_BASIC_RULE
);

2560 
ruÀ_£t
 = "wl_basic_rule";

2561 
num
 = 
	`©oi
(
	`nvøm_ß„_gë
("wl_num"));

2562 
i
 = 0; i < 
num
; i++) {

2563 
	`ez∂ib_gë_ruÀ
(
ruÀ_£t
, 
i
, 
ﬁd
, (old));

2564 
	`¢¥ötf
(
√w
, “ew), "%s^0", 
ﬁd
);

2565 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

2572 
num
 = 
	`©oi
(
	`nvøm_ß„_gë
("wl_num"));

2574 
vnum
 = 
	`©oi
(
	`x°r
(
WL0_RULE_NUM
));

2575 
i
 = 0; i < 
num
; i++) {

2576 
	`¢¥ötf
(
tmp
, —mp), "wl%d_basic_ruÀ", 
i
);

2578 
j
 = 0; j < 
vnum
; j++) {

2579 
	`ez∂ib_gë_ruÀ
(
tmp
, 
j
, 
ﬁd
, (old));

2580 
	`¢¥ötf
(
√w
, “ew), "%s^0", 
ﬁd
);

2581 
	`ez∂ib_ª∂a˚_ruÀ
(
tmp
, 
j
, 
√w
);

2587 
	`nvøm_un£t
("upnp_rule");

2588 
	}
}

2589 
	$fw_func_1_7_7_to_1_7_6
()

2591 *
ruÀ_£t
;

2592 
√w
[1024], 
ﬁd
[1024];

2593 
tmp
[64];

2594 *
°r
 = &
√w
[0];

2595 
i
, 
j
, 
num
, 
vnum
;

2597 
	`¥ötf
("fw_func_1_7_7_to_1_7_6\n");

2603 
ruÀ_£t
 = "wl_basic_rule";

2604 
num
 = 
	`©oi
(
	`nvøm_ß„_gë
("wl_num"));

2605 
i
 = 0; i < 
num
; i++) {

2606 
	`ez∂ib_gë_subruÀ
(
ruÀ_£t
, 
i
, 0, 3, 
√w
, (new));

2607 
	`ez∂ib_ª∂a˚_ruÀ
(
ruÀ_£t
, 
i
, 
√w
);

2614 
num
 = 
	`©oi
(
	`nvøm_ß„_gë
("wl_num"));

2615 
vnum
 = 
	`©oi
(
	`nvøm_ß„_gë
("wlv_rule_num"));

2616 
i
 = 0; i < 
num
; i++) {

2617 
	`¢¥ötf
(
tmp
, —mp), "wl%d_basic_ruÀ", 
i
);

2619 
j
 = 0; j < 
vnum
; j++) {

2620 
	`ez∂ib_gë_subruÀ
(
tmp
, 
i
, 0, 3, 
√w
, (new));

2621 
	`ez∂ib_ª∂a˚_ruÀ
(
tmp
, 
j
, 
√w
);

2626 
	`nvøm_un£t
("upnp_rule");

2629 
	`sy°em
("echo 1 > /proc/ezp_rewind");

2630 
	}
}

2631 
	$fw_func_1_7_7_to_1_7_8
()

2633 
	`¥ötf
("fw_func_1_7_7_to_1_7_8\n");

2635 
	}
}

2636 
	$fw_func_1_7_8_to_1_7_7
()

2638 
	`¥ötf
("fw_func_1_7_8_to_1_7_7\n");

2640 
	}
}

2641 
	$fw_func_1_7_8_to_1_7_9
()

2643 
tmp
[1024], 
«me
[1024], 
ùaddr_°¨t
[64], 
ùaddr_íd
[64];

2644 
√w
[1024], 
ﬁd
[1024];

2645 *
°r
;

2646 
ƒuÀ
, 
i
, 
j
, 
dbm_ƒuÀ
, 
Àn
, 
°¨t
, 
íd
, 
num
;

2648 
	`¥ötf
("fw_func_1_7_8_to_1_7_9\n");

2650 
	`nvøm_f£t
("bw_dbm_rule", "");

2651 
	`nvøm_f£t
("bw_dbm_rule_num", "0");

2652 
	`nvøm_f£t
("bw_sbm_rule", "");

2653 
	`nvøm_f£t
("bw_sbm_rule_num", "0");

2655 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("fl_rule_num"));

2656 
i
 = 0; i < 
ƒuÀ
; i++) {

2658 
	`ez∂ib_gë_subruÀ
("Ê_ruÀ", 
i
, 14, 14, 
tmp
, (tmp));

2659 i‡(
tmp
[0] == '1') {

2661 
	`ez∂ib_gë_©å_vÆ
("Ê_ruÀ", 
i
, "«me", 
«me
, (name),

2662 
EZPLIB_USE_CLI
);

2663 
	`ez∂ib_gë_©å_vÆ
("Ê_ruÀ", 
i
, "§cùaddr_°¨t", 
ùaddr_°¨t
,

2664 (
ùaddr_°¨t
), 
EZPLIB_USE_CLI
);

2665 
	`ez∂ib_gë_©å_vÆ
("Ê_ruÀ", 
i
, "§cùaddr_íd", 
ùaddr_íd
,

2666 (
ùaddr_íd
), 
EZPLIB_USE_CLI
);

2670 
°¨t
 = 
	`¡ohl
(()
	`öë_addr
(
ùaddr_°¨t
));

2671 
íd
 = 
	`¡ohl
(()
	`öë_addr
(
ùaddr_íd
));

2672 
num
 = 
íd
 - 
°¨t
 + 1;

2673 
	`¢¥ötf
(
tmp
, —mp), "%s^1^%s^%s^%d^", 
«me
, 
ùaddr_°¨t
, 
ùaddr_íd
, 
num
);

2674 
	`ez∂ib_≠≥nd_ruÀ
("bw_dbm_ruÀ", 
tmp
);

2677 
dbm_ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("bw_dbm_rule_num"));

2678 
	`¢¥ötf
(
tmp
, —mp), "%d", 
dbm_ƒuÀ
+1);

2679 
	`nvøm_£t
("bw_dbm_ruÀ_num", 
tmp
);

2683 
j
 = 0;

2684 
°r
 = &
√w
[0];

2686 
	`ez∂ib_gë_subruÀ
("Ê_ruÀ", 
i
, 0, 13, 
tmp
, (tmp));

2687 
Àn
 = 
	`¢¥ötf
(
°r
, (
√w
Ë- 
j
, "%s^", 
tmp
);

2688 
j
 +
Àn
;

2689 
°r
 +
Àn
;

2691 
	`ez∂ib_gë_subruÀ
("Ê_ruÀ", 
i
, 16, 18, 
tmp
, (tmp));

2692 
Àn
 = 
	`¢¥ötf
(
°r
, (
√w
Ë- 
j
, "%s^", 
tmp
);

2693 
j
 +
Àn
;

2694 
°r
 +
Àn
;

2696 
	`ez∂ib_ª∂a˚_ruÀ
("Ê_ruÀ", 
i
, 
√w
);

2700 
	}
}

2701 
	$fw_func_1_7_9_to_1_7_8
()

2703 
tmp
[1024], 
«me
[1024], 
°¨t
[64], 
íd
[64], 
num
[64], 
m¨k
[64];

2704 
√w
[1024];

2705 
ƒuÀ
, 
i
, 
j
, 
Ê_ƒuÀ
, 
Àn
;

2706 *
°r
;

2708 
	`¥ötf
("fw_func_1_7_9_to_1_7_8\n");

2711 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("fl_rule_num"));

2712 
i
 = 0; i < 
ƒuÀ
; i++, 
j
 +
	`©oi
(
num
)) {

2713 
ùaddr_°¨t
[64], 
ùaddr_íd
[64];

2715 
j
 = 0;

2716 
°r
 = &
√w
[0];

2718 
	`ez∂ib_gë_subruÀ
("Ê_ruÀ", 
i
, 0, 13, 
tmp
, (tmp));

2719 
Àn
 = 
	`¢¥ötf
(
°r
, (
√w
Ë- 
j
, "%s^", 
tmp
);

2720 
j
 +
Àn
;

2721 
°r
 +
Àn
;

2727 
Àn
 = 
	`¢¥ötf
(
°r
, (
√w
Ë- 
j
, "0^0^", 
tmp
);

2728 
j
 +
Àn
;

2729 
°r
 +
Àn
;

2731 
	`ez∂ib_gë_subruÀ
("Ê_ruÀ", 
i
, 14, 16, 
tmp
, (tmp));

2732 
Àn
 = 
	`¢¥ötf
(
°r
, (
√w
Ë- 
j
, "%s^", 
tmp
);

2733 
j
 +
Àn
;

2734 
°r
 +
Àn
;

2736 
	`ez∂ib_ª∂a˚_ruÀ
("Ê_ruÀ", 
i
, 
√w
);

2740 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("bw_dbm_rule_num"));

2741 
i
 = 0, 
j
 = 0; i < 
ƒuÀ
; i++, j +
	`©oi
(
num
)) {

2742 
	`ez∂ib_gë_©å_vÆ
("bw_dbm_ruÀ", 
i
, "íabÀ", 
tmp
, (tmp),

2743 
EZPLIB_USE_CLI
);

2744 i‡(
tmp
[0] == '0') {

2748 
	`ez∂ib_gë_©å_vÆ
("bw_dbm_ruÀ", 
i
, "«me", 
«me
, (name),

2749 
EZPLIB_USE_CLI
);

2750 
	`ez∂ib_gë_©å_vÆ
("bw_dbm_ruÀ", 
i
, "öùaddr_°¨t", 
°¨t
,

2751 (
°¨t
), 
EZPLIB_USE_CLI
);

2752 
	`ez∂ib_gë_©å_vÆ
("bw_dbm_ruÀ", 
i
, "öùaddr_íd", 
íd
,

2753 (
íd
), 
EZPLIB_USE_CLI
);

2754 
	`ez∂ib_gë_©å_vÆ
("bw_dbm_ruÀ", 
i
, "öùaddr_num", 
num
,

2755 (
num
), 
EZPLIB_USE_CLI
);

2757 
	`¢¥ötf
(
m¨k
, (m¨k), "%04X", 
j
+1);

2758 
	`¢¥ötf
(
tmp
, —mp), "%s^1^^^%s^%s^^^^^^^^1^1^%s^%s^0^0", 
«me
, 
°¨t
,

2759 
íd
, 
num
, 
m¨k
);

2761 
	`ez∂ib_≠≥nd_ruÀ
("Ê_ruÀ", 
tmp
);

2763 
Ê_ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("fl_rule_num"));

2764 
	`¢¥ötf
(
tmp
, —mp), "%d", 
Ê_ƒuÀ
+1);

2766 
	`nvøm_£t
("Ê_ruÀ_num", 
tmp
);

2770 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

2771 
i
 = 0; i < 
ƒuÀ
; i++) {

2772 
dl
[64], 
ul
[64], 
dl_max
[64], 
dl_mö
[64], 
ul_max
[64], 
ul_mö
[64];

2773 *
p_lök_≥r˚¡
 = "75";

2774 
lök_≥r˚¡
 = 75;

2775 
globÆ_≥r˚¡
 = 90;

2776 
u£r_≥r˚¡
 = 90;

2777 
bw_num
, 
u£d_ul
, 
u£d_dl
, 
ulmax
, 
ulmö
, 
dlmax
, 
dlmö
;

2779 
bw_num
 = 
	`©oi
(
	`nvøm_ß„_gë
("dbm_max"));

2781 
	`ez∂ib_gë_©å_vÆ
("w™_bw_ruÀ", 
i
, "dl", 
dl
, (dl),

2782 
EZPLIB_USE_CLI
);

2783 
	`ez∂ib_gë_©å_vÆ
("w™_bw_ruÀ", 
i
, "ul", 
ul
, (ul),

2784 
EZPLIB_USE_CLI
);

2786 
u£d_ul
 = 
	`©oi
(
ul
);

2787 
u£d_dl
 = 
	`©oi
(
dl
);

2789 
ulmax
 = 
u£d_ul
 * 
lök_≥r˚¡
 / 100;

2790 
ulmax
 = ulmax * 
globÆ_≥r˚¡
 / 100;

2791 
ulmax
 = ulmax * 
u£r_≥r˚¡
 / 100;

2792 
ulmö
 = 
ulmax
 / 
bw_num
;

2794 
dlmax
 = 
u£d_dl
 * 
lök_≥r˚¡
 / 100;

2795 
dlmax
 = dlmax * 
globÆ_≥r˚¡
 / 100;

2796 
dlmax
 = dlmax * 
u£r_≥r˚¡
 / 100;

2797 
dlmö
 = 
dlmax
 / 
bw_num
;

2799 
	`¢¥ötf
(
ul_max
, (ul_max), "%d", 
ulmax
);

2800 
	`¢¥ötf
(
ul_mö
, (ul_mö), "%d", 
ulmö
);

2801 
	`¢¥ötf
(
dl_max
, (dl_max), "%d", 
dlmax
);

2802 
	`¢¥ötf
(
dl_mö
, (dl_mö), "%d", 
dlmö
);

2804 
	`ez∂ib_ª∂a˚_©å
("w™_bw_ruÀ", 
i
, "lök_≥r˚¡", 
p_lök_≥r˚¡
);

2805 
	`ez∂ib_ª∂a˚_©å
("w™_bw_ruÀ", 
i
, "dbm_upmax", 
ul_max
);

2806 
	`ez∂ib_ª∂a˚_©å
("w™_bw_ruÀ", 
i
, "dbm_upmö", 
ul_mö
);

2807 
	`ez∂ib_ª∂a˚_©å
("w™_bw_ruÀ", 
i
, "dbm_downmax", 
dl_max
);

2808 
	`ez∂ib_ª∂a˚_©å
("w™_bw_ruÀ", 
i
, "dbm_downmö", 
dl_mö
);

2811 
	`nvøm_un£t
("bw_dbm_rule");

2812 
	`nvøm_un£t
("bw_dbm_rule_num");

2813 
	`nvøm_un£t
("bw_sbm_rule");

2814 
	`nvøm_un£t
("bw_sbm_rule_num");

2817 
	}
}

2818 
	$fw_func_1_7_9_to_1_7_10
()

2820 
	`¥ötf
("fw_func_1_7_9_to_1_7_10\n");

2822 
	}
}

2823 
	$fw_func_1_7_10_to_1_7_9
()

2825 
	`¥ötf
("fw_func_1_7_10_to_1_7_9\n");

2827 
	}
}

2828 
	$fw_func_1_7_10_to_1_7_11
()

2830 
	`¥ötf
("fw_func_1_7_10_to_1_7_11\n");

2831 
	`nvøm_£t
("bw_mask", "0xFFFF0000");

2833 
	}
}

2834 
	$fw_func_1_7_11_to_1_7_10
()

2836 
	`¥ötf
("fw_func_1_7_11_to_1_7_10\n");

2837 
	`nvøm_£t
("bw_mask", "0x00FFFFFF");

2839 
	}
}

2840 
	$fw_func_1_7_11_to_2_0_0
()

2842 
	`¥ötf
("fw_func_1_7_11_to_2_0_0\n");

2844 
	}
}

2845 
	$fw_func_2_0_0_to_1_7_11
()

2847 
	`¥ötf
("fw_func_2_0_0_to_1_7_11\n");

2849 
	}
}

2850 
	$fw_func_2_0_1_to_2_0_0
()

2852 
codïage
[64], 
sw≠_size
[64];

2853 
tmp
[1024];

2854 
	`¥ötf
("fw_func_2_0_1_to_2_0_0\n");

2855 
	`ez∂ib_gë_©å_vÆ
("storage_rule", 0, "codepage",

2856 
codïage
, (codïage), 
EZPLIB_USE_CLI
);

2857 
	`ez∂ib_gë_©å_vÆ
("storage_rule", 0, "swap_size",

2858 
sw≠_size
, (sw≠_size), 
EZPLIB_USE_CLI
);

2859 
	`¢¥ötf
(
tmp
, (tmp), "^%s^%s^",

2860 
codïage
, 
sw≠_size
);

2861 
	`ez∂ib_ª∂a˚_ruÀ
("°‹age_ruÀ", 0, 
tmp
);

2862 
	`nvøm_un£t
("storage_state_rule");

2864 
	}
}

2865 
	$fw_func_2_0_0_to_2_0_1
()

2867 
buf
[64];

2868 
tmp
[1024];

2869 
	`¥ötf
("fw_func_2_0_0_to_2_0_1\n");

2870 
	`nvøm_f£t
("storage_state_rule", "^");

2871 
	`ez∂ib_gë_subruÀ
("°‹age_ruÀ", 0, 1, 2, 
buf
, (buf));

2872 
	`¢¥ötf
(
tmp
, —mp), "%s^4096", 
buf
);

2873 
	`ez∂ib_ª∂a˚_ruÀ
("°‹age_ruÀ", 0, 
tmp
);

2875 
	}
}

2876 
	$fw_func_2_0_2_to_2_0_1
()

2878 
buf
[64];

2879 
tmp
[1024];

2880 
	`¥ötf
("fw_func_2_0_2_to_2_0_1\n");

2881 
	`ez∂ib_gë_subruÀ
("œn_dh˝s_ruÀ", 0, 0, 6, 
buf
, (buf));

2882 
	`¢¥ötf
(
tmp
, —mp), "%s", 
buf
);

2883 
	`ez∂ib_ª∂a˚_ruÀ
("œn_dh˝s_ruÀ", 0, 
tmp
);

2886 #ifde‡
CONFIG_EZP_ARCH_RT305X


2887 #i‡–
WAN_NUM
 =1 ) && ( 
LAN_NUM
 == 1 )

2888 
	`ez∂ib_ª∂a˚_ruÀ
("stats_rule", 0,

2890 #ñi‡–
WAN_NUM
 =2 ) && ( 
LAN_NUM
 == 1 )

2891 
	`ez∂ib_ª∂a˚_ruÀ
("stats_rule", 0,

2896 
	}
}

2897 
	$fw_func_2_0_1_to_2_0_2
()

2899 
buf
[64];

2900 
tmp
[1024];

2901 
	`¥ötf
("fw_func_2_0_1_to_2_0_2\n");

2902 
	`ez∂ib_gë_subruÀ
("œn_dh˝s_ruÀ", 0, 0, 6, 
buf
, (buf));

2903 
	`¢¥ötf
(
tmp
, —mp), "%s^dn§ñay^^^^", 
buf
);

2904 
	`ez∂ib_ª∂a˚_ruÀ
("œn_dh˝s_ruÀ", 0, 
tmp
);

2907 #ifde‡
CONFIG_EZP_ARCH_RT305X


2908 #i‡–
WAN_NUM
 =1 ) && ( 
LAN_NUM
 == 1 )

2909 
	`ez∂ib_ª∂a˚_ruÀ
("stats_rule", 0,

2911 #ñi‡–
WAN_NUM
 =2 ) && ( 
LAN_NUM
 == 1 )

2912 
	`ez∂ib_ª∂a˚_ruÀ
("stats_rule", 0,

2917 
	}
}

2918 
	$fw_func_2_0_3_to_2_0_2
()

2920 
buf
[256], 
buf2
[256];

2921 
tmp
[1024];

2922 
i
, 
ƒuÀ
;

2924 
	`¥ötf
("fw_func_2_0_3_to_2_0_2\n");

2926 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

2928 
i
 = 0; i < 
ƒuÀ
; i++) {

2929 
	`ez∂ib_gë_subruÀ
("w™_µp€_ruÀ", 
i
, 1, 8, 
buf
, (buf));

2930 
	`ez∂ib_ª∂a˚_ruÀ
("w™_µp€_ruÀ", 
i
, 
buf
);

2934 
i
 = 0; i < 
ƒuÀ
; i++) {

2935 
	`ez∂ib_gë_subruÀ
("w™_ww™_ruÀ", 
i
, 0, 5, 
buf
, (buf));

2936 
	`ez∂ib_gë_subruÀ
("w™_ww™_ruÀ", 
i
, 7, 21, 
buf2
, (buf2));

2937 
	`¢¥ötf
(
tmp
, —mp), "%s^%s", 
buf
, 
buf2
);

2938 
	`ez∂ib_ª∂a˚_ruÀ
("w™_ww™_ruÀ", 
i
, 
tmp
);

2941 
	`ez∂ib_gë_subruÀ
("·pd_ruÀ", 0, 0, 9, 
buf
, (buf));

2942 
	`¢¥ötf
(
tmp
, —mp), "%s", 
buf
);

2943 
	`ez∂ib_ª∂a˚_ruÀ
("·pd_ruÀ", 0, 
tmp
);

2946 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wl_rule_num"));

2947 
i
 = 0; i < 
ƒuÀ
; i++) {

2948 
	`ez∂ib_gë_subruÀ
("wl_adv™˚d_ruÀ", 
i
, 0, 13, 
buf
, (buf));

2949 
	`ez∂ib_ª∂a˚_ruÀ
("wl_adv™˚d_ruÀ", 
i
, 
buf
);

2953 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("rt_rule_num"));

2954 
i
 = 0; i < 
ƒuÀ
; i++) {

2955 
	`ez∂ib_gë_subruÀ
("π_ruÀ", 
i
, 0, 11, 
buf
, (buf));

2956 
	`ez∂ib_ª∂a˚_ruÀ
("π_ruÀ", 
i
, 
buf
);

2960 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

2961 
i
 = 0; i < 
ƒuÀ
; i++) {

2962 
	`ez∂ib_gë_subruÀ
("w™_›ídns_ruÀ", 
i
, 0, 4, 
buf
, (buf));

2963 
	`ez∂ib_ª∂a˚_ruÀ
("w™_›ídns_ruÀ", 
i
, 
buf
);

2967 
	}
}

2968 
	$fw_func_2_0_2_to_2_0_3
()

2970 
buf
[256], 
buf2
[256];

2971 
tmp
[1024];

2972 
i
, 
ƒuÀ
;

2974 
	`¥ötf
("fw_func_2_0_2_to_2_0_3\n");

2976 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

2978 
i
 = 0; i < 
ƒuÀ
; i++) {

2979 
	`ez∂ib_gë_subruÀ
("w™_µp€_ruÀ", 
i
, 0, 7, 
buf
, (buf));

2980 
	`¢¥ötf
(
tmp
, —mp), "ch≠^%s", 
buf
);

2981 
	`ez∂ib_ª∂a˚_ruÀ
("w™_µp€_ruÀ", 
i
, 
tmp
);

2984 
i
 = 0; i < 
ƒuÀ
; i++) {

2985 
	`ez∂ib_gë_subruÀ
("w™_ww™_ruÀ", 
i
, 0, 5, 
buf
, (buf));

2986 
	`ez∂ib_gë_subruÀ
("w™_ww™_ruÀ", 
i
, 6, 20, 
buf2
, (buf2));

2987 
	`¢¥ötf
(
tmp
, —mp), "%s^ch≠^%s", 
buf
, 
buf2
);

2988 
	`ez∂ib_ª∂a˚_ruÀ
("w™_ww™_ruÀ", 
i
, 
tmp
);

2991 
	`ez∂ib_gë_subruÀ
("·pd_ruÀ", 0, 0, 9, 
buf
, (buf));

2992 
	`¢¥ötf
(
tmp
, —mp), "%s^0", 
buf
);

2993 
	`ez∂ib_ª∂a˚_ruÀ
("·pd_ruÀ", 0, 
tmp
);

2994 
	`nvøm_un£t
("samba_rule");

2997 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wl_rule_num"));

2998 
i
 = 0; i < 
ƒuÀ
; i++) {

2999 
	`ez∂ib_gë_ruÀ
("wl_adv™˚d_ruÀ", 
i
, 
buf
, (buf));

3000 
	`¢¥ötf
(
tmp
, —mp), "%s^1^0^0^0^0^0^1^1^0^33^5^0^1^8^0", 
buf
);

3001 
	`ez∂ib_ª∂a˚_ruÀ
("wl_adv™˚d_ruÀ", 
i
, 
tmp
);

3005 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("rt_rule_num"));

3006 
i
 = 0; i < 
ƒuÀ
; i++) {

3007 
	`ez∂ib_gë_ruÀ
("π_ruÀ", 
i
, 
buf
, (buf));

3008 
	`¢¥ötf
(
tmp
, —mp), "%s^deÁu…^", 
buf
);

3009 
	`ez∂ib_ª∂a˚_ruÀ
("π_ruÀ", 
i
, 
tmp
);

3014 
	`ez∂ib_ª∂a˚_©å
("lan_dhcps_rule", 0, "dnstype", "opendns");

3015 
	`ez∂ib_ª∂a˚_©å
("lan_dhcps_rule", 0, "dnsaddr1", "208.67.220.220");

3016 
	`ez∂ib_ª∂a˚_©å
("lan_dhcps_rule", 0, "dnsaddr2", "208.67.222.222");

3019 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

3020 
i
 = 0; i < 
ƒuÀ
; i++) {

3021 
	`ez∂ib_gë_ruÀ
("w™_›ídns_ruÀ", 
i
, 
buf
, (buf));

3022 
	`¢¥ötf
(
tmp
, —mp), "%s^", 
buf
);

3023 
	`ez∂ib_ª∂a˚_ruÀ
("w™_›ídns_ruÀ", 
i
, 
tmp
);

3027 
	}
}

3028 
	$fw_func_2_0_4_to_2_0_3
()

3030 
buf
[256], 
buf2
[256];

3031 
tmp
[1024];

3032 
i
, 
ƒuÀ
;

3033 
	`¥ötf
("fw_func_2_0_4_to_2_0_3\n");

3037 
	`ez∂ib_gë_subruÀ
("bt_ruÀ", 0, 1, 1, 
buf
, (buf));

3038 
	`ez∂ib_gë_subruÀ
("bt_ruÀ", 0, 3, 12, 
buf2
, (buf2));

3044 
	`¢¥ötf
(
tmp
, —mp), "1^10^%s^2^%s" , 
buf
, 
buf2
);

3045 
	`nvøm_£t
("π‹ª¡_ruÀ", 
tmp
);

3046 
	`ez∂ib_gë_subruÀ
("bt_t‹ª¡_max", 0, 0, 0, 
buf
, (buf));

3047 
	`nvøm_£t
("π‹ª¡_t‹ª¡_max", 
buf
);

3050 
	`nvøm_un£t
("bt_rule");

3051 
	`nvøm_un£t
("bt_torrent_max");

3054 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

3055 
i
 = 0; i < 
ƒuÀ
; i++) {

3060 
	`ez∂ib_gë_subruÀ
("w™_ww™_ruÀ", 
i
, 0, 21, 
buf
, (buf));

3066 
	`ez∂ib_ª∂a˚_ruÀ
("w™_ww™_ruÀ", 
i
, 
buf
);

3070 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

3071 
i
 = 0; i < 
ƒuÀ
; i++) {

3073 
	`ez∂ib_gë_subruÀ
("w™_htc_ruÀ", 
i
, 0, 3, 
buf
, (buf));

3076 
	`ez∂ib_ª∂a˚_ruÀ
("w™_htc_ruÀ", 
i
, 
buf
);

3079 
	}
}

3080 
	$fw_func_2_0_3_to_2_0_4
()

3082 
buf
[256], 
buf2
[256];

3083 
tmp
[1024];

3084 
i
, 
ƒuÀ
;

3085 
	`¥ötf
("fw_func_2_0_3_to_2_0_4\n");

3090 
	`ez∂ib_gë_subruÀ
("π‹ª¡_ruÀ", 0, 2, 2, 
buf
, (buf));

3091 
	`ez∂ib_gë_subruÀ
("π‹ª¡_ruÀ", 0, 4, 12, 
buf2
, (buf2));

3096 
	`¢¥ötf
(
tmp
, —mp), "1^%s^250^10^%s" , 
buf
, 
buf2
);

3097 
	`nvøm_£t
("bt_ruÀ", 
tmp
);

3099 
	`nvøm_un£t
("rtorrent_rule");

3100 
	`nvøm_un£t
("rtorrent_torrent_max");

3103 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

3104 
i
 = 0; i < 
ƒuÀ
; i++) {

3109 
	`ez∂ib_gë_subruÀ
("w™_ww™_ruÀ", 
i
, 0, 21, 
buf
, (buf));

3115 
	`¢¥ötf
(
tmp
, —mp), "%s^0", 
buf
);

3116 
	`ez∂ib_ª∂a˚_ruÀ
("w™_ww™_ruÀ", 
i
, 
tmp
);

3120 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("wan_num"));

3121 
i
 = 0; i < 
ƒuÀ
; i++) {

3123 
	`ez∂ib_gë_subruÀ
("w™_htc_ruÀ", 
i
, 0, 3, 
buf
, (buf));

3126 
	`¢¥ötf
(
tmp
, —mp), "%s^0", 
buf
);

3127 
	`ez∂ib_ª∂a˚_ruÀ
("w™_htc_ruÀ", 
i
, 
tmp
);

3130 
	}
}

3131 
	$fw_func_2_0_5_to_2_0_4
()

3133 
buf
[256], 
tmp
[256];

3134 
i
, 
num
;

3135 
	`¥ötf
("fw_func_2_0_5_to_2_0_4\n");

3141 
	`ez∂ib_gë_subruÀ
("°‹age_ruÀ", 0, 0, 2, 
tmp
, (tmp));

3142 
	`ez∂ib_ª∂a˚_ruÀ
("°‹age_ruÀ", 0, 
tmp
);

3151 
	`ez∂ib_gë_subruÀ
("fw_ruÀ", 0, 0, 5, 
tmp
, (tmp));

3152 
	`ez∂ib_ª∂a˚_ruÀ
("fw_ruÀ", 0, 
tmp
);

3157 
num
 = 
	`©oi
(
	`nvøm_ß„_gë
("vlan_rule_num"));

3158 
i
 = 0; i < 
num
; i++) {

3159 
	`ez∂ib_gë_subruÀ
("vœn_ruÀ", 
i
, 0, 4, 
tmp
, (tmp));

3160 
	`¢¥ötf
(
buf
, (buf), "%s^0000001^", 
tmp
);

3161 
	`ez∂ib_ª∂a˚_ruÀ
("vœn_ruÀ", 
i
, 
buf
);

3164 
	`nvøm_un£t
("vlanport_rule");

3165 
	`nvøm_un£t
("vlanport_rule_num");

3166 
	`nvøm_un£t
("vlanport_rule_max");

3172 
	`ez∂ib_gë_ruÀ
("¥od_subˇt", 0, 
tmp
, (tmp));

3173 i‡(!
	`°rcmp
(
tmp
, "2")) {

3174 
	`ez∂ib_ª∂a˚_ruÀ
("bw_rule_max",0,"8");

3175 
	`ez∂ib_ª∂a˚_ruÀ
("bw_sbm_rule_max",0,"8");

3176 
	`ez∂ib_ª∂a˚_ruÀ
("bw_dbm_rule_max",0,"8");

3178 i‡(!
	`°rcmp
(
tmp
, "3") || !strcmp(tmp, "4")) {

3179 
	`ez∂ib_ª∂a˚_ruÀ
("bw_rule_max",0,"16");

3180 
	`ez∂ib_ª∂a˚_ruÀ
("bw_sbm_rule_max",0,"16");

3181 
	`ez∂ib_ª∂a˚_ruÀ
("bw_dbm_rule_max",0,"16");

3183 
	}
}

3184 
	$fw_func_2_0_4_to_2_0_5
()

3186 
tmp
[256], 
buf
[256];

3187 
i
, 
num
;

3188 
	`¥ötf
("fw_func_2_0_4_to_2_0_5\n");

3194 
	`ez∂ib_gë_ruÀ
("°‹age_ruÀ", 0, 
tmp
, (tmp));

3195 
	`¢¥ötf
(
buf
, (buf), "%s^0^^^^^", 
tmp
);

3196 
	`ez∂ib_ª∂a˚_ruÀ
("°‹age_ruÀ", 0, 
buf
);

3205 
	`ez∂ib_gë_ruÀ
("fw_ruÀ", 0, 
tmp
, (tmp));

3206 
	`¢¥ötf
(
buf
, (buf), "%s^0", 
tmp
);

3207 
	`ez∂ib_ª∂a˚_ruÀ
("fw_ruÀ", 0, 
buf
);

3212 
num
 = 
	`©oi
(
	`nvøm_ß„_gë
("vlan_rule_num"));

3213 
i
 = 0; i < 
num
; i++) {

3214 
	`ez∂ib_gë_subruÀ
("vœn_ruÀ", 
i
, 0, 4, 
tmp
, (tmp));

3215 
	`ez∂ib_ª∂a˚_ruÀ
("vœn_ruÀ", 
i
, 
tmp
);

3218 
	`nvøm_deÁu…_ruÀ
("vlanport_rule");

3223 
	`ez∂ib_gë_ruÀ
("¥od_subˇt", 0, 
tmp
, (tmp));

3224 i‡(!
	`°rcmp
(
tmp
, "2")) {

3225 
	`ez∂ib_ª∂a˚_ruÀ
("bw_rule_max",0,"32");

3226 
	`ez∂ib_ª∂a˚_ruÀ
("bw_sbm_rule_max",0,"32");

3227 
	`ez∂ib_ª∂a˚_ruÀ
("bw_dbm_rule_max",0,"32");

3229 i‡(!
	`°rcmp
(
tmp
, "3") || !strcmp(tmp, "4")) {

3230 
	`ez∂ib_ª∂a˚_ruÀ
("bw_rule_max",0,"64");

3231 
	`ez∂ib_ª∂a˚_ruÀ
("bw_sbm_rule_max",0,"64");

3232 
	`ez∂ib_ª∂a˚_ruÀ
("bw_dbm_rule_max",0,"64");

3236 
	}
}

3238 
	$fw_func_2_0_5_to_2_0_6
()

3240 
tmp
[256], 
b64
[256], 
buf
[256];

3241 
n
 = 256;

3242 
i
,
ƒuÀ
;

3243 
	`¥ötf
("fw_func_2_0_5_to_2_0_6\n");

3245 
	`ez∂ib_gë_©å_vÆ
("w™_µp€_ruÀ", 0, "u£∫ame", 
tmp
, (tmp),

3246 
EZPLIB_USE_WEB
);

3247 
	`ba£64_ícode
((*)
tmp
, 
	`°æí
—mp), (*)
b64
, &
n
);

3248 
	`ez∂ib_ª∂a˚_©å
("w™_µp€_ruÀ", 0, "u£∫ame", 
b64
);

3249 
	`ez∂ib_gë_©å_vÆ
("w™_µp€_ruÀ", 0, "∑sswd", 
tmp
, (tmp),

3250 
EZPLIB_USE_WEB
);

3251 
n
 = 256;

3252 
	`ba£64_ícode
((*)
tmp
, 
	`°æí
—mp), (*)
b64
, &
n
);

3253 
	`ez∂ib_ª∂a˚_©å
("w™_µp€_ruÀ", 0, "∑sswd", 
b64
);

3260 
ƒuÀ
 = 
	`©oi
(
	`nvøm_ß„_gë
("ipsec_rule_num"));

3261 
i
 = 0; i < 
ƒuÀ
; i++) {

3262 
	`ez∂ib_gë_subruÀ
("ù£c_ruÀ", 
i
, 0, 25, 
buf
, (buf));

3264 
	`¢¥ötf
(
tmp
, —mp), "%s^0^10^60", 
buf
);

3265 
	`ez∂ib_ª∂a˚_ruÀ
("ù£c_ruÀ", 
i
, 
tmp
);

3269 
	}
}

3271 
	$fw_func_2_0_6_to_2_0_5
()

3273 
tmp
[256];

3274 
	`¥ötf
("fw_func_2_0_6_to_2_0_5\n");

3276 
	`ez∂ib_gë_©å_vÆ
("w™_µp€_ruÀ", 0, "u£∫ame", 
tmp
, (tmp),

3277 
EZPLIB_USE_CLI
);

3278 
	`ez∂ib_ª∂a˚_©å
("w™_µp€_ruÀ", 0, "u£∫ame", 
tmp
);

3279 
	`ez∂ib_gë_©å_vÆ
("w™_µp€_ruÀ", 0, "∑sswd", 
tmp
, (tmp),

3280 
EZPLIB_USE_CLI
);

3281 
	`ez∂ib_ª∂a˚_©å
("w™_µp€_ruÀ", 0, "∑sswd", 
tmp
);

3288 
	`ez∂ib_gë_subruÀ
("ù£c_ruÀ", 0, 0, 25, 
tmp
, (tmp));

3289 
	`ez∂ib_ª∂a˚_ruÀ
("ù£c_ruÀ", 0, 
tmp
);

3292 
	}
}

3294 
	$fw_func_2_0_6_to_2_0_7
()

3296 
tmp
[256], 
buf
[256];

3297 
	`¥ötf
("fw_func_2_0_6_to_2_0_7\n");

3298 
	`nvøm_deÁu…_ruÀ
("appmgr_rule");

3299 
	`ez∂ib_gë_subruÀ
("¸⁄_ruÀ", 0, 0, 2, 
buf
, (buf));

3300 
	`¢¥ötf
(
tmp
, —mp), "%s^0^wìk^03^09^30", 
buf
);

3301 
	`ez∂ib_ª∂a˚_ruÀ
("¸⁄_ruÀ", 0, 
tmp
);

3302 
	`ez∂ib_gë_subruÀ
("log_ruÀ", 0, 1, 3, 
buf
, (buf));

3303 
	`¢¥ötf
(
tmp
, —mp), "sy¶og^%s^1^1^1^1^1^1^1^1^1^1^1^0^0^192.168.1.2^t˝^514", 
buf
);

3304 
	`ez∂ib_ª∂a˚_ruÀ
("log_ruÀ", 0, 
tmp
);

3307 
	`ez∂ib_ª∂a˚_©å
("wan_bw_rule", 0, "link_percent", "90");

3309 
	`nvøm_deÁu…_ruÀ
("wan_main_rule");

3310 
	`nvøm_deÁu…_ruÀ
("wan_detect_rule");

3312 
	}
}

3314 
	$fw_func_2_0_7_to_2_0_6
()

3316 
tmp
[256];

3317 
	`¥ötf
("fw_func_2_0_7_to_2_0_6\n");

3318 
	`nvøm_un£t
("appmgr_rule");

3319 
	`ez∂ib_gë_subruÀ
("¸⁄_ruÀ", 0, 0, 2, 
tmp
, (tmp));

3320 
	`ez∂ib_ª∂a˚_ruÀ
("¸⁄_ruÀ", 0, 
tmp
);

3321 
	`ez∂ib_gë_subruÀ
("log_ruÀ", 0, 0, 3, 
tmp
, (tmp));

3322 
	`ez∂ib_ª∂a˚_ruÀ
("log_ruÀ", 0, 
tmp
);

3324 
	`ez∂ib_ª∂a˚_©å
("wan_bw_rule", 0, "link_percent", "75");

3328 
	`nvøm_un£t
("wan_main_rule");

3329 
	`nvøm_deÁu…_ruÀ
("wan_status_rule");

3330 
	`nvøm_deÁu…_ruÀ
("lan_status_rule");

3331 
	`nvøm_deÁu…_ruÀ
("wan_lb_rule");

3332 
	`nvøm_deÁu…_ruÀ
("wan_upnp_status_rule");

3334 
	}
}

3336 
	$fw_func_2_0_7_to_2_0_8
()

3338 
	`¥ötf
("fw_func_2_0_7_to_2_0_8\n");

3339 
	`nvøm_deÁu…_ruÀ
("wan_status_rule");

3340 
	`nvøm_deÁu…_ruÀ
("snmp_rule");

3341 
	`nvøm_deÁu…_ruÀ
("cron_rule");

3343 
	}
}

3345 
	$fw_func_2_0_8_to_2_0_7
()

3347 
	`¥ötf
("fw_func_2_0_8_to_2_0_7\n");

3348 
	`nvøm_deÁu…_ruÀ
("wan_status_rule");

3349 
	`nvøm_deÁu…_ruÀ
("snmp_rule");

3350 
	`nvøm_deÁu…_ruÀ
("cron_rule");

3352 
	}
}

3354 
	$fw_func_2_0_8_to_2_0_9
()

3356 
	`¥ötf
("fw_func_2_0_8_to_2_0_9\n");

3358 
	}
}

3359 
	$fw_func_2_0_9_to_2_0_8
()

3361 
	`¥ötf
("fw_func_2_0_9_to_2_0_8\n");

3363 
	}
}

3365 
	$fw_func_2_0_9_to_2_0_10
()

3367 
	`¥ötf
("%s\n", 
__func__
);

3369 
	}
}

3370 
	$fw_func_2_0_10_to_2_0_9
()

3372 
	`¥ötf
("%s\n", 
__func__
);

3374 
	}
}

3376 
	$fw_func_2_0_10_to_2_0_11
()

3378 
	`¥ötf
("%s\n", 
__func__
);

3380 
	}
}

3381 
	$fw_func_2_0_11_to_2_0_10
()

3383 
	`¥ötf
("%s\n", 
__func__
);

3385 
	}
}

3387 
	$fw_func_2_0_11_to_2_0_12
()

3389 
	`¥ötf
("%s\n", 
__func__
);

3391 
	}
}

3392 
	$fw_func_2_0_12_to_2_0_11
()

3394 
	`¥ötf
("%s\n", 
__func__
);

3396 
	}
}

3398 
	$fw_func_2_0_12_to_2_0_13
()

3400 
	`¥ötf
("%s\n", 
__func__
);

3402 
	}
}

3403 
	$fw_func_2_0_13_to_2_0_12
()

3405 
	`¥ötf
("%s\n", 
__func__
);

3407 
	}
}

3409 
	$fw_func_2_0_13_to_2_0_14
()

3411 
	`¥ötf
("%s\n", 
__func__
);

3413 
	}
}

3414 
	$fw_func_2_0_14_to_2_0_13
()

3416 
	`¥ötf
("%s\n", 
__func__
);

3418 
	}
}

3420 
	$fw_func_2_0_14_to_2_0_15
()

3422 
	`¥ötf
("%s\n", 
__func__
);

3424 
	}
}

3425 
	$fw_func_2_0_15_to_2_0_14
()

3427 
	`¥ötf
("%s\n", 
__func__
);

3429 
	}
}

3431 
	$fw_func_2_0_15_to_3_0_0
()

3433 
buf
[128], 
b64
[128];

3434 
n
 = (
b64
);

3436 
	`¥ötf
("%s\n", 
__func__
);

3438 
	`ez∂ib_gë_©å_vÆ
("wl0_≠˛i_ruÀ", 0, "ssid", 
buf
, (buf),

3439 
EZPLIB_USE_CLI
);

3440 
	`ba£64_ícode
((*)
buf
, 
	`°æí
(buf), (*)
b64
, &
n
);

3441 
b64
[
n
] = 0;

3442 
	`ez∂ib_ª∂a˚_©å
("wl0_≠˛i_ruÀ", 0, "ssid", 
b64
);

3443 #ifde‡
PLATFORM_BAD_m


3445 
	`ez∂ib_ª∂a˚_©å
("wl0_apcli_swap_basic_rule", 0, "enable", "1");

3448 
	}
}

3449 
	$fw_func_3_0_0_to_2_0_15
()

3451 
buf
[128], 
b64
[128];

3452 
n
 = (
b64
);

3454 
	`¥ötf
("%s\n", 
__func__
);

3456 
	`ez∂ib_gë_©å_vÆ
("wl0_≠˛i_ruÀ", 0, "ssid", 
buf
, (buf),

3457 
EZPLIB_USE_CLI
);

3458 
	`ba£64_decode
((*)
buf
, 
	`°æí
(buf), (*)
b64
, &
n
);

3459 
b64
[
n
] = 0;

3460 
	`ez∂ib_ª∂a˚_©å
("wl0_≠˛i_ruÀ", 0, "ssid", 
b64
);

3461 #ifde‡
PLATFORM_BAD_m


3463 
	`ez∂ib_ª∂a˚_©å
("wl0_apcli_swap_basic_rule", 0, "enable", "0");

3466 
	}
}

3468 
	$fw_func_3_0_0_to_3_0_1
()

3470 
	`¥ötf
("upgradeÅo 3.0.1\n");

3472 
	}
}

3473 
	$fw_func_3_0_1_to_3_0_0
()

3475 
	`¥ötf
("downgrade from 3.0.0\n");

3477 
	}
}

3479 
	$fw_func_3_0_1_to_3_0_2
()

3481 
	`¥ötf
("upgradeÅo 3.0.2\n");

3483 
	}
}

3484 
	$fw_func_3_0_2_to_3_0_1
()

3486 
	`¥ötf
("downgrade from 3.0.1\n");

3488 
	}
}

3490 
	$fw_func_3_0_2_to_3_0_3
()

3492 
	`¥ötf
("upgradeÅo 3.0.3\n");

3494 
	}
}

3495 
	$fw_func_3_0_3_to_3_0_2
()

3497 
	`¥ötf
("downgrade from 3.0.2\n");

3499 
	}
}

3501 
	$fw_func_3_0_3_to_3_0_4
()

3503 
	`¥ötf
("upgradeÅo 3.0.4\n");

3505 
	}
}

3506 
	$fw_func_3_0_4_to_3_0_3
()

3508 
	`¥ötf
("downgrade from 3.0.3\n");

3510 
	}
}

3512 
	$fw_func_3_0_4_to_3_0_5
()

3514 
	`¥ötf
("upgradeÅo 3.0.5\n");

3516 
	}
}

3517 
	$fw_func_3_0_5_to_3_0_4
()

3519 
	`¥ötf
("downgrade from 3.0.4\n");

3521 
	}
}

3523 
	$fw_func_3_0_5_to_3_0_6
()

3525 
	`¥ötf
("upgradeÅo 3.0.6\n");

3527 
	}
}

3528 
	$fw_func_3_0_6_to_3_0_5
()

3530 
	`¥ötf
("downgrade from 3.0.5\n");

3532 
	}
}

3534 
	$fw_func_3_0_6_to_3_0_7
()

3536 
	`¥ötf
("upgradeÅo 3.0.7\n");

3538 
	}
}

3539 
	$fw_func_3_0_7_to_3_0_6
()

3541 
	`¥ötf
("downgrade from 3.0.6\n");

3543 
	}
}

3545 
	$fw_func_3_0_7_to_3_0_8
()

3547 #i‡
	`deföed
 (
EZP_PROD_BRAND_SONY
)

3548 
	`¥ötf
("SONY upgradeÅo 3.0.8\n");

3549 
	`nvøm_deÁu…_ruÀ
("ntp_rule");

3551 
	`¥ötf
("upgradeÅo 3.0.8\n");

3554 
	}
}

3555 
	$fw_func_3_0_8_to_3_0_7
()

3557 #i‡
	`deföed
 (
EZP_PROD_BRAND_SONY
)

3558 
	`¥ötf
("SONY downgradeÅo 3.0.7\n");

3559 
	`nvøm_f£t
("ntp_rule", "^1^pool^north-america.pool.ntp.org^^PST8PDT,M3.2.0/2,M11.1.0/2^1");

3560 
	`nvøm_commô
();

3562 
	`¥ötf
("downgrade from 3.0.7\n");

3565 
	}
}

3567 
	$fw_func_3_0_8_to_3_0_9
()

3569 
	`¥ötf
("upgradeÅo 3.0.9\n");

3571 
	}
}

3572 
	$fw_func_3_0_9_to_3_0_8
()

3574 
	`¥ötf
("downgrade from 3.0.8\n");

3576 
	}
}

3578 
	$fw_func_3_0_9_to_3_0_10
()

3580 
	`¥ötf
("upgradeÅo 3.0.10\n");

3582 
	}
}

3583 
	$fw_func_3_0_10_to_3_0_9
()

3585 
	`¥ötf
("downgrade from 3.0.9\n");

3587 
	}
}

3589 
	$fw_func_3_0_10_to_3_0_11
()

3591 
	`¥ötf
("upgradeÅo 3.0.11\n");

3593 
	}
}

3594 
	$fw_func_3_0_11_to_3_0_10
()

3596 
	`¥ötf
("downgrade from 3.0.10\n");

3598 
	}
}

3600 
	$fw_func_3_0_11_to_3_0_12
()

3602 
	`¥ötf
("upgradeÅo 3.0.12\n");

3604 
	}
}

3605 
	$fw_func_3_0_12_to_3_0_11
()

3607 
	`¥ötf
("downgrade from 3.0.11\n");

3609 
	}
}

3611 
	$fw_func_3_0_12_to_3_0_13
()

3613 
	`¥ötf
("upgradeÅo 3.0.13\n");

3615 
	}
}

3616 
	$fw_func_3_0_13_to_3_0_12
()

3618 
	`¥ötf
("downgrade from 3.0.12\n");

3620 
	}
}

3622 
	$fw_func_3_0_13_to_3_0_14
()

3624 
	`¥ötf
("upgradeÅo 3.0.14\n");

3626 
	}
}

3627 
	$fw_func_3_0_14_to_3_0_13
()

3629 
	`¥ötf
("downgrade from 3.0.13\n");

3631 
	}
}

3633 
	$fw_func_3_0_14_to_3_0_15
()

3635 
	`¥ötf
("upgradeÅo 3.0.15\n");

3637 
	}
}

3638 
	$fw_func_3_0_15_to_3_0_14
()

3640 
	`¥ötf
("downgrade from 3.0.14\n");

3642 
	}
}

3644 
	$fw_func_3_0_15_to_3_0_16
()

3646 
	`¥ötf
("upgradeÅo 3.0.16\n");

3648 
	}
}

3649 
	$fw_func_3_0_16_to_3_0_15
()

3651 
	`¥ötf
("downgrade from 3.0.15\n");

3653 
	}
}

3655 
	$fw_func_3_0_16_to_3_0_17
()

3657 
	`¥ötf
("upgradeÅo 3.0.17\n");

3659 
	}
}

3660 
	$fw_func_3_0_17_to_3_0_16
()

3662 
	`¥ötf
("downgrade from 3.0.16\n");

3664 
	}
}

3666 
	$fw_func_3_0_17_to_3_0_18
()

3668 
	`¥ötf
("upgradeÅo 3.0.18\n");

3670 
	}
}

3671 
	$fw_func_3_0_18_to_3_0_17
()

3673 
	`¥ötf
("downgrade from 3.0.17\n");

3675 
	}
}

3677 
	$fw_func_3_0_18_to_3_0_19
()

3679 
	`¥ötf
("upgradeÅo 3.0.19\n");

3681 
	}
}

3682 
	$fw_func_3_0_19_to_3_0_18
()

3684 
	`¥ötf
("downgrade from 3.0.18\n");

3686 
	}
}

3688 
	$fw_func_3_0_19_to_3_0_20
()

3690 
	`¥ötf
("upgradeÅo 3.0.20\n");

3692 
	}
}

3693 
	$fw_func_3_0_20_to_3_0_19
()

3695 
	`¥ötf
("downgrade from 3.0.19\n");

3697 
	}
}

3699 
	$fw_func_3_0_20_to_3_1_0
()

3701 
	`¥ötf
("upgradeÅo 3.1.0\n");

3702 #i‡
	`deföed
(
PLATFORM_M2E
)

3703 
	`nvøm_deÁu…
();

3704 
	`nvøm_commô
();

3706 #ifde‡
PLATFORM_AXA


3707 
	`nvøm_deÁu…_ruÀ
("wl0_apcli_swap_rule");

3708 
	`nvøm_deÁu…_ruÀ
("wl0_apcli_rule");

3709 
	`nvøm_deÁu…_ruÀ
("appmgr_rule_G");

3710 
	`nvøm_deÁu…_ruÀ
("appmgr_rule_I");

3711 
	`nvøm_commô
();

3715 #i‡
	`deföed
 (
EZP_PROD_BRAND_ALLIS
)

3716 
	`nvøm_deÁu…
();

3719 
	}
}

3720 
	$fw_func_3_1_0_to_3_0_20
()

3722 
	`¥ötf
("downgrade from 3.1.0\n");

3723 #i‡
	`deföed
(
PLATFORM_M2E
)

3724 
	`nvøm_deÁu…
();

3725 
	`nvøm_commô
();

3727 #ifde‡
PLATFORM_AXA


3728 
	`nvøm_deÁu…_ruÀ
("wl0_apcli_swap_rule");

3729 
	`nvøm_deÁu…_ruÀ
("wl0_apcli_rule");

3730 
	`nvøm_deÁu…_ruÀ
("appmgr_rule_G");

3731 
	`nvøm_deÁu…_ruÀ
("appmgr_rule_I");

3732 
	`nvøm_commô
();

3737 
	}
}

3739 
	$fw_func_3_1_0_to_3_1_1
()

3741 
	`¥ötf
("upgradeÅo 3.1.1\n");

3742 #i‡
	`deföed
(
PLATFORM_M2E
)

3745 
	}
}

3746 
	$fw_func_3_1_1_to_3_1_0
()

3748 
	`¥ötf
("downgrade from 3.1.1\n");

3749 #i‡
	`deföed
(
PLATFORM_M2E
)

3752 
	}
}

3755 
	$fw_func_3_1_1_to_3_1_2
()

3757 
	`¥ötf
("%s\n", 
__func__
);

3758 #i‡
	`deföed
(
PLATFORM_M2E
)

3761 
	`nvøm_f£t
("modñ", 
	`x°r
(
EZP_MODEL
));

3762 
	`nvøm_commô
();

3765 
	}
}

3766 
	$fw_func_3_1_2_to_3_1_1
()

3768 
	`¥ötf
("%s\n", 
__func__
);

3769 #i‡
	`deföed
(
PLATFORM_M2E
)

3772 
	}
}

3774 
	$fw_func_3_1_2_to_3_1_3
()

3776 
	`¥ötf
("upgradeÅo 3.1.3\n");

3777 #i‡
	`deföed
(
PLATFORM_M2E
)

3780 
	}
}

3781 
	$fw_func_3_1_3_to_3_1_2
()

3783 
	`¥ötf
("downgrade from 3.1.2\n");

3784 #i‡
	`deföed
(
PLATFORM_M2E
)

3787 
	}
}

3789 
	$fw_func_3_1_3_to_3_1_4
()

3791 
	`¥ötf
("upgradeÅo 3.1.4\n");

3792 #i‡
	`deföed
(
PLATFORM_M2E
)

3795 
	}
}

3796 
	$fw_func_3_1_4_to_3_1_3
()

3798 
	`¥ötf
("downgrade from 3.1.3\n");

3799 #i‡
	`deföed
(
PLATFORM_M2E
)

3802 
	}
}

3804 
	$fw_func_3_1_4_to_3_1_5
()

3806 
	`¥ötf
("upgradeÅo 3.1.5\n");

3807 #i‡
	`deföed
(
PLATFORM_M2E
)

3810 
	}
}

3811 
	$fw_func_3_1_5_to_3_1_4
()

3813 
	`¥ötf
("downgrade from 3.1.4\n");

3814 #i‡
	`deföed
(
PLATFORM_M2E
)

3817 
	}
}

3819 
	$fw_func_3_1_5_to_3_1_6
()

3821 
	`¥ötf
("upgradeÅo 3.1.6\n");

3822 #i‡
	`deföed
(
PLATFORM_M2E
)

3825 
	}
}

3826 
	$fw_func_3_1_6_to_3_1_5
()

3828 
	`¥ötf
("downgrade from 3.1.5\n");

3829 #i‡
	`deföed
(
PLATFORM_M2E
)

3832 
	}
}

3834 
	$fw_func_3_1_6_to_3_1_7
()

3836 
	`¥ötf
("upgradeÅo 3.1.7\n");

3837 #i‡
	`deföed
(
PLATFORM_M2E
)

3840 
	}
}

3841 
	$fw_func_3_1_7_to_3_1_6
()

3843 
	`¥ötf
("downgrade from 3.1.6\n");

3844 #i‡
	`deföed
(
PLATFORM_M2E
)

3847 
	}
}

3849 
	$fw_func_3_1_7_to_3_1_8
()

3851 
	`¥ötf
("upgradeÅo 3.1.8\n");

3852 #i‡
	`deföed
(
PLATFORM_M2E
)

3855 
	}
}

3856 
	$fw_func_3_1_8_to_3_1_7
()

3858 
	`¥ötf
("downgrade from 3.1.7\n");

3859 #i‡
	`deföed
(
PLATFORM_M2E
)

3862 
	}
}

3864 
	$fw_func_3_1_8_to_3_1_9
()

3866 
	`¥ötf
("upgradeÅo 3.1.9\n");

3867 #i‡
	`deföed
(
PLATFORM_M2E
)

3870 
	}
}

3871 
	$fw_func_3_1_9_to_3_1_8
()

3873 
	`¥ötf
("downgrade from 3.1.8\n");

3874 #i‡
	`deföed
(
PLATFORM_M2E
)

3877 
	}
}

3879 
	$fw_func_3_1_9_to_3_1_10
()

3881 
	`¥ötf
("upgradeÅo 3.1.10\n");

3882 #i‡
	`deföed
(
PLATFORM_M2E
)

3885 
	}
}

3886 
	$fw_func_3_1_10_to_3_1_9
()

3888 
	`¥ötf
("downgrade from 3.1.9\n");

3889 #i‡
	`deföed
(
PLATFORM_M2E
)

3892 
	}
}

3894 
	$fw_func_3_2_0_to_3_1_9
()

3896 
	`¥ötf
("downgrade from 3.1.9\n");

3897 
	`nvøm_deÁu…
();

3898 
	`nvøm_commô
();

3899 #i‡
	`deföed
(
PLATFORM_M2E
)

3902 
	}
}

3903 
	$fw_func_3_1_9_to_3_2_0
()

3905 
	`¥ötf
("upgradeÅo 3.2.0\n");

3906 #i‡
	`deföed
(
PLATFORM_M2E
)

3909 
	}
}

3910 
	$fw_func_3_2_0_to_3_2_1
()

3912 
	`¥ötf
("upgradeÅo 3.2.1\n");

3913 
	`nvøm_deÁu…
();

3914 
	`nvøm_commô
();

3915 #i‡
	`deföed
(
PLATFORM_M2E
)

3918 
	}
}

3919 
	$fw_func_3_2_1_to_3_2_0
()

3921 
	`¥ötf
("downgrade from 3.2.0\n");

3922 #i‡
	`deföed
(
PLATFORM_M2E
)

3925 
	}
}

3927 
	$fw_func_3_2_1_to_3_2_2
()

3929 
	`¥ötf
("upgradeÅo 3.2.2\n");

3930 
	`nvøm_deÁu…
();

3931 
	`nvøm_commô
();

3932 #i‡
	`deföed
(
PLATFORM_M2E
)

3935 
	}
}

3936 
	$fw_func_3_2_2_to_3_2_1
()

3938 
	`¥ötf
("downgrade from 3.2.1\n");

3939 #i‡
	`deföed
(
PLATFORM_M2E
)

3942 
	}
}

	@process.c

7 
	~<°rög.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sig«l.h
>

12 
	~<dúít.h
>

14 
	~"sh¨ed.h
"

20 *
	$p¢ame
(
pid
, *
buf„r
, 
maxÀn
)

22 
buf
[512];

23 
∑th
[64];

24 *
p
;

26 i‡(
maxÀn
 <0Ë 
NULL
;

27 *
buf„r
 = 0;

28 
	`•rötf
(
∑th
, "/¥oc/%d/°©", 
pid
);

29 i‡((
	`f_ªad_°rög
(
∑th
, 
buf
, (buf)Ë> 4Ë&& ((
p
 = 
	`°ºchr
(buf, ')')Ë!
NULL
)) {

30 *
p
 = 0;

31 i‡(((
p
 = 
	`°rchr
(
buf
, '(')Ë!
NULL
Ë&& (
	`©oi
(bufË=
pid
)) {

32 
	`°æ˝y
(
buf„r
, 
p
 + 1, 
maxÀn
);

35  
buf„r
;

36 
	}
}

38 
	$_pidof
(c⁄° *
«me
, 
pid_t
** 
pids
)

40 c⁄° *
p
;

41 *
e
;

42 
DIR
 *
dú
;

43 
dúít
 *
de
;

44 
pid_t
 
i
;

45 
cou¡
;

46 
buf
[256];

48 
cou¡
 = 0;

49 *
pids
 = 
NULL
;

50 i‡((
p
 = 
	`°rchr
(
«me
, '/')Ë!
NULL
)Çame =Ö + 1;

51 i‡((
dú
 = 
	`›ídú
("/¥oc")Ë!
NULL
) {

52 (
de
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

53 
i
 = 
	`°πﬁ
(
de
->
d_«me
, &
e
, 10);

54 i‡(*
e
 != 0) ;

55 i‡(
	`°rcmp
(
«me
, 
	`p¢ame
(
i
, 
buf
, (buf))) == 0) {

56 i‡((*
pids
 = 
	`ªÆloc
(*pids, (
pid_t
Ë* (
cou¡
 + 1))Ë=
NULL
) {

59 (*
pids
)[
cou¡
++] = 
i
;

63 
	`˛o£dú
(
dú
);

64  
cou¡
;

65 
	}
}

67 
	$pidof
(c⁄° *
«me
)

69 
pid_t
 *
pids
;

70 
pid_t
 
p
;

72 i‡(
	`_pidof
(
«me
, &
pids
) > 0) {

73 
p
 = *
pids
;

74 
	`‰ì
(
pids
);

75  
p
;

78 
	}
}

80 
	$kûœŒ
(c⁄° *
«me
, 
sig
)

82 
pid_t
 *
pids
;

83 
i
;

84 
r
;

86 i‡((
i
 = 
	`_pidof
(
«me
, &
pids
)) > 0) {

87 
r
 = 0;

89 
r
 |
	`kûl
(
pids
[--
i
], 
sig
);

90 } 
i
 > 0);

91 
	`‰ì
(
pids
);

92  
r
;

95 
	}
}

	@semaphore.c

17 
	~<°dio.h
>

18 
	~<°d¨g.h
>

19 
	~<°rög.h
>

20 
	~<sys/°©.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

24 
	~"£m≠h‹e_mÂ.h
"

26 
	$£m≠h‹e_¸óã
()

28 
Êag_£m
 = 
O_CREAT
|
O_RDWR
;

29 
öô_vÆue
 = 1;

31 i‡(
	`£m≠h‹e_›í
(
SEM_NAME
, 
Êag_£m
, 
FILE_MODE
, 
öô_vÆue
) == -1)

33 
	`≥º‹
("semaphore_create fail");

38 
	}
}

40 
	$£m≠h‹e_˛o£
()

42 i‡(
Sem≠h‹e
.
£m_magic
 !
SEM_MAGIC
)

44 
î∫o
 = 
EINVAL
;

48 
Sem≠h‹e
.
£m_magic
 = 0;

49 i‡(
	`˛o£
(
Sem≠h‹e
.
£m_fd
[0]) == -1 || close(Semaphore.sem_fd[1]) == -1)

51 
	`mem£t
(&
Sem≠h‹e
, '\0', (
£m≠h‹e_t
));

55 
	`mem£t
(&
Sem≠h‹e
, '\0', (
£m≠h‹e_t
));

57 
	}
}

59 
	$£m≠h‹e_u∆ök
(c⁄° *
∑th«me
)

61  
	`u∆ök
(
∑th«me
);

62 
	}
}

64 
	$£m≠h‹e_›í
(c⁄° *
∑th«me
, 
oÊag
, ... )

66 
i
, 
Êags
, 
ßve_î∫o
;

67 
c
;

68 
mode_t
 
mode
;

69 
va_li°
 
≠
;

70 
vÆue
 = 0;

72 i‡(
oÊag
 & 
O_CREAT
)

74 
	`va_°¨t
(
≠
, 
oÊag
);

75 
mode
 = 
	`va_¨g
(
≠
, 
mode_t
);

76 
vÆue
 = 
	`va_¨g
(
≠
, );

77 
	`va_íd
(
≠
);

79 i‡(
	`mkfifo
(
∑th«me
, 
mode
) < 0)

81 i‡(
î∫o
 =
EEXIST
 && (
oÊag
 & 
O_EXCL
) == 0)

82 
oÊag
 &~
O_CREAT
;

85 
	`≥º‹
("Sen_open: mkfifo fail");

91 
Sem≠h‹e
.
£m_fd
[0] = Semaphore.sem_fd[1] = -1;

93 i‡–(
Sem≠h‹e
.
£m_fd
[0] = 
	`›í
(
∑th«me
, 
O_RDONLY
 | 
O_NONBLOCK
)) < 0)

94 
îr‹
;

95 i‡–(
Sem≠h‹e
.
£m_fd
[1] = 
	`›í
(
∑th«me
, 
O_WRONLY
 | 
O_NONBLOCK
)) < 0)

96 
îr‹
;

97 i‡–(
Êags
 = 
	`f˙é
(
Sem≠h‹e
.
£m_fd
[0], 
F_GETFL
, 0)) < 0)

98 
îr‹
;

99 
Êags
 &~
O_NONBLOCK
;

100 i‡(
	`f˙é
(
Sem≠h‹e
.
£m_fd
[0], 
F_SETFL
, 
Êags
) < 0)

101 
îr‹
;

102 i‡(
oÊag
 & 
O_CREAT
)

104 
i
 = 0; i < 
vÆue
; i++)

105 i‡(
	`wrôe
(
Sem≠h‹e
.
£m_fd
[1], &
c
, 1) != 1)

106 
îr‹
;

109 
Sem≠h‹e
.
£m_magic
 = 
SEM_MAGIC
;

112 
îr‹
:

113 
ßve_î∫o
 = 
î∫o
;

114 i‡(
oÊag
 & 
O_CREAT
)

115 
	`u∆ök
(
∑th«me
);

116 
	`˛o£
(
Sem≠h‹e
.
£m_fd
[0]);

117 
	`˛o£
(
Sem≠h‹e
.
£m_fd
[1]);

119 
	`mem£t
(&
Sem≠h‹e
, '\0',(
£m≠h‹e_t
));

120 
î∫o
 = 
ßve_î∫o
;

121 
	`≥º‹
("semaphore_openÉrror");

124 
	}
}

126 
	$£m≠h‹e_po°
()

128 
c
;

130 i‡(
Sem≠h‹e
.
£m_magic
 !
SEM_MAGIC
)

132 
î∫o
 = 
EINVAL
;

136 i‡(
	`wrôe
(
Sem≠h‹e
.
£m_fd
[1], &
c
, 1) == 1)

140 
	}
}

142 
	$£m≠h‹e_waô
()

144 
c
;

146 i‡(
Sem≠h‹e
.
£m_magic
 !
SEM_MAGIC
)

148 
î∫o
 = 
EINVAL
;

152 i‡(
	`ªad
(
Sem≠h‹e
.
£m_fd
[0], &
c
, 1) == 1)

156 
	}
}

158 
	$•ölock_›í
(
idx
, c⁄° *
∑th«me
, 
oÊag
, ... )

160 
i
, 
Êags
, 
ßve_î∫o
;

161 
c
;

162 
mode_t
 
mode
;

163 
va_li°
 
≠
;

164 
vÆue
 = 0;

166 i‡(
oÊag
 & 
O_CREAT
)

168 
	`va_°¨t
(
≠
, 
oÊag
);

169 
mode
 = 
	`va_¨g
(
≠
, 
mode_t
);

170 
vÆue
 = 
	`va_¨g
(
≠
, );

171 
	`va_íd
(
≠
);

173 i‡(
	`mkfifo
(
∑th«me
, 
mode
) < 0)

175 i‡(
î∫o
 =
EEXIST
 && (
oÊag
 & 
O_EXCL
) == 0)

176 
oÊag
 &~
O_CREAT
;

179 
	`≥º‹
("Sen_open: mkfifo fail");

185 
•ölock
[
idx
].
£m_fd
[0] = spinlock[idx].sem_fd[1] = -1;

187 i‡–(
•ölock
[
idx
].
£m_fd
[0] = 
	`›í
(
∑th«me
, 
O_RDONLY
 | 
O_NONBLOCK
)) < 0)

188 
îr‹
;

189 i‡–(
•ölock
[
idx
].
£m_fd
[1] = 
	`›í
(
∑th«me
, 
O_WRONLY
 | 
O_NONBLOCK
)) < 0)

190 
îr‹
;

191 i‡–(
Êags
 = 
	`f˙é
(
•ölock
[
idx
].
£m_fd
[0], 
F_GETFL
, 0)) < 0)

192 
îr‹
;

193 
Êags
 &~
O_NONBLOCK
;

194 i‡(
	`f˙é
(
•ölock
[
idx
].
£m_fd
[0], 
F_SETFL
, 
Êags
) < 0)

195 
îr‹
;

196 i‡(
oÊag
 & 
O_CREAT
)

198 
i
 = 0; i < 
vÆue
; i++)

199 i‡(
	`wrôe
(
•ölock
[
idx
].
£m_fd
[1], &
c
, 1) != 1)

200 
îr‹
;

203 
•ölock
[
idx
].
£m_magic
 = 
SEM_MAGIC
;

206 
îr‹
:

207 
ßve_î∫o
 = 
î∫o
;

208 i‡(
oÊag
 & 
O_CREAT
)

209 
	`u∆ök
(
∑th«me
);

210 
	`˛o£
(
•ölock
[
idx
].
£m_fd
[0]);

211 
	`˛o£
(
•ölock
[
idx
].
£m_fd
[1]);

213 
	`mem£t
(&
•ölock
[
idx
], '\0',(
£m≠h‹e_t
));

214 
î∫o
 = 
ßve_î∫o
;

215 
	`≥º‹
("semaphore_openÉrror");

218 
	}
}

220 
	$•ölock_öô
(
idx
)

222 
Êag_£m
 = 
O_CREAT
|
O_RDWR
;

223 
öô_vÆue
 = 1;

224 
£m_«me
[32];

226 i‡(
idx
 < 0 || idx >
SPINLOCK_SPIN_MAX
)

229 
	`•rötf
(
£m_«me
, "%s%d", 
SEM_NAME
, 
idx
);

230 
	`£m≠h‹e_u∆ök
(
£m_«me
);

232 i‡(
	`•ölock_›í
(
idx
, 
£m_«me
, 
Êag_£m
, 
FILE_MODE
, 
öô_vÆue
) == -1)

234 
	`≥º‹
("semaphore_create fail");

239 
	}
}

241 
	$•ölock_de°roy
(
idx
)

243 i‡(
idx
 < 0 || idx >
SPINLOCK_SPIN_MAX
)

246 i‡(
•ölock
[
idx
].
£m_magic
 !
SEM_MAGIC
)

248 
î∫o
 = 
EINVAL
;

252 
•ölock
[
idx
].
£m_magic
 = 0;

253 i‡(
	`˛o£
(
•ölock
[
idx
].
£m_fd
[0]) == -1 || close(spinlock[idx].sem_fd[1]) == -1)

255 
	`mem£t
(&
•ölock
[
idx
], '\0', (
£m≠h‹e_t
));

259 
	`mem£t
(&
•ölock
[
idx
], '\0', (
£m≠h‹e_t
));

261 
	}
}

263 
	$•ölock_u∆ock
(
idx
)

265 
c
;

267 i‡(
idx
 < 0 || idx >
SPINLOCK_SPIN_MAX
)

270 i‡(
•ölock
[
idx
].
£m_magic
 !
SEM_MAGIC
)

272 
î∫o
 = 
EINVAL
;

276 i‡(
	`wrôe
(
•ölock
[
idx
].
£m_fd
[1], &
c
, 1) == 1)

280 
	}
}

282 
	$•ölock_lock
(
idx
)

284 
c
;

286 i‡(
idx
 < 0 || idx >
SPINLOCK_SPIN_MAX
)

289 i‡(
•ölock
[
idx
].
£m_magic
 !
SEM_MAGIC
)

291 
î∫o
 = 
EINVAL
;

295 i‡(
	`ªad
(
•ölock
[
idx
].
£m_fd
[0], &
c
, 1) == 1)

299 
	}
}

	@semaphore_mfp.h

17 #i‚de‡
__SEMAPHORE_MFP_H


18 
	#__SEMAPHORE_MFP_H


	)

20 #¥agm®
∑ck
(1)

22 
	#SEM_MAGIC
 0x89674523

	)

23 
	#SEM_NAME
 "/tmp/Sem≠h‹e"

	)

24 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

25 
	#SPINLOCK_SPIN_MAX
 5

	)

27 
	#SPINLOCK_WúñessIf2
 0

	)

28 
	#SPINLOCK_WúñessIf5
 1

	)

29 
	#SPINLOCK_DNSRíew
 2

	)

30 
	#SPINLOCK_Nëw‹km≠
 3

	)

31 
	#SPINLOCK_VPNSCli
 4

	)

35 
	m£m_fd
[2];

36 
	m£m_magic
;

37 }
	t£m≠h‹e_t
;

39 
£m≠h‹e_t
 
	gSem≠h‹e
;

40 
£m≠h‹e_t
 
	g•ölock
[
SPINLOCK_SPIN_MAX
];

42 
£m≠h‹e_¸óã
();

43 
£m≠h‹e_˛o£
();

44 
£m≠h‹e_›í
(const *, , ... );

45 
£m≠h‹e_u∆ök
(const *);

46 
£m≠h‹e_po°
();

47 
£m≠h‹e_waô
();

49 
•ölock_öô
(
idx
);

50 
•ölock_de°roy
(
idx
);

51 
•ölock_lock
(
idx
);

52 
•ölock_u∆ock
(
idx
);

54 #¥agm®
∑ck
()

	@shared.h

1 #i‚de‡
__SHARED_H__


2 
	#__SHARED_H__


	)

4 
	~<√töë/ö.h
>

5 
	~<°döt.h
>

7 
	#Y2K
 946684800UL

8 

	)

9 
	#ASIZE
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

12 *
p¢ame
(
pid
, *
buf„r
, 
maxÀn
);

13 
pidof
(c⁄° *
«me
);

14 
kûœŒ
(c⁄° *
«me
, 
sig
);

17 
	#FW_CREATE
 0

	)

18 
	#FW_APPEND
 1

	)

19 
	#FW_NEWLINE
 2

	)

21 
f_size
(c⁄° *
∑th
);

22 
f_exi°s
(c⁄° *
fûe
);

23 
f_ªad
(c⁄° *
fûe
, *
buf„r
, 
max
);

24 
f_wrôe
(c⁄° *
fûe
, c⁄° *
buf„r
, 
Àn
, 
Êags
, 
cmode
);

25 
f_ªad_°rög
(c⁄° *
fûe
, *
buf„r
, 
max
);

26 
f_wrôe_°rög
(c⁄° *
fûe
, c⁄° *
buf„r
, 
Êags
, 
cmode
);

27 
f_ªad_Æloc
(c⁄° *
∑th
, **
buf„r
, 
max
);

28 
f_ªad_Æloc_°rög
(c⁄° *
∑th
, **
buf„r
, 
max
);

32 
ba£64_ícode
(c⁄° *
ö
, 
öÀn
,

33 *
out
, *
ouéí
);

34 
ba£64_decode
(c⁄° *
ö
, 
öÀn
,

35 *
out
, *
ouéí
);

38 
föd_w‹d
(c⁄° *
buf„r
, c⁄° *
w‹d
);

41 
¸c32
(, const *, );

44 
nvøm_imp‹t
(*
fûíame
);

47 
¥o˚ss_is_ru¬ög
(*
¥ogøm
);

	@shutils.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°d¨g.h
>

18 
	~<î∫o.h
>

19 
	~<îr‹.h
>

20 
	~<f˙é.h
>

21 
	~<limôs.h
>

22 
	~<uni°d.h
>

23 
	~<sig«l.h
>

24 
	~<°rög.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/waô.h
>

28 
	~<ãrmios.h
>

29 
	~<sys/io˘l.h
>

30 
	~<sys/time.h
>

31 
	~<√t/ëhî√t.h
>

33 
	~<shutûs.h
>

41 
	$fd2°r
(
fd
)

43 *
buf
 = 
NULL
;

44 
size_t
 
cou¡
 = 0, 
n
;

47 
buf
 = 
	`ªÆloc
(buf, 
cou¡
 + 512);

48 
n
 = 
	`ªad
(
fd
, 
buf
 + 
cou¡
, 512);

49 i‡(
n
 < 0) {

50 
	`‰ì
(
buf
);

51 
buf
 = 
NULL
;

53 
cou¡
 +
n
;

54 } 
n
 == 512);

56 
	`˛o£
(
fd
);

57 i‡(
buf
)

58 
buf
[
cou¡
] = '\0';

59  
buf
;

60 
	}
}

68 
	$fûe2°r
(c⁄° *
∑th
)

70 
fd
;

72 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) == -1) {

73 
	`≥º‹
(
∑th
);

74  
NULL
;

77  
	`fd2°r
(
fd
);

78 
	}
}

87 
	$waôf‹
(
fd
, 
timeout
)

89 
fd_£t
 
rfds
;

90 
timevÆ
 
tv
 = { 
timeout
, 0 };

92 
	`FD_ZERO
(&
rfds
);

93 
	`FD_SET
(
fd
, &
rfds
);

94  
	`£À˘
(
fd
 + 1, &
rfds
, 
NULL
, NULL, (
timeout
 > 0Ë? &
tv
 : NULL);

95 
	}
}

107 
	$_evÆ
(*c⁄° 
¨gv
[], *
∑th
, 
timeout
, *
µid
)

109 
pid_t
 
pid
;

110 
°©us
;

111 
fd
;

112 
Êags
;

113 
sig
;

114 
buf
[254]="";

115 
i
;

117 
pid
 = 
	`f‹k
()) {

119 
	`≥º‹
("fork");

120  
î∫o
;

123 
sig
 = 0; sig < (
_NSIG
-1); sig++)

124 
	`sig«l
(
sig
, 
SIG_DFL
);

127 
	`io˘l
(0, 
TIOCNOTTY
, 0);

128 
	`˛o£
(
STDIN_FILENO
);

129 
	`˛o£
(
STDOUT_FILENO
);

130 
	`˛o£
(
STDERR_FILENO
);

131 
	`£tsid
();

134 i‡((
fd
 = 
	`›í
("/dev/c⁄sﬁe", 
O_RDWR
)) < 0) {

135 (Ë
	`›í
("/dev/nuŒ", 
O_RDONLY
);

136 (Ë
	`›í
("/dev/nuŒ", 
O_WRONLY
);

137 (Ë
	`›í
("/dev/nuŒ", 
O_WRONLY
);

140 
	`˛o£
(
fd
);

141 (Ë
	`›í
("/dev/c⁄sﬁe", 
O_RDONLY
);

142 (Ë
	`›í
("/dev/c⁄sﬁe", 
O_WRONLY
);

143 (Ë
	`›í
("/dev/c⁄sﬁe", 
O_WRONLY
);

147 i‡(
∑th
) {

148 
Êags
 = 
O_WRONLY
 | 
O_CREAT
;

149 i‡(!
	`°∫cmp
(
∑th
, ">>", 2)) {

151 
Êags
 |
O_APPEND
;

152 
∑th
 += 2;

153 } i‡(!
	`°∫cmp
(
∑th
, ">", 1)) {

155 
Êags
 |
O_TRUNC
;

156 
∑th
 += 1;

158 i‡((
fd
 = 
	`›í
(
∑th
, 
Êags
, 0644)) < 0)

159 
	`≥º‹
(
∑th
);

161 
	`dup2
(
fd
, 
STDOUT_FILENO
);

162 
	`˛o£
(
fd
);

167 
i
=0 ; 
¨gv
[i] ; i++)

168 
	`¢¥ötf
(
buf
+
	`°æí
(buf), (buf), "%†", 
¨gv
[
i
]);

169 
	`d¥ötf
("cmd=[%s]\n", 
buf
);

170 
	`£ãnv
("PATH", "/sbin:/bin:/usr/sbin:/usr/bin", 1);

171 
	`Æ¨m
(
timeout
);

172 
	`execvp
(
¨gv
[0],árgv);

173 
	`≥º‹
(
¨gv
[0]);

174 
	`exô
(
î∫o
);

176 i‡(
µid
) {

177 *
µid
 = 
pid
;

180 
	`waôpid
(
pid
, &
°©us
, 0);

181 i‡(
	`WIFEXITED
(
°©us
))

182  
	`WEXITSTATUS
(
°©us
);

184  
°©us
;

187 
	}
}

196 
	$_backtick
(*c⁄° 
¨gv
[])

198 
fûedes
[2];

199 
pid_t
 
pid
;

200 
°©us
;

201 *
buf
 = 
NULL
;

204 i‡(
	`pùe
(
fûedes
) == -1) {

205 
	`≥º‹
(
¨gv
[0]);

206  
NULL
;

209 
pid
 = 
	`f‹k
()) {

211  
NULL
;

213 
	`˛o£
(
fûedes
[0]);

214 
	`dup2
(
fûedes
[1], 1);

215 
	`˛o£
(
fûedes
[1]);

216 
	`execvp
(
¨gv
[0],árgv);

217 
	`exô
(
î∫o
);

220 
	`˛o£
(
fûedes
[1]);

221 
buf
 = 
	`fd2°r
(
fûedes
[0]);

222 
	`waôpid
(
pid
, &
°©us
, 0);

226  
buf
;

227 
	}
}

235 
	$kûl_pidfûe
(*
pidfûe
)

237 
FILE
 *
Â
 = 
	`f›í
(
pidfûe
, "r");

238 
buf
[256];

240 i‡(
Â
 && 
	`fgës
(
buf
, (buf), fp)) {

241 
pid_t
 
pid
 = 
	`°πoul
(
buf
, 
NULL
, 0);

242 
	`f˛o£
(
Â
);

243  
	`kûl
(
pid
, 
SIGTERM
);

245  
î∫o
;

246 
	}
}

249 
	$¥o˚ss_is_ru¬ög
(*
¥ogøm
)

251 
FILE
 *
Â
;

252 
buf
[256];

253 
pid_t
 
pid
 = 0;

255 
	`¢¥ötf
(
buf
, (buf), "pido‡%s", 
¥ogøm
);

256 
Â
 = 
	`p›í
(
buf
, "r");

257 i‡(
Â
 && 
	`fgës
(
buf
, (buf), fp)) {

258 
pid
 = 
	`°πoul
(
buf
, 
NULL
, 0);

261 i‡(
Â
) {

262 
	`p˛o£
(
Â
);

264  (
pid
 > 0) ? 1 : 0;

265 
	}
}

276 
	$ß„_‰ód
(*
±r
, 
size_t
 
size
, size_à
nmemb
, 
FILE
 *
°ªam
)

278 
size_t
 
ªt
 = 0;

281 
	`˛óªº
(
°ªam
);

282 
ªt
 +
	`‰ód
((*)
±r
 + (ªà* 
size
), size, 
nmemb
 -Ñë, 
°ªam
);

283 } 
ªt
 < 
nmemb
 && 
	`„º‹
(
°ªam
Ë&& 
î∫o
 =
EINTR
);

285  
ªt
;

286 
	}
}

297 
	$ß„_fwrôe
(c⁄° *
±r
, 
size_t
 
size
, size_à
nmemb
, 
FILE
 *
°ªam
)

299 
size_t
 
ªt
 = 0;

302 
	`˛óªº
(
°ªam
);

303 
ªt
 +
	`fwrôe
((*)
±r
 + (ªà* 
size
), size, 
nmemb
 -Ñë, 
°ªam
);

304 } 
ªt
 < 
nmemb
 && 
	`„º‹
(
°ªam
Ë&& 
î∫o
 =
EINTR
);

306  
ªt
;

307 
	}
}

316 
	$ëhî_©€
(c⁄° *
a
, *
e
)

318 *
c
 = (*Ë
a
;

319 
i
 = 0;

321 
	`mem£t
(
e
, 0, 
ETHER_ADDR_LEN
);

323 
e
[
i
++] = (Ë
	`°πoul
(
c
, &c, 16);

324 i‡(!*
c
++ || 
i
 =
ETHER_ADDR_LEN
)

327  (
i
 =
ETHER_ADDR_LEN
);

328 
	}
}

337 
	$ëhî_ëﬂ
(c⁄° *
e
, *
a
)

339 *
c
 = 
a
;

340 
i
;

342 
i
 = 0; i < 
ETHER_ADDR_LEN
; i++) {

343 i‡(
i
)

344 *
c
++ = ':';

345 
c
 +
	`•rötf
(c, "%02X", 
e
[
i
] & 0xff);

347  
a
;

348 
	}
}

	@strings.c

8 
	~<°rög.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<sys/°©.h
>

14 
	~<°d¨g.h
>

16 
	~<bcmnvøm.h
>

17 
	~"shutûs.h
"

18 
	~"sh¨ed.h
"

20 
	$föd_w‹d
(c⁄° *
buf„r
, c⁄° *
w‹d
)

22 c⁄° *
p
, *
q
;

23 
n
;

25 
n
 = 
	`°æí
(
w‹d
);

26 
p
 = 
buf„r
;

27 (
p
 = 
	`°r°r
’, 
w‹d
)Ë!
NULL
) {

28 i‡((
p
 =
buf„r
) || (*(p - 1) == ' ') || (*(p - 1) == ',')) {

29 
q
 = 
p
 + 
n
;

30 i‡((*
q
 == ' ') || (*q == ',') || (*q == 0))  1;

32 ++
p
;

35 
	}
}

	@wl.c

14 
	~<°rög.h
>

16 
	~<ty≥defs.h
>

17 
	~<wlutûs.h
>

20 
	$wl_¥obe
(*
«me
)

22 
ªt
, 
vÆ
;

25 i‡((
ªt
 = 
	`wl_io˘l
(
«me
, 
WLC_GET_MAGIC
, &
vÆ
, (val))))

26  
ªt
;

27 i‡(
vÆ
 !
WLC_IOCTL_MAGIC
)

29 i‡((
ªt
 = 
	`wl_io˘l
(
«me
, 
WLC_GET_VERSION
, &
vÆ
, (val))))

30  
ªt
;

31 i‡(
vÆ
 > 
WLC_IOCTL_VERSION
)

34  
ªt
;

35 
	}
}

38 
	$wl_£t_vÆ
(*
«me
, *
v¨
, *
vÆ
, 
Àn
)

40 
buf
[128];

41 
buf_Àn
;

44 i‡((
buf_Àn
 = 
	`°æí
(
v¨
)Ë+ 1 + 
Àn
 > (
buf
))

47 
	`°r˝y
(
buf
, 
v¨
);

48 
buf_Àn
 += 1;

51 
	`mem˝y
(&
buf
[
buf_Àn
], 
vÆ
, 
Àn
);

52 
buf_Àn
 +
Àn
;

54  
	`wl_io˘l
(
«me
, 
WLC_SET_VAR
, 
buf
, 
buf_Àn
);

55 
	}
}

58 
	$wl_gë_vÆ
(*
«me
, *
v¨
, *
vÆ
, 
Àn
)

60 
buf
[128];

61 
ªt
;

64 i‡(
	`°æí
(
v¨
Ë+ 1 > (
buf
Ë|| 
Àn
 > (buf))

67 
	`°r˝y
(
buf
, 
v¨
);

68 i‡((
ªt
 = 
	`wl_io˘l
(
«me
, 
WLC_GET_VAR
, 
buf
, (buf))))

69  
ªt
;

71 
	`mem˝y
(
vÆ
, 
buf
, 
Àn
);

73 
	}
}

76 
	$wl_£t_öt
(*
«me
, *
v¨
, 
vÆ
)

78  
	`wl_£t_vÆ
(
«me
, 
v¨
, &
vÆ
, (val));

79 
	}
}

82 
	$wl_gë_öt
(*
«me
, *
v¨
, *
vÆ
)

84  
	`wl_gë_vÆ
(
«me
, 
v¨
, 
vÆ
, (*val));

85 
	}
}

	@wl_linux.c

15 
	~<°dio.h
>

16 
	~<uni°d.h
>

17 
	~<°rög.h
>

18 
	~<î∫o.h
>

19 
	~<sys/io˘l.h
>

20 
	~<√t/if.h
>

22 
	~<ty≥defs.h
>

23 
	~<wlio˘l.h
>

24 
	~<wlutûs.h
>

27 
	$wl_io˘l
(*
«me
, 
cmd
, *
buf
, 
Àn
)

29 
i‰eq
 
i‰
;

30 
wl_io˘l_t
 
ioc
;

31 
ªt
 = 0;

32 
s
;

35 i‡((
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

36 
	`≥º‹
("socket");

37  
î∫o
;

41 
ioc
.
cmd
 = cmd;

42 
ioc
.
buf
 = buf;

43 
ioc
.
Àn
 =Üen;

44 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

45 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë&
ioc
;

46 i‡((
ªt
 = 
	`io˘l
(
s
, 
SIOCDEVPRIVATE
, &
i‰
)) < 0)

47 i‡(
cmd
 !
WLC_GET_MAGIC
)

48 
	`≥º‹
(
i‰
.
i‰_«me
);

51 
	`˛o£
(
s
);

52  
ªt
;

53 
	}
}

56 
	$wl_hwaddr
(*
«me
, *
hwaddr
)

58 
i‰eq
 
i‰
;

59 
ªt
 = 0;

60 
s
;

63 i‡((
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

64 
	`≥º‹
("socket");

65  
î∫o
;

69 
	`°∫˝y
(
i‰
.
i‰_«me
, 
«me
, 
IFNAMSIZ
);

70 i‡((
ªt
 = 
	`io˘l
(
s
, 
SIOCGIFHWADDR
, &
i‰
)) == 0)

71 
	`mem˝y
(
hwaddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
ETHER_ADDR_LEN
);

74 
	`˛o£
(
s
);

75  
ªt
;

76 
	}
}

	@zconf.h

8 #i‚de‡
_ZCONF_H


9 
	#_ZCONF_H


	)

11 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__386__
Ë|| deföed(
i386
)

12 #i‚de‡
__32BIT__


13 
	#__32BIT__


	)

17 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

18 #i‚de‡
STDC


19 
	#STDC


	)

37 #i‚de‡
MAX_MEM_LEVEL


38 
	#MAX_MEM_LEVEL
 9

	)

46 #i‚de‡
MAX_WBITS


47 
	#MAX_WBITS
 15

	)

52 #i‚de‡
OF


53 #ifde‡
STDC


54 
	#OF
(
¨gs
Ë
	)
args

56 
	#OF
(
¨gs
Ë()

	)

60 #i‚de‡
ZEXPORT


61 
	#ZEXPORT


	)

63 #i‚de‡
ZEXPORTVA


64 
	#ZEXPORTVA


	)

66 #i‚de‡
ZEXTERN


67 
	#ZEXTERN
 

	)

69 #i‚de‡
FAR


70 
	#FAR


	)

73 
	tByã
;

74 
	tuI¡
;

75 
	tuL⁄g
;

77 
Byã
 
	tFAR
 
	tByãf
;

78 
	tFAR
 
	tch¨f
;

79 
	tFAR
 
	tötf
;

80 
uI¡
 
	tFAR
 
	tuI¡f
;

81 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

83 
	tFAR
 *
	tvoidpf
;

84 *
	tvoidp
;

86 
	~<löux/ty≥s.h
>

87 
	~<löux/uni°d.h
>

88 
	#z_off_t
 
off_t


	)

	@zlib.h

31 #i‚de‡
_ZLIB_H


32 
	#_ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.1.3"

	)

63 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

64 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

66 
öã∫Æ_°©e
;

68 
	sz_°ªam_s
 {

69 
Byãf
 *
√xt_ö
;

70 
uI¡
 
avaû_ö
;

71 
uL⁄g
 
tŸÆ_ö
;

73 
Byãf
 *
√xt_out
;

74 
uI¡
 
avaû_out
;

75 
uL⁄g
 
tŸÆ_out
;

77 *
msg
;

78 
öã∫Æ_°©e
 
FAR
 *
°©e
;

80 *
w‹k•a˚
;

82 
d©a_ty≥
;

83 
uL⁄g
 
adÀr
;

84 
uL⁄g
 
ª£rved
;

85 } 
	tz_°ªam
;

87 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

123 
	#Z_NO_FLUSH
 0

	)

124 
	#Z_PARTIAL_FLUSH
 1

	)

125 
	#Z_PACKET_FLUSH
 2

	)

126 
	#Z_SYNC_FLUSH
 3

	)

127 
	#Z_FULL_FLUSH
 4

	)

128 
	#Z_FINISH
 5

	)

131 
	#Z_OK
 0

	)

132 
	#Z_STREAM_END
 1

	)

133 
	#Z_NEED_DICT
 2

	)

134 
	#Z_ERRNO
 (-1)

	)

135 
	#Z_STREAM_ERROR
 (-2)

	)

136 
	#Z_DATA_ERROR
 (-3)

	)

137 
	#Z_MEM_ERROR
 (-4)

	)

138 
	#Z_BUF_ERROR
 (-5)

	)

139 
	#Z_VERSION_ERROR
 (-6)

	)

144 
	#Z_NO_COMPRESSION
 0

	)

145 
	#Z_BEST_SPEED
 1

	)

146 
	#Z_BEST_COMPRESSION
 9

	)

147 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

150 
	#Z_FILTERED
 1

	)

151 
	#Z_HUFFMAN_ONLY
 2

	)

152 
	#Z_DEFAULT_STRATEGY
 0

	)

155 
	#Z_BINARY
 0

	)

156 
	#Z_ASCII
 1

	)

157 
	#Z_UNKNOWN
 2

	)

160 
	#Z_DEFLATED
 8

	)

163 
	#Z_NULL
 0

	)

167 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlib_zlibVîsi⁄
 
OF
(());

174 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©e_w‹k•a˚size
 
OF
(());

204 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

282 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

296 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©e_w‹k•a˚size
 
OF
(());

324 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

393 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

454 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

455 c⁄° 
Byãf
 *
di˘i⁄¨y
,

456 
uI¡
 
di˘Lígth
));

490 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

491 
z_°ªamp
 
sour˚
));

508 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

519 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

520 
Àvñ
,

521 
°øãgy
));

563 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

564 c⁄° 
Byãf
 *
di˘i⁄¨y
,

565 
uI¡
 
di˘Lígth
));

582 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

597 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

607 
ZEXPORT
 
zlib_öÊ©eIncomp
 
OF
((
z_°ªam
 *
°rm
));

621 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

622 c⁄° *
vîsi⁄
, 
°ªam_size
));

623 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

624 c⁄° *
vîsi⁄
, 
°ªam_size
));

625 
ZEXTERN
 
ZEXPORT
 
zlib_deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

626 
wödowBôs
, 
memLevñ
,

627 
°øãgy
, c⁄° *
vîsi⁄
,

628 
°ªam_size
));

629 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

630 c⁄° *
vîsi⁄
, 
°ªam_size
));

631 
	#zlib_deÊ©eInô
(
°rm
, 
Àvñ
) \

632 
	`zlib_deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

633 
	#zlib_öÊ©eInô
(
°rm
) \

634 
	`zlib_öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

635 
	#zlib_deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

636 
	`zlib_deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

637 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

638 
	#zlib_öÊ©eInô2
(
°rm
, 
wödowBôs
) \

639 
	`zlib_öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

642 #i‡!
deföed
(
_Z_UTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

643 
	söã∫Æ_°©e
 {
	gdummy
;};

646 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlib_zEº‹
 
OF
((
îr
));

647 
ZEXTERN
 
ZEXPORT
 
zlib_öÊ©eSyncPoöt
 
OF
((
z_°ªamp
 
z
));

648 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
zlib_gë_¸c_èbÀ
 
OF
(());

650 #ifde‡
__˝lu•lus


	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 #i‚de‡
_ASSERT_H_DECLS


66 
	#_ASSERT_H_DECLS


	)

67 
__BEGIN_DECLS


70 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

71 
__löe
, c⁄° *
__fun˘i⁄
)

72 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

75 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

76 
__löe
, c⁄° *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


89 
	#as£π
(
ex¥
) \

90 ((
ex¥
) \

91 ? 
	`__ASSERT_VOID_CAST
 (0) \

92 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

94 #ifdef 
__USE_GNU


95 
	#as£π_≥º‹
(
î∫um
) \

96 (!(
î∫um
) \

97 ? 
	`__ASSERT_VOID_CAST
 (0) \

98 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

106 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

107 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

109 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

110 
	#__ASSERT_FUNCTION
 
__func__


	)

112 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

119 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


121 #unde‡
°©ic_as£π


122 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/error.h

19 #i‚de‡
_ERROR_H


20 
	#_ERROR_H
 1

	)

22 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


31 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

32 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

34 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

35 
__löío
, c⁄° *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

41 (*
îr‹_¥öt_¥og«me
) ();

44 
îr‹_mesßge_cou¡
;

48 
îr‹_⁄e_≥r_löe
;

51 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


52 
	~<bôs/îr‹.h
>

55 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/net/ethernet.h

21 #i‚de‡
__NET_ETHERNET_H


22 
	#__NET_ETHERNET_H
 1

	)

24 
	~<sys/cdefs.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 
__BEGIN_DECLS


32 
	sëhî_addr


34 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

35 } 
__©åibuã__
 ((
__∑cked__
));

38 
	sëhî_hódî


40 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

41 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

42 
u_öt16_t
 
	mëhî_ty≥
;

43 } 
__©åibuã__
 ((
__∑cked__
));

46 
	#ETHERTYPE_PUP
 0x0200

	)

47 
	#ETHERTYPE_SPRITE
 0x0500

	)

48 
	#ETHERTYPE_IP
 0x0800

	)

49 
	#ETHERTYPE_ARP
 0x0806

	)

50 
	#ETHERTYPE_REVARP
 0x8035

	)

51 
	#ETHERTYPE_AT
 0x809B

	)

52 
	#ETHERTYPE_AARP
 0x80F3

	)

53 
	#ETHERTYPE_VLAN
 0x8100

	)

54 
	#ETHERTYPE_IPX
 0x8137

	)

55 
	#ETHERTYPE_IPV6
 0x86dd

	)

56 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

59 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

60 
	#ETHER_TYPE_LEN
 2

	)

61 
	#ETHER_CRC_LEN
 4

	)

62 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

63 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

64 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

67 
	#ETHER_IS_VALID_LEN
(
foo
) \

68 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

75 
	#ETHERTYPE_TRAIL
 0x1000

	)

76 
	#ETHERTYPE_NTRAILER
 16

	)

78 
	#ETHERMTU
 
ETH_DATA_LEN


	)

79 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

81 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


33 
	mIPPROTO_IP
 = 0,

34 
	#IPPROTO_IP
 
IPPROTO_IP


	)

35 
	mIPPROTO_HOPOPTS
 = 0,

36 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

37 
	mIPPROTO_ICMP
 = 1,

38 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

39 
	mIPPROTO_IGMP
 = 2,

40 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

41 
	mIPPROTO_IPIP
 = 4,

42 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

43 
	mIPPROTO_TCP
 = 6,

44 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

45 
	mIPPROTO_EGP
 = 8,

46 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

47 
	mIPPROTO_PUP
 = 12,

48 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

49 
	mIPPROTO_UDP
 = 17,

50 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

51 
	mIPPROTO_IDP
 = 22,

52 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

53 
	mIPPROTO_TP
 = 29,

54 
	#IPPROTO_TP
 
IPPROTO_TP


	)

55 
	mIPPROTO_DCCP
 = 33,

56 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

57 
	mIPPROTO_IPV6
 = 41,

58 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

59 
	mIPPROTO_ROUTING
 = 43,

60 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

61 
	mIPPROTO_FRAGMENT
 = 44,

62 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

63 
	mIPPROTO_RSVP
 = 46,

64 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

65 
	mIPPROTO_GRE
 = 47,

66 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

67 
	mIPPROTO_ESP
 = 50,

68 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

69 
	mIPPROTO_AH
 = 51,

70 
	#IPPROTO_AH
 
IPPROTO_AH


	)

71 
	mIPPROTO_ICMPV6
 = 58,

72 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

73 
	mIPPROTO_NONE
 = 59,

74 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

75 
	mIPPROTO_DSTOPTS
 = 60,

76 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

77 
	mIPPROTO_MTP
 = 92,

78 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

79 
	mIPPROTO_ENCAP
 = 98,

80 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

81 
	mIPPROTO_PIM
 = 103,

82 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

83 
	mIPPROTO_COMP
 = 108,

84 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

85 
	mIPPROTO_SCTP
 = 132,

86 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

87 
	mIPPROTO_UDPLITE
 = 136,

88 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

89 
	mIPPROTO_RAW
 = 255,

90 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

91 
	mIPPROTO_MAX


96 
uöt16_t
 
	tö_p‹t_t
;

101 
	mIPPORT_ECHO
 = 7,

102 
	mIPPORT_DISCARD
 = 9,

103 
	mIPPORT_SYSTAT
 = 11,

104 
	mIPPORT_DAYTIME
 = 13,

105 
	mIPPORT_NETSTAT
 = 15,

106 
	mIPPORT_FTP
 = 21,

107 
	mIPPORT_TELNET
 = 23,

108 
	mIPPORT_SMTP
 = 25,

109 
	mIPPORT_TIMESERVER
 = 37,

110 
	mIPPORT_NAMESERVER
 = 42,

111 
	mIPPORT_WHOIS
 = 43,

112 
	mIPPORT_MTP
 = 57,

114 
	mIPPORT_TFTP
 = 69,

115 
	mIPPORT_RJE
 = 77,

116 
	mIPPORT_FINGER
 = 79,

117 
	mIPPORT_TTYLINK
 = 87,

118 
	mIPPORT_SUPDUP
 = 95,

121 
	mIPPORT_EXECSERVER
 = 512,

122 
	mIPPORT_LOGINSERVER
 = 513,

123 
	mIPPORT_CMDSERVER
 = 514,

124 
	mIPPORT_EFSSERVER
 = 520,

127 
	mIPPORT_BIFFUDP
 = 512,

128 
	mIPPORT_WHOSERVER
 = 513,

129 
	mIPPORT_ROUTESERVER
 = 520,

132 
	mIPPORT_RESERVED
 = 1024,

135 
	mIPPORT_USERRESERVED
 = 5000

140 
uöt32_t
 
	tö_addr_t
;

141 
	sö_addr


143 
ö_addr_t
 
	ms_addr
;

152 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

153 
	#IN_CLASSA_NET
 0xff000000

	)

154 
	#IN_CLASSA_NSHIFT
 24

	)

155 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

156 
	#IN_CLASSA_MAX
 128

	)

158 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

159 
	#IN_CLASSB_NET
 0xffff0000

	)

160 
	#IN_CLASSB_NSHIFT
 16

	)

161 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

162 
	#IN_CLASSB_MAX
 65536

	)

164 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

165 
	#IN_CLASSC_NET
 0xffffff00

	)

166 
	#IN_CLASSC_NSHIFT
 8

	)

167 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

169 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

170 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

172 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

173 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

176 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

178 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

180 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

183 
	#IN_LOOPBACKNET
 127

	)

185 #i‚de‡
INADDR_LOOPBACK


186 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

190 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

191 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

192 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

193 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

197 
	sö6_addr


201 
uöt8_t
 
	m__u6_addr8
[16];

202 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


203 
uöt16_t
 
	m__u6_addr16
[8];

204 
uöt32_t
 
	m__u6_addr32
[4];

206 } 
	m__ö6_u
;

207 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

208 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


209 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

210 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

214 c⁄° 
ö6_addr
 
ö6addr_™y
;

215 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

216 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

217 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

219 
	#INET_ADDRSTRLEN
 16

	)

220 
	#INET6_ADDRSTRLEN
 46

	)

224 
	ssockaddr_ö


226 
__SOCKADDR_COMMON
 (
sö_
);

227 
ö_p‹t_t
 
	msö_p‹t
;

228 
ö_addr
 
	msö_addr
;

231 
	msö_zîo
[ (
sockaddr
) -

232 
__SOCKADDR_COMMON_SIZE
 -

233  (
ö_p‹t_t
) -

234  (
ö_addr
)];

238 
	ssockaddr_ö6


240 
__SOCKADDR_COMMON
 (
sö6_
);

241 
ö_p‹t_t
 
	msö6_p‹t
;

242 
uöt32_t
 
	msö6_Êowöfo
;

243 
ö6_addr
 
	msö6_addr
;

244 
uöt32_t
 
	msö6_sc›e_id
;

248 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


250 
	sù_mªq


253 
ö_addr
 
	mimr_mu…üddr
;

256 
ö_addr
 
	mimr_öãrÁ˚
;

259 
	sù_mªq_sour˚


262 
ö_addr
 
	mimr_mu…üddr
;

265 
ö_addr
 
	mimr_öãrÁ˚
;

268 
ö_addr
 
	mimr_sour˚addr
;

274 
	sùv6_mªq


277 
ö6_addr
 
	mùv6mr_mu…üddr
;

280 
	mùv6mr_öãrÁ˚
;

284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


286 
	sgroup_ªq


289 
uöt32_t
 
	mgr_öãrÁ˚
;

292 
sockaddr_°‹age
 
	mgr_group
;

295 
	sgroup_sour˚_ªq


298 
uöt32_t
 
	mg§_öãrÁ˚
;

301 
sockaddr_°‹age
 
	mg§_group
;

304 
sockaddr_°‹age
 
	mg§_sour˚
;

309 
	sù_msfûãr


312 
ö_addr
 
	mimsf_mu…üddr
;

315 
ö_addr
 
	mimsf_öãrÁ˚
;

318 
uöt32_t
 
	mimsf_fmode
;

321 
uöt32_t
 
	mimsf_num§c
;

323 
ö_addr
 
	mimsf_¶i°
[1];

326 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

327 -  (
ö_addr
) \

328 + (
num§c
Ë*  (
ö_addr
))

	)

330 
	sgroup_fûãr


333 
uöt32_t
 
	mgf_öãrÁ˚
;

336 
sockaddr_°‹age
 
	mgf_group
;

339 
uöt32_t
 
	mgf_fmode
;

342 
uöt32_t
 
	mgf_num§c
;

344 
sockaddr_°‹age
 
	mgf_¶i°
[1];

347 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

348 -  (
sockaddr_°‹age
) \

349 + ((
num§c
) \

350 *  (
sockaddr_°‹age
)))

	)

355 
	~<bôs/ö.h
>

364 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

365 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

366 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

367 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

368 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

369 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

370 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

372 
	~<ídün.h
>

375 
	~<bôs/byãsw≠.h
>

377 #ifde‡
__OPTIMIZE__


381 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


384 
	#¡ohl
(
x
Ë(x)

	)

385 
	#¡ohs
(
x
Ë(x)

	)

386 
	#ht⁄l
(
x
Ë(x)

	)

387 
	#ht⁄s
(
x
Ë(x)

	)

389 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


390 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

391 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

392 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

393 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

398 #ifde‡
__GNUC__


399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (
__exãnsi⁄__
 \

401 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

402 
__a
->
s6_addr32
[0] == 0 \

403 && 
__a
->
s6_addr32
[1] == 0 \

404 && 
__a
->
s6_addr32
[2] == 0 \

405 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

407 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

408 (
__exãnsi⁄__
 \

409 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

410 
__a
->
s6_addr32
[0] == 0 \

411 && 
__a
->
s6_addr32
[1] == 0 \

412 && 
__a
->
s6_addr32
[2] == 0 \

413 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

415 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

416 (
__exãnsi⁄__
 \

417 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

418 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

420 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

421 (
__exãnsi⁄__
 \

422 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

423 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

425 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 
__a
->
s6_addr32
[0] == 0 \

429 && 
__a
->
s6_addr32
[1] == 0 \

430 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

432 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 
__a
->
s6_addr32
[0] == 0 \

436 && 
__a
->
s6_addr32
[1] == 0 \

437 && 
__a
->
s6_addr32
[2] == 0 \

438 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

440 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

441 (
__exãnsi⁄__
 \

442 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

443 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

444 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

445 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

446 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

447 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

449 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

450 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

451 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

452 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

453 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

455 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

456 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

457 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

458 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

459 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

461 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

462 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

463 =
	`ht⁄l
 (0x„800000))

	)

465 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

466 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

467 =
	`ht⁄l
 (0x„c00000))

	)

469 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

470 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

471 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

472 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

474 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

475 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

476 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

477 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

478 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

480 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

487 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

489 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


491 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

494 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

495 
__THROW
;

499 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

500 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

501 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

503 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

504 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

505 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

507 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

508 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

509 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

511 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

515 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

520 #ifde‡
__USE_GNU


521 
cmsghdr
;

524 
	sö6_pktöfo


526 
ö6_addr
 
ùi6_addr
;

527 
ùi6_ifödex
;

531 
	sù6_mtuöfo


533 
sockaddr_ö6
 
ù6m_addr
;

534 
uöt32_t
 
ù6m_mtu
;

539 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

540 
__THROW
 
__©åibuã_dïªˇãd__
;

541 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

542 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

543 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

544 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

545 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

546 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

547 
__mu…x
, 
__∂usy
)

548 
__THROW
 
__©åibuã_dïªˇãd__
;

549 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

550 
uöt8_t
 **
__çåp
)

551 
__THROW
 
__©åibuã_dïªˇãd__
;

552 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

553 
uöt8_t
 **
__çåp
, 
__ty≥
)

554 
__THROW
 
__©åibuã_dïªˇãd__
;

558 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

559 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

560 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

561 **
__d©abuÂ
Ë
__THROW
;

562 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

563 
__THROW
;

564 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

565 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

566 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

567 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

568 **
__d©abuÂ
Ë
__THROW
;

569 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

573 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

577 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

578 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

579 
__£gmíts
Ë
__THROW
;

580 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

581 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

582 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

583 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

584 
__THROW
;

590 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

591 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

592 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

593 
__THROW
;

596 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

597 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

598 
uöt32_t
 
__num§c
,

599 c⁄° 
ö_addr
 *
__¶i°
)

600 
__THROW
;

604 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

605 c⁄° 
sockaddr
 *
__group
,

606 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

607 
uöt32_t
 *
__num§c
,

608 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

611 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

612 c⁄° 
sockaddr
 *
__group
,

613 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

614 
uöt32_t
 
__num§c
,

615 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

618 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

169 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

171 #ifde‡
__FAVOR_BSD


174 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 #ifde‡
__USE_XOPEN


177 #ifde‡
__GNUC__


178 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

181 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

187 #ifde‡
__USE_BSD


194 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

197 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

200 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

203 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

207 #ifde‡
__USE_MISC


208 
	#NSIG
 
_NSIG


	)

211 #ifde‡
__USE_GNU


212 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

216 #ifde‡
__USE_BSD


217 
__sigh™dÀr_t
 
	tsig_t
;

220 #ifde‡
__USE_POSIX


223 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

229 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__USE_GNU


240 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

243 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

244 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

247 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

248 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

253 
	~<bôs/siga˘i⁄.h
>

256 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

257 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

264 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

267 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

268 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

271 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

278 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

279 
	`__n⁄nuŒ
 ((1, 2));

281 #ifde‡
__USE_POSIX199309


286 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

294 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

295 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

296 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

297 
	`__n⁄nuŒ
 ((1));

301 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

302 
__THROW
;

307 #ifde‡
__USE_BSD


311 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

312 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

315 
	ssigvec


317 
__sigh™dÀr_t
 
sv_h™dÀr
;

318 
sv_mask
;

320 
sv_Êags
;

321 
	#sv_⁄°ack
 
sv_Êags


	)

325 
	#SV_ONSTACK
 (1 << 0)

	)

326 
	#SV_INTERRUPT
 (1 << 1)

	)

327 
	#SV_RESETHAND
 (1 << 2)

	)

335 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

336 
sigvec
 *
__ovec
Ë
__THROW
;

340 
	~<bôs/sigc⁄ãxt.h
>

343 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


349 
	#__√ed_size_t


	)

350 
	~<°ddef.h
>

355 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

357 
	~<bôs/sig°ack.h
>

358 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


360 
	~<sys/uc⁄ãxt.h
>

366 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

367 
__THROW
 
__©åibuã_dïªˇãd__
;

371 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

372 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

376 #ifde‡
__USE_XOPEN_EXTENDED


380 
	$sighﬁd
 (
__sig
Ë
__THROW
;

383 
	$sigªl£
 (
__sig
Ë
__THROW
;

386 
	$sigign‹e
 (
__sig
Ë
__THROW
;

389 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

392 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


395 
	~<bôs/±hªadty≥s.h
>

396 
	~<bôs/sigthªad.h
>

403 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

405 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

409 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

146 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


148 #i‡
__WORDSIZE
 == 64

149 
	#__INT64_C
(
c
Ë¯## 
L


	)

150 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

152 
	#__INT64_C
(
c
Ë¯## 
LL


	)

153 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

159 
	#INT8_MIN
 (-128)

	)

160 
	#INT16_MIN
 (-32767-1)

	)

161 
	#INT32_MIN
 (-2147483647-1)

	)

162 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

164 
	#INT8_MAX
 (127)

	)

165 
	#INT16_MAX
 (32767)

	)

166 
	#INT32_MAX
 (2147483647)

	)

167 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

170 
	#UINT8_MAX
 (255)

	)

171 
	#UINT16_MAX
 (65535)

	)

172 
	#UINT32_MAX
 (4294967295U)

	)

173 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

177 
	#INT_LEAST8_MIN
 (-128)

	)

178 
	#INT_LEAST16_MIN
 (-32767-1)

	)

179 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

180 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

182 
	#INT_LEAST8_MAX
 (127)

	)

183 
	#INT_LEAST16_MAX
 (32767)

	)

184 
	#INT_LEAST32_MAX
 (2147483647)

	)

185 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

188 
	#UINT_LEAST8_MAX
 (255)

	)

189 
	#UINT_LEAST16_MAX
 (65535)

	)

190 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

191 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 
	#INT_FAST8_MIN
 (-128)

	)

196 #i‡
__WORDSIZE
 == 64

197 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

198 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

200 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

201 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

203 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

205 
	#INT_FAST8_MAX
 (127)

	)

206 #i‡
__WORDSIZE
 == 64

207 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

208 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

210 
	#INT_FAST16_MAX
 (2147483647)

	)

211 
	#INT_FAST32_MAX
 (2147483647)

	)

213 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

216 
	#UINT_FAST8_MAX
 (255)

	)

217 #i‡
__WORDSIZE
 == 64

218 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

219 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

221 
	#UINT_FAST16_MAX
 (4294967295U)

	)

222 
	#UINT_FAST32_MAX
 (4294967295U)

	)

224 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

228 #i‡
__WORDSIZE
 == 64

229 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

230 
	#INTPTR_MAX
 (9223372036854775807L)

	)

231 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

233 
	#INTPTR_MIN
 (-2147483647-1)

	)

234 
	#INTPTR_MAX
 (2147483647)

	)

235 
	#UINTPTR_MAX
 (4294967295U)

	)

240 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

242 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

245 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

251 #i‡
__WORDSIZE
 == 64

252 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

253 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

255 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

256 
	#PTRDIFF_MAX
 (2147483647)

	)

260 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

261 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

264 #i‡
__WORDSIZE
 == 64

265 
	#SIZE_MAX
 (18446744073709551615UL)

	)

267 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

286 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


289 
	#INT8_C
(
c
Ë
	)
c

290 
	#INT16_C
(
c
Ë
	)
c

291 
	#INT32_C
(
c
Ë
	)
c

292 #i‡
__WORDSIZE
 == 64

293 
	#INT64_C
(
c
Ë¯## 
L


	)

295 
	#INT64_C
(
c
Ë¯## 
LL


	)

299 
	#UINT8_C
(
c
Ë
	)
c

300 
	#UINT16_C
(
c
Ë
	)
c

301 
	#UINT32_C
(
c
Ë¯## 
U


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#UINT64_C
(
c
Ë¯## 
UL


	)

305 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

309 #i‡
__WORDSIZE
 == 64

310 
	#INTMAX_C
(
c
Ë¯## 
L


	)

311 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

313 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

314 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__a
;

422 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

423 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

424 
	$î™d48_r
 (
__xsubi
[3],

425 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

426 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

430 *
__ª°ri˘
 
__ªsu…
)

431 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

432 
	$ƒ™d48_r
 (
__xsubi
[3],

433 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

434 *
__ª°ri˘
 
__ªsu…
)

435 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

441 
	$jønd48_r
 (
__xsubi
[3],

442 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

443 *
__ª°ri˘
 
__ªsu…
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 
	$£ed48_r
 (
__£ed16v
[3],

451 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$lc⁄g48_r
 (
__∑øm
[7],

454 
dønd48_d©a
 *
__buf„r
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

461 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


462 
	#__mÆloc_™d_ˇŒoc_deföed


	)

463 
__BEGIN_NAMESPACE_STD


465 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

467 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

468 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

469 
__END_NAMESPACE_STD


472 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


473 
__BEGIN_NAMESPACE_STD


479 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

480 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

482 
	$‰ì
 (*
__±r
Ë
__THROW
;

483 
__END_NAMESPACE_STD


485 #ifdef 
__USE_MISC


487 
	$c‰ì
 (*
__±r
Ë
__THROW
;

490 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


491 
	~<Æloˇ.h
>

494 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

495 || 
deföed
 
__USE_BSD


497 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

500 #ifde‡
__USE_XOPEN2K


502 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

503 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

506 #ifde‡
__USE_ISOC11


508 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


522 #ifde‡
__˝lu•lus


523 "C++" 
	`©_quick_exô
 ((*
__func
) ())

524 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

526 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

529 
__END_NAMESPACE_STD


531 #ifdef 
__USE_MISC


534 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

535 
__THROW
 
	`__n⁄nuŒ
 ((1));

538 
__BEGIN_NAMESPACE_STD


542 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

544 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


548 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

550 
__END_NAMESPACE_STD


552 #ifde‡
__USE_ISOC99


553 
__BEGIN_NAMESPACE_C99


556 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

557 
__END_NAMESPACE_C99


561 
__BEGIN_NAMESPACE_STD


563 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

564 
__END_NAMESPACE_STD


566 #ifde‡
__USE_GNU


569 *
	$£cuª_gëív
 (c⁄° *
__«me
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

573 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


577 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

580 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


583 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

584 
__THROW
 
	`__n⁄nuŒ
 ((2));

587 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 #ifdef 
__USE_MISC


594 
	$˛óªnv
 (Ë
__THROW
;

598 #i‡
deföed
 
__USE_MISC
 \

599 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

605 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

609 || 
deföed
 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

760 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

761 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

762 #ifde‡
__USE_GNU


763 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

765 
	`__n⁄nuŒ
 ((1, 4));

770 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

771 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
__END_NAMESPACE_STD


774 #ifde‡
__USE_ISOC99


775 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

776 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

780 
__BEGIN_NAMESPACE_STD


784 
div_t
 
	$div
 (
__numî
, 
__díom
)

785 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

787 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_ISOC99


791 
__BEGIN_NAMESPACE_C99


792 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

793 
__díom
)

794 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__END_NAMESPACE_C99


799 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

800 || 
deföed
 
__USE_SVID


807 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

808 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

813 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

814 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

819 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

820 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

823 #ifde‡
__USE_MISC


825 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

826 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

828 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

838 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

839 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

840 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

845 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

846 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

847 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

856 
__BEGIN_NAMESPACE_STD


859 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

862 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

863 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

866 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

870 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

871 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

874 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

875 
__THROW
;

876 
__END_NAMESPACE_STD


879 #ifde‡
__USE_SVID


884 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

888 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


895 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

896 *c⁄° *
__ª°ri˘
 
__tokís
,

897 **
__ª°ri˘
 
__vÆuï
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

902 #ifde‡
__USE_XOPEN


904 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2KXSI


912 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

915 #ifde‡
__USE_XOPEN


920 
	$gø¡±
 (
__fd
Ë
__THROW
;

924 
	$u∆ock±
 (
__fd
Ë
__THROW
;

929 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

932 #ifde‡
__USE_GNU


936 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

937 
__THROW
 
	`__n⁄nuŒ
 ((2));

940 
	`gë±
 ();

943 #ifde‡
__USE_BSD


947 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

951 
	~<bôs/°dlib-Êﬂt.h
>

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

31 || 
deföed
 
	g__USE_ATFILE


32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

35 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


36 
	#__√ed_time•ec


	)

38 
	~<time.h
>

41 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


44 #i‚de‡
__dev_t_deföed


45 
__dev_t
 
	tdev_t
;

46 
	#__dev_t_deföed


	)

49 #i‚de‡
__gid_t_deföed


50 
__gid_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

54 #i‚de‡
__öo_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__öo_t
 
	töo_t
;

58 
__öo64_t
 
	töo_t
;

60 
	#__öo_t_deföed


	)

63 #i‚de‡
__mode_t_deföed


64 
__mode_t
 
	tmode_t
;

65 
	#__mode_t_deföed


	)

68 #i‚de‡
__∆ök_t_deföed


69 
__∆ök_t
 
	t∆ök_t
;

70 
	#__∆ök_t_deföed


	)

73 #i‚de‡
__off_t_deföed


74 #i‚de‡
__USE_FILE_OFFSET64


75 
__off_t
 
	toff_t
;

77 
__off64_t
 
	toff_t
;

79 
	#__off_t_deföed


	)

82 #i‚de‡
__uid_t_deföed


83 
__uid_t
 
	tuid_t
;

84 
	#__uid_t_deföed


	)

88 #ifde‡
__USE_UNIX98


89 #i‚de‡
__blk˙t_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__blk˙t_t
 
	tblk˙t_t
;

93 
__blk˙t64_t
 
	tblk˙t_t
;

95 
	#__blk˙t_t_deföed


	)

98 #i‚de‡
__blksize_t_deföed


99 
__blksize_t
 
	tblksize_t
;

100 
	#__blksize_t_deföed


	)

104 
	g__BEGIN_DECLS


106 
	~<bôs/°©.h
>

108 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


109 
	#S_IFMT
 
__S_IFMT


	)

110 
	#S_IFDIR
 
__S_IFDIR


	)

111 
	#S_IFCHR
 
__S_IFCHR


	)

112 
	#S_IFBLK
 
__S_IFBLK


	)

113 
	#S_IFREG
 
__S_IFREG


	)

114 #ifde‡
__S_IFIFO


115 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifde‡
__S_IFLNK


118 
	#S_IFLNK
 
__S_IFLNK


	)

120 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

121 && 
deföed
 
	g__S_IFSOCK


122 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

130 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifde‡
__S_IFIFO


135 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifde‡
__S_IFLNK


138 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

145 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

146 && 
deföed
 
	g__S_IFSOCK


147 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #ñi‡
deföed
 
__USE_XOPEN2K


149 
	#S_ISSOCK
(
mode
Ë0

	)

156 #ifdef 
__USE_POSIX199309


157 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

158 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

159 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

165 
	#S_ISUID
 
__S_ISUID


	)

166 
	#S_ISGID
 
__S_ISGID


	)

168 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


170 
	#S_ISVTX
 
__S_ISVTX


	)

173 
	#S_IRUSR
 
__S_IREAD


	)

174 
	#S_IWUSR
 
__S_IWRITE


	)

175 
	#S_IXUSR
 
__S_IEXEC


	)

177 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


180 
	#S_IREAD
 
S_IRUSR


	)

181 
	#S_IWRITE
 
S_IWUSR


	)

182 
	#S_IEXEC
 
S_IXUSR


	)

185 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

186 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

187 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

189 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

192 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

193 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

195 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

201 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 
	#S_BLKSIZE
 512

	)

208 #i‚de‡
__USE_FILE_OFFSET64


210 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

211 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

215 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

219 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

220 
	`__n⁄nuŒ
 ((1, 2));

221 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

222 
	`__n⁄nuŒ
 ((2));

224 
	#°©
 
°©64


	)

225 
	#f°©
 
f°©64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

230 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

231 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

234 #ifde‡
__USE_ATFILE


238 #i‚de‡
__USE_FILE_OFFSET64


239 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

243 #ifde‡
__REDIRECT_NTH


244 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

245 
°©
 *
__ª°ri˘
 
__buf
,

246 
__Êag
),

247 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

249 
	#f°©©
 
f°©©64


	)

253 #ifde‡
__USE_LARGEFILE64


254 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

255 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

256 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

260 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


261 #i‚de‡
__USE_FILE_OFFSET64


264 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

267 #ifde‡
__REDIRECT_NTH


268 
	`__REDIRECT_NTH
 (
l°©
,

269 (c⁄° *
__ª°ri˘
 
__fûe
,

270 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 
	#l°©
 
l°©64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

278 
°©64
 *
__ª°ri˘
 
__buf
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

285 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1));

288 #ifde‡
__USE_BSD


292 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


298 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

301 #ifde‡
__USE_ATFILE


304 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

305 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

315 #ifdef 
__USE_GNU


318 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

322 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

325 #ifde‡
__USE_ATFILE


329 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__n⁄nuŒ
 ((2));

336 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


337 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 #ifde‡
__USE_ATFILE


344 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

351 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 #ifde‡
__USE_ATFILE


358 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2));

362 #ifde‡
__USE_ATFILE


365 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

366 c⁄° 
time•ec
 
__times
[2],

367 
__Êags
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #ifde‡
__USE_XOPEN2K8


373 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

391 #i‚de‡
_STAT_VER


392 
	#_STAT_VER
 0

	)

394 #i‚de‡
_MKNOD_VER


395 
	#_MKNOD_VER
 0

	)

399 #i‚de‡
__USE_FILE_OFFSET64


400 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

401 
__THROW
 
	`__n⁄nuŒ
 ((3));

402 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

406 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

407 
°©
 *
__°©_buf
, 
__Êag
)

408 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

410 #ifde‡
__REDIRECT_NTH


411 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

412 
°©
 *
__°©_buf
), 
__fx°©64
)

413 
	`__n⁄nuŒ
 ((3));

414 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__x°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

418 
°©
 *
__°©_buf
), 
__lx°©64
)

419 
	`__n⁄nuŒ
 ((2, 3));

420 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

421 c⁄° *
__fûíame
,

422 
°©
 *
__°©_buf
, 
__Êag
),

423 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

426 
	#__fx°©
 
__fx°©64


	)

427 
	#__x°©
 
__x°©64


	)

428 
	#__lx°©
 
__lx°©64


	)

432 #ifde‡
__USE_LARGEFILE64


433 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

439 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

440 
°©64
 *
__°©_buf
, 
__Êag
)

441 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

443 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

450 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


453 
__exã∫_ölöe
 

454 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

456  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

457 
	}
}

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


460 
__exã∫_ölöe
 

461 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

463  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

464 
	}
}

467 
__exã∫_ölöe
 

468 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

470  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

471 
	}
}

473 #ifde‡
__USE_ATFILE


474 
__exã∫_ölöe
 

475 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

476 
__Êag
))

478  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

479 
	}
}

482 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


483 
__exã∫_ölöe
 

484 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifde‡
__USE_ATFILE


491 
__exã∫_ölöe
 

492 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

496 
	}
}

499 #i‡
deföed
 
__USE_LARGEFILE64
 \

500 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

501 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

502 
__exã∫_ölöe
 

503 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

505  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

506 
	}
}

508 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


509 
__exã∫_ölöe
 

510 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

512  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

513 
	}
}

516 
__exã∫_ölöe
 

517 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

519  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

520 
	}
}

522 #ifde‡
__USE_ATFILE


523 
__exã∫_ölöe
 

524 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

525 
__Êag
))

527  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_time_t


	)

26 
	~<time.h
>

27 
	#__√ed_timevÆ


	)

28 
	~<bôs/time.h
>

30 
	~<sys/£À˘.h
>

32 #i‚de‡
__su£c⁄ds_t_deföed


33 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

34 
	#__su£c⁄ds_t_deföed


	)

38 
	g__BEGIN_DECLS


40 #ifde‡
__USE_GNU


42 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 }

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

47 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

48 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

49 }

	)

53 #ifde‡
__USE_BSD


56 
	stimez⁄e


58 
	mtz_möuãswe°
;

59 
	mtz_d°time
;

62 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

64 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

72 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

73 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__USE_BSD


78 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

79 c⁄° 
timez⁄e
 *
__tz
)

80 
__THROW
;

86 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

87 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

92 
	e__ôimî_which


95 
ITIMER_REAL
 = 0,

96 
	#ITIMER_REAL
 
ITIMER_REAL


	)

98 
ITIMER_VIRTUAL
 = 1,

99 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

102 
ITIMER_PROF
 = 2

103 
	#ITIMER_PROF
 
ITIMER_PROF


	)

108 
	sôimîvÆ


111 
timevÆ
 
ô_öãrvÆ
;

113 
timevÆ
 
ô_vÆue
;

116 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


119 
__ôimî_which
 
	t__ôimî_which_t
;

121 
	t__ôimî_which_t
;

126 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

127 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

132 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

133 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

134 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

139 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

140 
__THROW
 
	`__n⁄nuŒ
 ((1));

142 #ifde‡
__USE_BSD


144 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

145 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

151 #ifde‡
__USE_GNU


155 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

156 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

160 #ifde‡
__USE_BSD


163 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

164 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

165 
	#timîcmp
(
a
, 
b
, 
CMP
) \

166 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

167 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

168 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

169 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

171 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

172 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

173 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

175 ++(
ªsu…
)->
tv_£c
; \

176 (
ªsu…
)->
tv_u£c
 -= 1000000; \

178 
	}
} 0)

	)

179 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

181 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

182 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

183 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

184 --(
ªsu…
)->
tv_£c
; \

185 (
ªsu…
)->
tv_u£c
 += 1000000; \

187 } 0)

	)

190 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/wait.h

23 #i‚def 
_SYS_WAIT_H


24 
	#_SYS_WAIT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<sig«l.h
>

33 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

36 
	~<bôs/waôÊags.h
>

38 #ifdef 
__USE_BSD


43 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


44 
	#__WAIT_INT
(
°©us
) \

45 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

46 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

48 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

56 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


57 
	#__WAIT_STATUS
 *

	)

58 
	#__WAIT_STATUS_DEFN
 *

	)

63 
waô
 *
	m__u±r
;

64 *
	m__ùå
;

65 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

66 
	#__WAIT_STATUS_DEFN
 *

	)

71 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

72 
	#__WAIT_STATUS
 *

	)

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	~<bôs/waô°©us.h
>

80 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

86 #ifde‡
__WIFCONTINUED


87 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifdef 
__USE_BSD


92 
	#WCOREFLAG
 
__WCOREFLAG


	)

93 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

94 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

95 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

99 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


102 
	mP_ALL
,

103 
	mP_PID
,

104 
	mP_PGID


105 } 
	tidty≥_t
;

114 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

116 #ifdef 
__USE_BSD


118 
	#WAIT_ANY
 (-1Ë

	)

119 
	#WAIT_MYPGRP
 0

	)

137 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

139 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


140 #i‚de‡
__id_t_deföed


141 
	~<bôs/ty≥s.h
>

142 
__id_t
 
	tid_t
;

143 
	#__id_t_deföed


	)

146 
	#__√ed_sigöfo_t


	)

147 
	~<bôs/sigöfo.h
>

160 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

161 
__›ti⁄s
);

164 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


167 
	grußge
;

174 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

175 
rußge
 * 
__ußge
Ë
__THROWNL
;

178 #ifde‡
__USE_BSD


180 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

181 
rußge
 *
__ußge
Ë
__THROWNL
;

185 
__END_DECLS


	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/error.h

19 #i‚def 
_ERROR_H


24 
__REDIRECT
 (
__îr‹_Æüs
, (
__°©us
, 
__î∫um
,

25 c⁄° *
__f‹m©
, ...),

26 
îr‹
)

27 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4)));

28 
__REDIRECT
 (
__îr‹_n‹ëu∫
, (
__°©us
, 
__î∫um
,

29 c⁄° *
__f‹m©
, ...),

30 
îr‹
)

31 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 3, 4)));

36 
__exã∫_Æways_ölöe
 

37 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

39 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

40 
	`__îr‹_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

42 
	`__îr‹_Æüs
 (
__°©us
, 
__î∫um
, 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

43 
	}
}

46 
__REDIRECT
 (
__îr‹_©_löe_Æüs
, (
__°©us
, 
__î∫um
,

47 c⁄° *
__‚ame
,

48 
__löe
,

49 c⁄° *
__f‹m©
, ...),

50 
îr‹_©_löe
)

51 
__©åibuã__
 ((
__f‹m©__
 (
__¥ötf__
, 5, 6)));

52 
__REDIRECT
 (
__îr‹_©_löe_n‹ëu∫
, (
__°©us
, 
__î∫um
,

53 c⁄° *
__‚ame
,

54 
__löe
,

55 c⁄° *
__f‹m©
,

57 
îr‹_©_löe
)

58 
__©åibuã__
 ((
__n‹ëu∫__
, 
__f‹m©__
 (
__¥ötf__
, 5, 6)));

63 
__exã∫_Æways_ölöe
 

64 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

65 
__löe
, c⁄° *
__f‹m©
, ...)

67 i‡(
	`__buûtö_c⁄°™t_p
 (
__°©us
) && __status != 0)

68 
	`__îr‹_©_löe_n‹ëu∫
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
, 
__f‹m©
,

69 
	`__va_¨g_∑ck
 ());

71 
	`__îr‹_©_löe_Æüs
 (
__°©us
, 
__î∫um
, 
__‚ame
, 
__löe
,

72 
__f‹m©
, 
	`__va_¨g_∑ck
 ());

73 
	}
}

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


27 
	#IP_OPTIONS
 4

	)

28 
	#IP_HDRINCL
 3

	)

29 
	#IP_TOS
 1

	)

30 
	#IP_TTL
 2

	)

31 
	#IP_RECVOPTS
 6

	)

33 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

34 
	#IP_RETOPTS
 7

	)

35 
	#IP_MULTICAST_IF
 32

	)

36 
	#IP_MULTICAST_TTL
 33

	)

37 
	#IP_MULTICAST_LOOP
 34

	)

38 
	#IP_ADD_MEMBERSHIP
 35

	)

39 
	#IP_DROP_MEMBERSHIP
 36

	)

40 
	#IP_UNBLOCK_SOURCE
 37

	)

41 
	#IP_BLOCK_SOURCE
 38

	)

42 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

43 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

44 
	#IP_MSFILTER
 41

	)

45 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


46 
	#MCAST_JOIN_GROUP
 42

	)

47 
	#MCAST_BLOCK_SOURCE
 43

	)

48 
	#MCAST_UNBLOCK_SOURCE
 44

	)

49 
	#MCAST_LEAVE_GROUP
 45

	)

50 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

51 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

52 
	#MCAST_MSFILTER
 48

	)

53 
	#IP_MULTICAST_ALL
 49

	)

54 
	#IP_UNICAST_IF
 50

	)

56 
	#MCAST_EXCLUDE
 0

	)

57 
	#MCAST_INCLUDE
 1

	)

60 
	#IP_ROUTER_ALERT
 5

	)

61 
	#IP_PKTINFO
 8

	)

62 
	#IP_PKTOPTIONS
 9

	)

63 
	#IP_PMTUDISC
 10

	)

64 
	#IP_MTU_DISCOVER
 10

	)

65 
	#IP_RECVERR
 11

	)

66 
	#IP_RECVTTL
 12

	)

67 
	#IP_RECVTOS
 13

	)

68 
	#IP_MTU
 14

	)

69 
	#IP_FREEBIND
 15

	)

70 
	#IP_IPSEC_POLICY
 16

	)

71 
	#IP_XFRM_POLICY
 17

	)

72 
	#IP_PASSSEC
 18

	)

73 
	#IP_TRANSPARENT
 19

	)

74 
	#IP_MULTICAST_ALL
 49

	)

77 
	#IP_ORIGDSTADDR
 20

	)

78 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

80 
	#IP_MINTTL
 21

	)

84 
	#IP_PMTUDISC_DONT
 0

	)

85 
	#IP_PMTUDISC_WANT
 1

	)

86 
	#IP_PMTUDISC_DO
 2

	)

87 
	#IP_PMTUDISC_PROBE
 3

	)

90 
	#SOL_IP
 0

	)

92 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

93 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

94 
	#IP_MAX_MEMBERSHIPS
 20

	)

96 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


100 
	sù_›ts


102 
ö_addr
 
	mù_d°
;

103 
	mù_›ts
[40];

107 
	sù_mªqn


109 
ö_addr
 
	mimr_mu…üddr
;

110 
ö_addr
 
	mimr_addªss
;

111 
	mimr_ifödex
;

115 
	sö_pktöfo


117 
	mùi_ifödex
;

118 
ö_addr
 
	mùi_•ec_d°
;

119 
ö_addr
 
	mùi_addr
;

126 
	#IPV6_ADDRFORM
 1

	)

127 
	#IPV6_2292PKTINFO
 2

	)

128 
	#IPV6_2292HOPOPTS
 3

	)

129 
	#IPV6_2292DSTOPTS
 4

	)

130 
	#IPV6_2292RTHDR
 5

	)

131 
	#IPV6_2292PKTOPTIONS
 6

	)

132 
	#IPV6_CHECKSUM
 7

	)

133 
	#IPV6_2292HOPLIMIT
 8

	)

135 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

137 
	#IPV6_NEXTHOP
 9

	)

138 
	#IPV6_AUTHHDR
 10

	)

139 
	#IPV6_UNICAST_HOPS
 16

	)

140 
	#IPV6_MULTICAST_IF
 17

	)

141 
	#IPV6_MULTICAST_HOPS
 18

	)

142 
	#IPV6_MULTICAST_LOOP
 19

	)

143 
	#IPV6_JOIN_GROUP
 20

	)

144 
	#IPV6_LEAVE_GROUP
 21

	)

145 
	#IPV6_ROUTER_ALERT
 22

	)

146 
	#IPV6_MTU_DISCOVER
 23

	)

147 
	#IPV6_MTU
 24

	)

148 
	#IPV6_RECVERR
 25

	)

149 
	#IPV6_V6ONLY
 26

	)

150 
	#IPV6_JOIN_ANYCAST
 27

	)

151 
	#IPV6_LEAVE_ANYCAST
 28

	)

152 
	#IPV6_IPSEC_POLICY
 34

	)

153 
	#IPV6_XFRM_POLICY
 35

	)

155 
	#IPV6_RECVPKTINFO
 49

	)

156 
	#IPV6_PKTINFO
 50

	)

157 
	#IPV6_RECVHOPLIMIT
 51

	)

158 
	#IPV6_HOPLIMIT
 52

	)

159 
	#IPV6_RECVHOPOPTS
 53

	)

160 
	#IPV6_HOPOPTS
 54

	)

161 
	#IPV6_RTHDRDSTOPTS
 55

	)

162 
	#IPV6_RECVRTHDR
 56

	)

163 
	#IPV6_RTHDR
 57

	)

164 
	#IPV6_RECVDSTOPTS
 58

	)

165 
	#IPV6_DSTOPTS
 59

	)

167 
	#IPV6_RECVTCLASS
 66

	)

168 
	#IPV6_TCLASS
 67

	)

171 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

172 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

173 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

174 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

177 
	#IPV6_PMTUDISC_DONT
 0

	)

178 
	#IPV6_PMTUDISC_WANT
 1

	)

179 
	#IPV6_PMTUDISC_DO
 2

	)

180 
	#IPV6_PMTUDISC_PROBE
 3

	)

183 
	#SOL_IPV6
 41

	)

184 
	#SOL_ICMPV6
 58

	)

187 
	#IPV6_RTHDR_LOOSE
 0

	)

188 
	#IPV6_RTHDR_STRICT
 1

	)

190 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 
	#MAP_ANONYMOUS
 0x20

	)

53 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

54 
	#MAP_32BIT
 0x40

	)

58 #ifde‡
__USE_MISC


59 
	#MAP_GROWSDOWN
 0x00100

	)

60 
	#MAP_DENYWRITE
 0x00800

	)

61 
	#MAP_EXECUTABLE
 0x01000

	)

62 
	#MAP_LOCKED
 0x02000

	)

63 
	#MAP_NORESERVE
 0x04000

	)

64 
	#MAP_POPULATE
 0x08000

	)

65 
	#MAP_NONBLOCK
 0x10000

	)

66 
	#MAP_STACK
 0x20000

	)

67 
	#MAP_HUGETLB
 0x40000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HUGEPAGE
 14

	)

99 
	#MADV_NOHUGEPAGE
 15

	)

100 
	#MADV_DONTDUMP
 16

	)

102 
	#MADV_DODUMP
 17

	)

103 
	#MADV_HWPOISON
 100

	)

107 #ifde‡
__USE_XOPEN2K


108 
	#POSIX_MADV_NORMAL
 0

	)

109 
	#POSIX_MADV_RANDOM
 1

	)

110 
	#POSIX_MADV_SEQUENTIAL
 2

	)

111 
	#POSIX_MADV_WILLNEED
 3

	)

112 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
__±hªad_li°_t
 
	m__li°
;

106 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	m__nu£rs
;

109 
__exãnsi⁄__
 union

111 
	m__•ös
;

112 
__±hªad_¶i°_t
 
	m__li°
;

115 } 
	m__d©a
;

116 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

117 
	m__Æign
;

118 } 
	t±hªad_muãx_t
;

122 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

123 
	m__Æign
;

124 } 
	t±hªad_muãx©å_t
;

133 
	m__lock
;

134 
	m__fuãx
;

135 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

136 
__exãnsi⁄__
 
	m__wakeup_£q
;

137 
__exãnsi⁄__
 
	m__wokí_£q
;

138 *
	m__muãx
;

139 
	m__nwaôîs
;

140 
	m__brﬂdˇ°_£q
;

141 } 
	m__d©a
;

142 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

143 
__exãnsi⁄__
 
	m__Æign
;

144 } 
	t±hªad_c⁄d_t
;

148 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

149 
	m__Æign
;

150 } 
	t±hªad_c⁄d©å_t
;

154 
	t±hªad_key_t
;

158 
	t±hªad_⁄˚_t
;

161 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


166 #ifde‡
__x86_64__


169 
	m__lock
;

170 
	m__ƒ_ªadîs
;

171 
	m__ªadîs_wakeup
;

172 
	m__wrôî_wakeup
;

173 
	m__ƒ_ªadîs_queued
;

174 
	m__ƒ_wrôîs_queued
;

175 
	m__wrôî
;

176 
	m__sh¨ed
;

177 
	m__∑d1
;

178 
	m__∑d2
;

181 
	m__Êags
;

182 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

183 } 
	m__d©a
;

187 
	m__lock
;

188 
	m__ƒ_ªadîs
;

189 
	m__ªadîs_wakeup
;

190 
	m__wrôî_wakeup
;

191 
	m__ƒ_ªadîs_queued
;

192 
	m__ƒ_wrôîs_queued
;

195 
	m__Êags
;

196 
	m__sh¨ed
;

197 
	m__∑d1
;

198 
	m__∑d2
;

199 
	m__wrôî
;

200 } 
	m__d©a
;

202 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

203 
	m__Æign
;

204 } 
	t±hªad_rwlock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

209 
	m__Æign
;

210 } 
	t±hªad_rwlock©å_t
;

214 #ifde‡
__USE_XOPEN2K


216 vﬁ©ûê
	t±hªad_•ölock_t
;

223 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

224 
	m__Æign
;

225 } 
	t±hªad_b¨rõr_t
;

229 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

230 
	m__Æign
;

231 } 
	t±hªad_b¨rõøâr_t
;

235 #i‚de‡
__x86_64__


237 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 } 
_sigÁu…
;

115 
si_b™d
;

116 
si_fd
;

117 } 
_sigpﬁl
;

122 *
_ˇŒ_addr
;

123 
_sysˇŒ
;

124 
_¨ch
;

125 } 
_sigsys
;

126 } 
_sifõlds
;

127 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

131 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

132 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

133 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

134 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

135 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

136 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

137 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

138 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

139 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

140 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

141 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

142 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

143 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

144 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

145 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

146 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

153 
SI_ASYNCNL
 = -60,

154 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

155 
SI_TKILL
 = -6,

156 
	#SI_TKILL
 
SI_TKILL


	)

157 
SI_SIGIO
,

158 
	#SI_SIGIO
 
SI_SIGIO


	)

159 
SI_ASYNCIO
,

160 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

161 
SI_MESGQ
,

162 
	#SI_MESGQ
 
SI_MESGQ


	)

163 
SI_TIMER
,

164 
	#SI_TIMER
 
SI_TIMER


	)

165 
SI_QUEUE
,

166 
	#SI_QUEUE
 
SI_QUEUE


	)

167 
SI_USER
,

168 
	#SI_USER
 
SI_USER


	)

169 
SI_KERNEL
 = 0x80

170 
	#SI_KERNEL
 
SI_KERNEL


	)

177 
ILL_ILLOPC
 = 1,

178 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

179 
ILL_ILLOPN
,

180 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

181 
ILL_ILLADR
,

182 
	#ILL_ILLADR
 
ILL_ILLADR


	)

183 
ILL_ILLTRP
,

184 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

185 
ILL_PRVOPC
,

186 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

187 
ILL_PRVREG
,

188 
	#ILL_PRVREG
 
ILL_PRVREG


	)

189 
ILL_COPROC
,

190 
	#ILL_COPROC
 
ILL_COPROC


	)

191 
ILL_BADSTK


192 
	#ILL_BADSTK
 
ILL_BADSTK


	)

198 
FPE_INTDIV
 = 1,

199 
	#FPE_INTDIV
 
FPE_INTDIV


	)

200 
FPE_INTOVF
,

201 
	#FPE_INTOVF
 
FPE_INTOVF


	)

202 
FPE_FLTDIV
,

203 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

204 
FPE_FLTOVF
,

205 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

206 
FPE_FLTUND
,

207 
	#FPE_FLTUND
 
FPE_FLTUND


	)

208 
FPE_FLTRES
,

209 
	#FPE_FLTRES
 
FPE_FLTRES


	)

210 
FPE_FLTINV
,

211 
	#FPE_FLTINV
 
FPE_FLTINV


	)

212 
FPE_FLTSUB


213 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

219 
SEGV_MAPERR
 = 1,

220 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

221 
SEGV_ACCERR


222 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

228 
BUS_ADRALN
 = 1,

229 
	#BUS_ADRALN
 
BUS_ADRALN


	)

230 
BUS_ADRERR
,

231 
	#BUS_ADRERR
 
BUS_ADRERR


	)

232 
BUS_OBJERR


233 
	#BUS_OBJERR
 
BUS_OBJERR


	)

239 
TRAP_BRKPT
 = 1,

240 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

241 
TRAP_TRACE


242 
	#TRAP_TRACE
 
TRAP_TRACE


	)

248 
CLD_EXITED
 = 1,

249 
	#CLD_EXITED
 
CLD_EXITED


	)

250 
CLD_KILLED
,

251 
	#CLD_KILLED
 
CLD_KILLED


	)

252 
CLD_DUMPED
,

253 
	#CLD_DUMPED
 
CLD_DUMPED


	)

254 
CLD_TRAPPED
,

255 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

256 
CLD_STOPPED
,

257 
	#CLD_STOPPED
 
CLD_STOPPED


	)

258 
CLD_CONTINUED


259 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

265 
POLL_IN
 = 1,

266 
	#POLL_IN
 
POLL_IN


	)

267 
POLL_OUT
,

268 
	#POLL_OUT
 
POLL_OUT


	)

269 
POLL_MSG
,

270 
	#POLL_MSG
 
POLL_MSG


	)

271 
POLL_ERR
,

272 
	#POLL_ERR
 
POLL_ERR


	)

273 
POLL_PRI
,

274 
	#POLL_PRI
 
POLL_PRI


	)

275 
POLL_HUP


276 
	#POLL_HUP
 
POLL_HUP


	)

279 #unde‡
__√ed_sigöfo_t


283 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

284 && !
deföed
 
__have_sigevít_t


285 
	#__have_sigevít_t
 1

	)

288 
	#__SIGEV_MAX_SIZE
 64

	)

289 #i‡
__WORDSIZE
 == 64

290 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

292 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

296 #i‚de‡
__have_±hªad_©å_t


297 
±hªad_©å_t
 
	t±hªad_©å_t
;

298 
	#__have_±hªad_©å_t
 1

	)

301 
	ssigevít


303 
sigvÆ_t
 
sigev_vÆue
;

304 
sigev_signo
;

305 
sigev_nŸify
;

309 
_∑d
[
__SIGEV_PAD_SIZE
];

313 
__pid_t
 
_tid
;

317 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

318 
±hªad_©å_t
 *
_©åibuã
;

319 } 
_sigev_thªad
;

320 } 
_sigev_un
;

321 } 
	tsigevít_t
;

324 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

325 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

330 
SIGEV_SIGNAL
 = 0,

331 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

332 
SIGEV_NONE
,

333 
	#SIGEV_NONE
 
SIGEV_NONE


	)

334 
SIGEV_THREAD
,

335 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

337 
SIGEV_THREAD_ID
 = 4

338 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_BSD


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

201 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

329 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

330 #i‡
_FORTIFY_SOURCE
 > 1

331 
	#__USE_FORTIFY_LEVEL
 2

	)

333 
	#__USE_FORTIFY_LEVEL
 1

	)

336 
	#__USE_FORTIFY_LEVEL
 0

	)

341 
	~<°dc-¥edef.h
>

349 #unde‡
__GNU_LIBRARY__


350 
	#__GNU_LIBRARY__
 6

	)

354 
	#__GLIBC__
 2

	)

355 
	#__GLIBC_MINOR__
 17

	)

357 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

358 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

361 #i‡
deföed
 
__GNUC__
 \

362 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

363 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

364 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

365 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

369 #i‚de‡
__ASSEMBLER__


370 #i‚de‡
_SYS_CDEFS_H


371 
	~<sys/cdefs.h
>

376 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


377 
	#__USE_LARGEFILE
 1

	)

378 
	#__USE_LARGEFILE64
 1

	)

384 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

385 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

386 && 
deföed
 
	g__exã∫_ölöe


387 
	#__USE_EXTERN_INLINES
 1

	)

395 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_Âos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

36 
	#_IO_size_t
 
size_t


	)

37 
	#_IO_ssize_t
 
__ssize_t


	)

38 
	#_IO_off_t
 
__off_t


	)

39 
	#_IO_off64_t
 
__off64_t


	)

40 
	#_IO_pid_t
 
__pid_t


	)

41 
	#_IO_uid_t
 
__uid_t


	)

42 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

43 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 
	#_IO_va_li°
 
_G_va_li°


	)

46 
	#_IO_wöt_t
 
wöt_t


	)

49 
	#__√ed___va_li°


	)

50 
	~<°d¨g.h
>

51 #ifde‡
__GNUC_VA_LIST


52 #unde‡
_IO_va_li°


53 
	#_IO_va_li°
 
__gnuc_va_li°


	)

56 #i‚de‡
__P


57 
	~<sys/cdefs.h
>

60 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #i‚de‡
EOF


63 
	#EOF
 (-1)

	)

65 #i‚de‡
NULL


66 #i‡
deföed
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

68 
	#NULL
 (
__nuŒ
)

	)

70 #i‡!
deföed
(
__˝lu•lus
)

71 
	#NULL
 ((*)0)

	)

73 
	#NULL
 (0)

	)

78 
	#_IOS_INPUT
 1

	)

79 
	#_IOS_OUTPUT
 2

	)

80 
	#_IOS_ATEND
 4

	)

81 
	#_IOS_APPEND
 8

	)

82 
	#_IOS_TRUNC
 16

	)

83 
	#_IOS_NOCREATE
 32

	)

84 
	#_IOS_NOREPLACE
 64

	)

85 
	#_IOS_BIN
 128

	)

93 
	#_IO_MAGIC
 0xFBAD0000

	)

94 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 
	#_IO_USER_BUF
 1

	)

97 
	#_IO_UNBUFFERED
 2

	)

98 
	#_IO_NO_READS
 4

	)

99 
	#_IO_NO_WRITES
 8

	)

100 
	#_IO_EOF_SEEN
 0x10

	)

101 
	#_IO_ERR_SEEN
 0x20

	)

102 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 
	#_IO_LINKED
 0x80

	)

104 
	#_IO_IN_BACKUP
 0x100

	)

105 
	#_IO_LINE_BUF
 0x200

	)

106 
	#_IO_TIED_PUT_GET
 0x400

	)

107 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 
	#_IO_IS_APPENDING
 0x1000

	)

109 
	#_IO_IS_FILEBUF
 0x2000

	)

110 
	#_IO_BAD_SEEN
 0x4000

	)

111 
	#_IO_USER_LOCK
 0x8000

	)

113 
	#_IO_FLAGS2_MMAP
 1

	)

114 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifde‡
_LIBC


116 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifde‡
_LIBC


120 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 
	#_IO_SKIPWS
 01

	)

127 
	#_IO_LEFT
 02

	)

128 
	#_IO_RIGHT
 04

	)

129 
	#_IO_INTERNAL
 010

	)

130 
	#_IO_DEC
 020

	)

131 
	#_IO_OCT
 040

	)

132 
	#_IO_HEX
 0100

	)

133 
	#_IO_SHOWBASE
 0200

	)

134 
	#_IO_SHOWPOINT
 0400

	)

135 
	#_IO_UPPERCASE
 01000

	)

136 
	#_IO_SHOWPOS
 02000

	)

137 
	#_IO_SCIENTIFIC
 04000

	)

138 
	#_IO_FIXED
 010000

	)

139 
	#_IO_UNITBUF
 020000

	)

140 
	#_IO_STDIO
 040000

	)

141 
	#_IO_DONT_CLOSE
 0100000

	)

142 
	#_IO_BOOLALPHA
 0200000

	)

145 
_IO_jump_t
; 
	g_IO_FILE
;

148 #ifde‡
_IO_MTSAFE_IO


149 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

150 
	~<bôs/°dio-lock.h
>

155 
	t_IO_lock_t
;

161 
	s_IO_m¨kî
 {

162 
_IO_m¨kî
 *
	m_√xt
;

163 
_IO_FILE
 *
	m_sbuf
;

167 
	m_pos
;

169 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

170 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

171 
	mpublic
:

172 
°ªamm¨kî
(
°ªambuf
 *
sb
);

173 ~
°ªamm¨kî
();

174 
ßvög
(Ë{  
	m_•os
 == -2; }

175 
dñè
(
°ªamm¨kî
&);

176 
dñè
();

181 
	e__codecvt_ªsu…


183 
	m__codecvt_ok
,

184 
	m__codecvt_∑πül
,

185 
	m__codecvt_îr‹
,

186 
	m__codecvt_noc⁄v


189 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


192 
	s_IO_codecvt


194 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

195 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

196 
	m__mb°©e_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 *,

199 c⁄° 
	mwch¨_t
 **, *,

201 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

202 
	m__mb°©e_t
 *, *,

204 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

205 
	m__mb°©e_t
 *,

207 c⁄° **, 
	mwch¨_t
 *,

208 
	mwch¨_t
 *, wchar_t **);

209 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

211 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

212 c⁄° *, c⁄° *, 
	m_IO_size_t
);

213 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

215 
_IO_ic⁄v_t
 
	m__cd_ö
;

216 
_IO_ic⁄v_t
 
	m__cd_out
;

220 
	s_IO_wide_d©a


222 
wch¨_t
 *
	m_IO_ªad_±r
;

223 
wch¨_t
 *
	m_IO_ªad_íd
;

224 
wch¨_t
 *
	m_IO_ªad_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_ba£
;

226 
wch¨_t
 *
	m_IO_wrôe_±r
;

227 
wch¨_t
 *
	m_IO_wrôe_íd
;

228 
wch¨_t
 *
	m_IO_buf_ba£
;

229 
wch¨_t
 *
	m_IO_buf_íd
;

231 
wch¨_t
 *
	m_IO_ßve_ba£
;

232 
wch¨_t
 *
	m_IO_backup_ba£
;

234 
wch¨_t
 *
	m_IO_ßve_íd
;

236 
__mb°©e_t
 
	m_IO_°©e
;

237 
__mb°©e_t
 
	m_IO_œ°_°©e
;

238 
_IO_codecvt
 
	m_codecvt
;

240 
wch¨_t
 
	m_sh‹tbuf
[1];

242 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

246 
	s_IO_FILE
 {

247 
	m_Êags
;

248 
	#_IO_fûe_Êags
 
_Êags


	)

252 * 
	m_IO_ªad_±r
;

253 * 
	m_IO_ªad_íd
;

254 * 
	m_IO_ªad_ba£
;

255 * 
	m_IO_wrôe_ba£
;

256 * 
	m_IO_wrôe_±r
;

257 * 
	m_IO_wrôe_íd
;

258 * 
	m_IO_buf_ba£
;

259 * 
	m_IO_buf_íd
;

261 *
	m_IO_ßve_ba£
;

262 *
	m_IO_backup_ba£
;

263 *
	m_IO_ßve_íd
;

265 
_IO_m¨kî
 *
	m_m¨kîs
;

267 
_IO_FILE
 *
	m_chaö
;

269 
	m_fûío
;

271 
	m_blksize
;

273 
	m_Êags2
;

275 
_IO_off_t
 
	m_ﬁd_off£t
;

277 
	#__HAVE_COLUMN


	)

279 
	m_cur_cﬁumn
;

280 sig√d 
	m_vèbÀ_off£t
;

281 
	m_sh‹tbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifde‡
_IO_USE_OLD_IO_FILE


289 
	s_IO_FILE_com∂ëe


291 
_IO_FILE
 
	m_fûe
;

293 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_off£t
;

295 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


297 
_IO_codecvt
 *
	m_codecvt
;

298 
_IO_wide_d©a
 *
	m_wide_d©a
;

299 
_IO_FILE
 *
	m_‰ìªs_li°
;

300 *
	m_‰ìªs_buf
;

301 
size_t
 
	m_‰ìªs_size
;

303 *
	m__∑d1
;

304 *
	m__∑d2
;

305 *
	m__∑d3
;

306 *
	m__∑d4
;

307 
size_t
 
	m__∑d5
;

309 
	m_mode
;

311 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

315 #i‚de‡
__˝lu•lus


316 
_IO_FILE
 
	t_IO_FILE
;

319 
	g_IO_FILE_∂us
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

323 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

324 #i‚de‡
_LIBC


325 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

326 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

327 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

329 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

331 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

339 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

347 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

359 
	t__io_˛o£_‚
 (*
	t__cookõ
);

362 #ifde‡
_GNU_SOURCE


364 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

365 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

366 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

367 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

372 
__io_ªad_‚
 *
	mªad
;

373 
__io_wrôe_‚
 *
	mwrôe
;

374 
__io_£ek_‚
 *
	m£ek
;

375 
__io_˛o£_‚
 *
	m˛o£
;

376 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

377 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

379 
	g_IO_cookõ_fûe
;

382 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

383 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

387 #ifde‡
__˝lu•lus


391 
__undîÊow
 (
_IO_FILE
 *);

392 
__uÊow
 (
_IO_FILE
 *);

393 
__ovîÊow
 (
_IO_FILE
 *, );

394 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


395 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

397 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

400 #i‡ 
__GNUC__
 >= 3

401 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

403 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

406 
	#_IO_gëc_u∆ocked
(
_Â
) \

407 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

408 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

409 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

410 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

411 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

412 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

413 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

415 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

416 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

418 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


419 
	#_IO_gëwc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

421 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

422 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

423 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

424 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

425 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

426 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

427 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

428 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

429 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

432 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

433 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

435 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

436 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

437 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

440 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

443 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

444 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

446 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

450 #ifde‡
_IO_MTSAFE_IO


451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
) \

453 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

454 
	#_IO_fu∆ockfûe
(
_Â
) \

455 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

457 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

458 
	#_IO_Êockfûe
(
_Â
Ë

	)

459 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

460 
	#_IO_·rylockfûe
(
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

462 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

465 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

466 
_IO_va_li°
, *
__ª°ri˘
);

467 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

468 
_IO_va_li°
);

469 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

470 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

472 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

473 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

475 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

477 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


478 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

479 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

480 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

481 #i‡
__GNUC__
 >= 2

484 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


485 
	~<shlib-com∑t.h
>

486 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

488 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

489 c⁄° 
_IO_°dö_u£d
;

490 
wók_exã∫
 (
_IO_°dö_u£d
);

493 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


494 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

498 
	#_IO_fwide
(
__Â
, 
__mode
) \

499 ({ 
__ªsu…
 = (
__mode
); \

500 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

502 i‡((
__Â
)->
_mode
 == 0) \

504 (
__Â
)->
_mode
 = -1; \

505 
__ªsu…
 = (
__Â
)->
_mode
; \

507 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

508 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

510 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

511 
__ªsu…
; })

	)

514 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

515 
_IO_va_li°
, *
__ª°ri˘
);

516 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

517 
_IO_va_li°
);

518 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

519 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

522 #ifde‡
__LDBL_COMPAT


523 
	~<bôs/libio-ldbl.h
>

526 #ifde‡
__˝lu•lus


	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_BATMAN
 0x4305

	)

52 
	#ETH_P_DEC
 0x6000

	)

53 
	#ETH_P_DNA_DL
 0x6001

	)

54 
	#ETH_P_DNA_RC
 0x6002

	)

55 
	#ETH_P_DNA_RT
 0x6003

	)

56 
	#ETH_P_LAT
 0x6004

	)

57 
	#ETH_P_DIAG
 0x6005

	)

58 
	#ETH_P_CUST
 0x6006

	)

59 
	#ETH_P_SCA
 0x6007

	)

60 
	#ETH_P_TEB
 0x6558

	)

61 
	#ETH_P_RARP
 0x8035

	)

62 
	#ETH_P_ATALK
 0x809B

	)

63 
	#ETH_P_AARP
 0x80F3

	)

64 
	#ETH_P_8021Q
 0x8100

	)

65 
	#ETH_P_IPX
 0x8137

	)

66 
	#ETH_P_IPV6
 0x86DD

	)

67 
	#ETH_P_PAUSE
 0x8808

	)

68 
	#ETH_P_SLOW
 0x8809

	)

69 
	#ETH_P_WCCP
 0x883E

	)

71 
	#ETH_P_PPP_DISC
 0x8863

	)

72 
	#ETH_P_PPP_SES
 0x8864

	)

73 
	#ETH_P_MPLS_UC
 0x8847

	)

74 
	#ETH_P_MPLS_MC
 0x8848

	)

75 
	#ETH_P_ATMMPOA
 0x884¯

	)

76 
	#ETH_P_LINK_CTL
 0x886¯

	)

77 
	#ETH_P_ATMFATE
 0x8884

	)

80 
	#ETH_P_PAE
 0x888E

	)

81 
	#ETH_P_AOE
 0x88A2

	)

82 
	#ETH_P_8021AD
 0x88A8

	)

83 
	#ETH_P_802_EX1
 0x88B5

	)

84 
	#ETH_P_TIPC
 0x88CA

	)

85 
	#ETH_P_8021AH
 0x88E7

	)

86 
	#ETH_P_MVRP
 0x88F5

	)

87 
	#ETH_P_1588
 0x88F7

	)

88 
	#ETH_P_FCOE
 0x8906

	)

89 
	#ETH_P_TDLS
 0x890D

	)

90 
	#ETH_P_FIP
 0x8914

	)

91 
	#ETH_P_QINQ1
 0x9100

	)

92 
	#ETH_P_QINQ2
 0x9200

	)

93 
	#ETH_P_QINQ3
 0x9300

	)

94 
	#ETH_P_EDSA
 0xDADA

	)

95 
	#ETH_P_AF_IUCV
 0xFBFB

	)

97 
	#ETH_P_802_3_MIN
 0x0600

	)

104 
	#ETH_P_802_3
 0x0001

	)

105 
	#ETH_P_AX25
 0x0002

	)

106 
	#ETH_P_ALL
 0x0003

	)

107 
	#ETH_P_802_2
 0x0004

	)

108 
	#ETH_P_SNAP
 0x0005

	)

109 
	#ETH_P_DDCMP
 0x0006

	)

110 
	#ETH_P_WAN_PPP
 0x0007

	)

111 
	#ETH_P_PPP_MP
 0x0008

	)

112 
	#ETH_P_LOCALTALK
 0x0009

	)

113 
	#ETH_P_CAN
 0x000C

	)

114 
	#ETH_P_CANFD
 0x000D

	)

115 
	#ETH_P_PPPTALK
 0x0010

	)

116 
	#ETH_P_TR_802_2
 0x0011

	)

117 
	#ETH_P_MOBITEX
 0x0015

	)

118 
	#ETH_P_CONTROL
 0x0016

	)

119 
	#ETH_P_IRDA
 0x0017

	)

120 
	#ETH_P_ECONET
 0x0018

	)

121 
	#ETH_P_HDLC
 0x0019

	)

122 
	#ETH_P_ARCNET
 0x001A

	)

123 
	#ETH_P_DSA
 0x001B

	)

124 
	#ETH_P_TRAILER
 0x001C

	)

125 
	#ETH_P_PHONET
 0x00F5

	)

126 
	#ETH_P_IEEE802154
 0x00F6

	)

127 
	#ETH_P_CAIF
 0x00F7

	)

133 
	sëhhdr
 {

134 
	mh_de°
[
ETH_ALEN
];

135 
	mh_sour˚
[
ETH_ALEN
];

136 
__be16
 
	mh_¥Ÿo
;

137 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

143 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

145 #i‡
__GNUC_PREREQ
 (4,3)

146 
	#__w¨nde˛
(
«me
, 
msg
) \

147 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

148 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

149 
	#__îr‹de˛
(
«me
, 
msg
) \

150 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

152 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

153 
	#__w¨«âr
(
msg
)

	)

154 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

158 #i‡
__GNUC_PREREQ
 (2,97)

160 
	#__Êex¨r
 []

	)

162 #ifde‡
__GNUC__


163 
	#__Êex¨r
 [0]

	)

165 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

166 
	#__Êex¨r
 []

	)

169 
	#__Êex¨r
 [1]

	)

185 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

187 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

188 #ifde‡
__˝lu•lus


189 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

190 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

191 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

192 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

194 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

195 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

196 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

197 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

199 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

200 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

213 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

214 
	#__©åibuã__
(
xyz
Ë

	)

220 #i‡
__GNUC_PREREQ
 (2,96)

221 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

223 
	#__©åibuã_mÆloc__


	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

323 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)Ë&& deföed 
__GNUC__


324 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


325 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

329 
	#__exã∫_ölöe
 
__ölöe


	)

330 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

332 #ñi‡
deföed
 
__GNUC__


333 
	#__exã∫_ölöe
 
__ölöe


	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe


	)

337 
	#__exã∫_ölöe


	)

338 
	#__exã∫_Æways_ölöe


	)

343 #i‡
__GNUC_PREREQ
 (4,3)

344 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

345 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

352 #i‡!
__GNUC_PREREQ
 (2,8)

353 
	#__exãnsi⁄__


	)

357 #i‡!
__GNUC_PREREQ
 (2,92)

358 
	#__ª°ri˘


	)

364 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


365 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

367 #ifde‡
__GNUC__


368 
	#__ª°ri˘_¨r


	)

370 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

371 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

374 
	#__ª°ri˘_¨r


	)

379 #i‡
__GNUC__
 >= 3

380 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

382 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

30 #ifde‡
__USE_GNU


32 
	~<bôs/sig£t.h
>

39 
	~<bôs/sockë.h
>

41 #ifde‡
__USE_BSD


44 
	sosockaddr


46 
	mß_Ámûy
;

47 
	mß_d©a
[14];

55 
	mSHUT_RD
 = 0,

56 
	#SHUT_RD
 
SHUT_RD


	)

57 
	mSHUT_WR
,

58 
	#SHUT_WR
 
SHUT_WR


	)

59 
	mSHUT_RDWR


60 
	#SHUT_RDWR
 
SHUT_RDWR


	)

69 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


70 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

71 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

75 
	#__SOCKADDR_ALLTYPES
 \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


94 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

95 uni⁄ { 
	m__SOCKADDR_ALLTYPES


96 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

97 #unde‡
__SOCKADDR_ONETYPE


100 #ifde‡
__USE_GNU


102 
	smmsghdr


104 
msghdr
 
	mmsg_hdr
;

105 
	mmsg_Àn
;

114 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

120 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

121 
__fds
[2]Ë
__THROW
;

124 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

125 
__THROW
;

128 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

138 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

142 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

143 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

150 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

157 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

164 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

165 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

166 
sockÀn_t
 
__addr_Àn
);

175 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

176 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

177 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

185 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

186 
__Êags
);

188 #ifde‡
__USE_GNU


194 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

195 
__vÀn
, 
__Êags
);

203 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

205 #ifde‡
__USE_GNU


211 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

212 
__vÀn
, 
__Êags
,

213 c⁄° 
time•ec
 *
__tmo
);

220 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

221 *
__ª°ri˘
 
__›tvÆ
,

222 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

227 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

228 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

234 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

244 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

245 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

247 #ifde‡
__USE_GNU


252 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

253 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

262 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

265 #ifde‡
__USE_XOPEN2K


267 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

271 #ifde‡
__USE_MISC


275 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

280 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


281 
	~<bôs/sockë2.h
>

284 
__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 206)

	)

188 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

189 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

190 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 209)

	)

191 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

192 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

193 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

194 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

195 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

196 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

197 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

198 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

199 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

200 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

201 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

202 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

203 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

204 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

205 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

206 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

207 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

208 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

209 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

210 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

211 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

212 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

213 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

214 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

215 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

216 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

217 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

218 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

219 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

220 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

221 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

222 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

223 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

224 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

225 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

226 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

227 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

228 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

229 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

230 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

231 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

232 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

233 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

234 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

235 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

236 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

237 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

238 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

239 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

240 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

241 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

242 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

243 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

244 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

245 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

246 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

247 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

248 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

249 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

250 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

251 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

252 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

253 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

254 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

255 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

256 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

257 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

258 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

259 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

260 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

261 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

262 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

263 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

264 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

265 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

266 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

267 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

268 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

269 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

270 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

271 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

272 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

273 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

274 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

275 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

276 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

277 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

278 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

279 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

280 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

281 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

282 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

283 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

284 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

285 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

286 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

287 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

288 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

289 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

290 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

291 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

292 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

293 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

294 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

295 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

296 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

297 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

298 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

299 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

300 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

301 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

302 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

303 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

304 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

305 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

306 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

100 #i‚de‡
F_GETLK


101 #i‚de‡
__USE_FILE_OFFSET64


102 
	#F_GETLK
 5

	)

103 
	#F_SETLK
 6

	)

104 
	#F_SETLKW
 7

	)

106 
	#F_GETLK
 
F_GETLK64


	)

107 
	#F_SETLK
 
F_SETLK64


	)

108 
	#F_SETLKW
 
F_SETLKW64


	)

111 #i‚de‡
F_GETLK64


112 
	#F_GETLK64
 12

	)

113 
	#F_SETLK64
 13

	)

114 
	#F_SETLKW64
 14

	)

117 #ifde‡
__USE_LARGEFILE64


118 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

123 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

124 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

127 #ifde‡
__USE_GNU


128 
	#O_DIRECT
 
__O_DIRECT


	)

129 
	#O_NOATIME
 
__O_NOATIME


	)

130 
	#O_PATH
 
__O_PATH


	)

136 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


137 
	#O_DSYNC
 
__O_DSYNC


	)

138 #i‡
deföed
 
__O_RSYNC


139 
	#O_RSYNC
 
__O_RSYNC


	)

141 
	#O_RSYNC
 
O_SYNC


	)

146 
	#F_DUPFD
 0

	)

147 
	#F_GETFD
 1

	)

148 
	#F_SETFD
 2

	)

149 
	#F_GETFL
 3

	)

150 
	#F_SETFL
 4

	)

152 #i‚de‡
__F_SETOWN


153 
	#__F_SETOWN
 8

	)

154 
	#__F_GETOWN
 9

	)

157 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


158 
	#F_SETOWN
 
__F_SETOWN


	)

159 
	#F_GETOWN
 
__F_GETOWN


	)

162 #i‚de‡
__F_SETSIG


163 
	#__F_SETSIG
 10

	)

164 
	#__F_GETSIG
 11

	)

166 #i‚de‡
__F_SETOWN_EX


167 
	#__F_SETOWN_EX
 15

	)

168 
	#__F_GETOWN_EX
 16

	)

171 #ifde‡
__USE_GNU


172 
	#F_SETSIG
 
__F_SETSIG


	)

173 
	#F_GETSIG
 
__F_GETSIG


	)

174 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

175 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

178 #ifde‡
__USE_GNU


179 
	#F_SETLEASE
 1024

	)

180 
	#F_GETLEASE
 1025

	)

181 
	#F_NOTIFY
 1026

	)

182 
	#F_SETPIPE_SZ
 1031

	)

183 
	#F_GETPIPE_SZ
 1032

	)

185 #ifde‡
__USE_XOPEN2K8


186 
	#F_DUPFD_CLOEXEC
 1030

	)

191 
	#FD_CLOEXEC
 1

	)

193 #i‚de‡
F_RDLCK


195 
	#F_RDLCK
 0

	)

196 
	#F_WRLCK
 1

	)

197 
	#F_UNLCK
 2

	)

202 #i‚de‡
F_EXLCK


203 
	#F_EXLCK
 4

	)

204 
	#F_SHLCK
 8

	)

207 #ifde‡
__USE_BSD


209 
	#LOCK_SH
 1

	)

210 
	#LOCK_EX
 2

	)

211 
	#LOCK_NB
 4

	)

213 
	#LOCK_UN
 8

	)

216 #ifde‡
__USE_GNU


217 
	#LOCK_MAND
 32

	)

218 
	#LOCK_READ
 64

	)

219 
	#LOCK_WRITE
 128

	)

220 
	#LOCK_RW
 192

	)

223 #ifde‡
__USE_GNU


225 
	#DN_ACCESS
 0x00000001

	)

226 
	#DN_MODIFY
 0x00000002

	)

227 
	#DN_CREATE
 0x00000004

	)

228 
	#DN_DELETE
 0x00000008

	)

229 
	#DN_RENAME
 0x00000010

	)

230 
	#DN_ATTRIB
 0x00000020

	)

231 
	#DN_MULTISHOT
 0x80000000

	)

235 #ifde‡
__USE_GNU


237 
	e__pid_ty≥


239 
	mF_OWNER_TID
 = 0,

240 
	mF_OWNER_PID
,

241 
	mF_OWNER_PGRP
,

242 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


246 
	sf_ow√r_ex


248 
__pid_ty≥
 
	mty≥
;

249 
__pid_t
 
	mpid
;

255 #ifdef 
__USE_BSD


256 
	#FAPPEND
 
O_APPEND


	)

257 
	#FFSYNC
 
O_FSYNC


	)

258 
	#FASYNC
 
O_ASYNC


	)

259 
	#FNONBLOCK
 
O_NONBLOCK


	)

260 
	#FNDELAY
 
O_NDELAY


	)

263 #i‚de‡
__POSIX_FADV_DONTNEED


264 
	#__POSIX_FADV_DONTNEED
 4

	)

265 
	#__POSIX_FADV_NOREUSE
 5

	)

268 #ifde‡
__USE_XOPEN2K


269 
	#POSIX_FADV_NORMAL
 0

	)

270 
	#POSIX_FADV_RANDOM
 1

	)

271 
	#POSIX_FADV_SEQUENTIAL
 2

	)

272 
	#POSIX_FADV_WILLNEED
 3

	)

273 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

274 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

278 #ifde‡
__USE_GNU


280 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

283 
	#SYNC_FILE_RANGE_WRITE
 2

	)

286 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

291 
	#SPLICE_F_MOVE
 1

	)

292 
	#SPLICE_F_NONBLOCK
 2

	)

295 
	#SPLICE_F_MORE
 4

	)

296 
	#SPLICE_F_GIFT
 8

	)

300 
	sfûe_h™dÀ


302 
	mh™dÀ_byãs
;

303 
	mh™dÀ_ty≥
;

305 
	mf_h™dÀ
[0];

309 
	#MAX_HANDLE_SZ
 128

	)

313 #ifde‡
__USE_ATFILE


314 
	#AT_FDCWD
 -100

	)

317 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

318 
	#AT_REMOVEDIR
 0x200

	)

320 
	#AT_SYMLINK_FOLLOW
 0x400

	)

321 #ifde‡
__USE_GNU


322 
	#AT_NO_AUTOMOUNT
 0x800

	)

324 
	#AT_EMPTY_PATH
 0x1000

	)

326 
	#AT_EACCESS
 0x200

	)

330 
	g__BEGIN_DECLS


332 #ifde‡
__USE_GNU


335 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

336 
__THROW
;

343 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

344 
__Êags
);

351 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

352 
size_t
 
__cou¡
, 
__Êags
);

358 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

359 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

360 
__Êags
);

366 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

367 
__Êags
);

373 #i‚de‡
__USE_FILE_OFFSET64


374 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

376 #ifde‡
__REDIRECT


377 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

378 
__off64_t
 
__Àn
),

379 
ÁŒoˇã64
);

381 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

384 #ifde‡
__USE_LARGEFILE64


385 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

386 
__off64_t
 
__Àn
);

391 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

392 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

393 
__Êags
Ë
__THROW
;

399 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

400 
__Êags
);

404 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_CAN
 29

	)

72 
	#PF_TIPC
 30

	)

73 
	#PF_BLUETOOTH
 31

	)

74 
	#PF_IUCV
 32

	)

75 
	#PF_RXRPC
 33

	)

76 
	#PF_ISDN
 34

	)

77 
	#PF_PHONET
 35

	)

78 
	#PF_IEEE802154
 36

	)

79 
	#PF_CAIF
 37

	)

80 
	#PF_ALG
 38

	)

81 
	#PF_NFC
 39

	)

82 
	#PF_MAX
 40

	)

85 
	#AF_UNSPEC
 
PF_UNSPEC


	)

86 
	#AF_LOCAL
 
PF_LOCAL


	)

87 
	#AF_UNIX
 
PF_UNIX


	)

88 
	#AF_FILE
 
PF_FILE


	)

89 
	#AF_INET
 
PF_INET


	)

90 
	#AF_AX25
 
PF_AX25


	)

91 
	#AF_IPX
 
PF_IPX


	)

92 
	#AF_APPLETALK
 
PF_APPLETALK


	)

93 
	#AF_NETROM
 
PF_NETROM


	)

94 
	#AF_BRIDGE
 
PF_BRIDGE


	)

95 
	#AF_ATMPVC
 
PF_ATMPVC


	)

96 
	#AF_X25
 
PF_X25


	)

97 
	#AF_INET6
 
PF_INET6


	)

98 
	#AF_ROSE
 
PF_ROSE


	)

99 
	#AF_DEC√t
 
PF_DEC√t


	)

100 
	#AF_NETBEUI
 
PF_NETBEUI


	)

101 
	#AF_SECURITY
 
PF_SECURITY


	)

102 
	#AF_KEY
 
PF_KEY


	)

103 
	#AF_NETLINK
 
PF_NETLINK


	)

104 
	#AF_ROUTE
 
PF_ROUTE


	)

105 
	#AF_PACKET
 
PF_PACKET


	)

106 
	#AF_ASH
 
PF_ASH


	)

107 
	#AF_ECONET
 
PF_ECONET


	)

108 
	#AF_ATMSVC
 
PF_ATMSVC


	)

109 
	#AF_RDS
 
PF_RDS


	)

110 
	#AF_SNA
 
PF_SNA


	)

111 
	#AF_IRDA
 
PF_IRDA


	)

112 
	#AF_PPPOX
 
PF_PPPOX


	)

113 
	#AF_WANPIPE
 
PF_WANPIPE


	)

114 
	#AF_LLC
 
PF_LLC


	)

115 
	#AF_CAN
 
PF_CAN


	)

116 
	#AF_TIPC
 
PF_TIPC


	)

117 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

118 
	#AF_IUCV
 
PF_IUCV


	)

119 
	#AF_RXRPC
 
PF_RXRPC


	)

120 
	#AF_ISDN
 
PF_ISDN


	)

121 
	#AF_PHONET
 
PF_PHONET


	)

122 
	#AF_IEEE802154
 
PF_IEEE802154


	)

123 
	#AF_CAIF
 
PF_CAIF


	)

124 
	#AF_ALG
 
PF_ALG


	)

125 
	#AF_NFC
 
PF_NFC


	)

126 
	#AF_MAX
 
PF_MAX


	)

132 
	#SOL_RAW
 255

	)

133 
	#SOL_DECNET
 261

	)

134 
	#SOL_X25
 262

	)

135 
	#SOL_PACKET
 263

	)

136 
	#SOL_ATM
 264

	)

137 
	#SOL_AAL
 265

	)

138 
	#SOL_IRDA
 266

	)

141 
	#SOMAXCONN
 128

	)

144 
	~<bôs/sockaddr.h
>

147 
	ssockaddr


149 
__SOCKADDR_COMMON
 (
ß_
);

150 
	mß_d©a
[14];

156 
	#__ss_Æig¡y≥
 

	)

157 
	#_SS_SIZE
 128

	)

158 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

160 
	ssockaddr_°‹age


162 
__SOCKADDR_COMMON
 (
ss_
);

163 
__ss_Æig¡y≥
 
	m__ss_Æign
;

164 
	m__ss_∑ddög
[
_SS_PADSIZE
];

171 
	mMSG_OOB
 = 0x01,

172 
	#MSG_OOB
 
MSG_OOB


	)

173 
	mMSG_PEEK
 = 0x02,

174 
	#MSG_PEEK
 
MSG_PEEK


	)

175 
	mMSG_DONTROUTE
 = 0x04,

176 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

177 #ifde‡
__USE_GNU


179 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

180 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

182 
	mMSG_CTRUNC
 = 0x08,

183 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

184 
	mMSG_PROXY
 = 0x10,

185 
	#MSG_PROXY
 
MSG_PROXY


	)

186 
	mMSG_TRUNC
 = 0x20,

187 
	#MSG_TRUNC
 
MSG_TRUNC


	)

188 
	mMSG_DONTWAIT
 = 0x40,

189 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

190 
	mMSG_EOR
 = 0x80,

191 
	#MSG_EOR
 
MSG_EOR


	)

192 
	mMSG_WAITALL
 = 0x100,

193 
	#MSG_WAITALL
 
MSG_WAITALL


	)

194 
	mMSG_FIN
 = 0x200,

195 
	#MSG_FIN
 
MSG_FIN


	)

196 
	mMSG_SYN
 = 0x400,

197 
	#MSG_SYN
 
MSG_SYN


	)

198 
	mMSG_CONFIRM
 = 0x800,

199 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

200 
	mMSG_RST
 = 0x1000,

201 
	#MSG_RST
 
MSG_RST


	)

202 
	mMSG_ERRQUEUE
 = 0x2000,

203 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

204 
	mMSG_NOSIGNAL
 = 0x4000,

205 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

206 
	mMSG_MORE
 = 0x8000,

207 
	#MSG_MORE
 
MSG_MORE


	)

208 
	mMSG_WAITFORONE
 = 0x10000,

209 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

210 
	mMSG_FASTOPEN
 = 0x20000000,

211 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

213 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

216 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

222 
	smsghdr


224 *
	mmsg_«me
;

225 
sockÀn_t
 
	mmsg_«mñí
;

227 
iovec
 *
	mmsg_iov
;

228 
size_t
 
	mmsg_iovÀn
;

230 *
	mmsg_c⁄åﬁ
;

231 
size_t
 
	mmsg_c⁄åﬁÀn
;

236 
	mmsg_Êags
;

240 
	scmsghdr


242 
size_t
 
	mcmsg_Àn
;

247 
	mcmsg_Àvñ
;

248 
	mcmsg_ty≥
;

249 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

250 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

258 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

260 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

261 
	#CMSG_FIRSTHDR
(
mhdr
) \

262 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

263 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

264 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

265 & (
size_t
Ë~( (size_tË- 1))

	)

266 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

267 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

268 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

270 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

271 
cmsghdr
 *
__cmsg
Ë
__THROW
;

272 #ifde‡
__USE_EXTERN_INLINES


273 #i‚de‡
_EXTERN_INLINE


274 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

276 
_EXTERN_INLINE
 
cmsghdr
 *

277 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

279 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

281  (
cmsghdr
 *) 0;

283 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

284 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

285 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


286 + 
__mhdr
->
msg_c⁄åﬁÀn
)

287 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

288 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

290  (
cmsghdr
 *) 0;

291  
__cmsg
;

292 
	}
}

299 
	mSCM_RIGHTS
 = 0x01

300 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

301 #ifde‡
__USE_GNU


302 , 
	mSCM_CREDENTIALS
 = 0x02

303 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

307 #ifde‡
__USE_GNU


309 
	su¸ed


311 
pid_t
 
	mpid
;

312 
uid_t
 
	muid
;

313 
gid_t
 
	mgid
;

318 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


319 #i‚de‡
FIOGETOWN


320 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

322 #i‚de‡
FIOSETOWN


323 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

325 #i‚de‡
SIOCATMARK


326 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

328 #i‚de‡
SIOCGPGRP


329 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

331 #i‚de‡
SIOCGSTAMP


332 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

334 #i‚de‡
SIOCGSTAMPNS


335 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

337 #i‚de‡
SIOCSPGRP


338 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

343 
	~<asm/sockë.h
>

345 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


346 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


347 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


348 #unde‡
FIOGETOWN


350 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


351 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


352 #unde‡
FIOSETOWN


354 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


355 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


356 #unde‡
SIOCATMARK


358 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


359 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


360 #unde‡
SIOCGPGRP


362 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


363 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


364 #unde‡
SIOCGSTAMP


366 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


367 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


368 #unde‡
SIOCGSTAMPNS


370 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


371 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


372 #unde‡
SIOCSPGRP


377 
	slögî


379 
	ml_⁄off
;

380 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/stddef.h

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	~<bôs/¥edefs.h
>

34 
	#__STDC_ISO_10646__
 201103L

	)

37 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/predefs.h

19 #i‚de‡
_PREDEFS_H


20 
	#_PREDEFS_H


	)

22 #i‚de‡
_STDC_PREDEF_H


27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 0 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

112 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


115 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

116 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

118 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


125 #i‡
__WORDSIZE
 == 64

126 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

131 
	#PTHREAD_RWLOCK_INITIALIZER
 \

132 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

133 #ifde‡
__USE_GNU


134 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

141 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

142 0, 0, 0, 0 } }

	)

144 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

145 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

146 0 } }

	)

156 
	mPTHREAD_INHERIT_SCHED
,

157 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

158 
	mPTHREAD_EXPLICIT_SCHED


159 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

166 
	mPTHREAD_SCOPE_SYSTEM
,

167 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

168 
	mPTHREAD_SCOPE_PROCESS


169 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

176 
	mPTHREAD_PROCESS_PRIVATE
,

177 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

178 
	mPTHREAD_PROCESS_SHARED


179 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

185 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

189 
	s_±hªad_˛ónup_buf„r


191 (*
	m__routöe
) (*);

192 *
	m__¨g
;

193 
	m__ˇn˚…y≥
;

194 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

200 
	mPTHREAD_CANCEL_ENABLE
,

201 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

202 
	mPTHREAD_CANCEL_DISABLE


203 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

207 
	mPTHREAD_CANCEL_DEFERRED
,

208 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

209 
	mPTHREAD_CANCEL_ASYNCHRONOUS


210 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

212 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

216 
	#PTHREAD_ONCE_INIT
 0

	)

219 #ifde‡
__USE_XOPEN2K


223 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

227 
__BEGIN_DECLS


232 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

233 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

234 *(*
__°¨t_routöe
) (*),

235 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

241 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

249 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

251 #ifde‡
__USE_GNU


254 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

262 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

263 c⁄° 
time•ec
 *
__ab°ime
);

270 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

274 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

277 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

278 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

286 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

293 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

294 *
__dëach°©e
)

295 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

298 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

299 
__dëach°©e
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

304 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

305 
size_t
 *
__gu¨dsize
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

309 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

310 
size_t
 
__gu¨dsize
)

311 
__THROW
 
	`__n⁄nuŒ
 ((1));

315 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

317 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

321 c⁄° 
sched_∑øm
 *
__ª°ri˘


322 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


326 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

330 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1));

334 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


335 
__©å
, *
__ª°ri˘
 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

339 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

340 
__öhîô
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1));

345 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

346 *
__ª°ri˘
 
__sc›e
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

350 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


355 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

363 *
__°ackaddr
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

367 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


368 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

374 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

375 
size_t
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1));

378 #ifde‡
__USE_XOPEN2K


380 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

381 **
__ª°ri˘
 
__°ackaddr
,

382 
size_t
 *
__ª°ri˘
 
__°acksize
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

388 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

389 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #ifde‡
__USE_GNU


395 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 c⁄° 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

402 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

403 
size_t
 
__˝u£tsize
,

404 
˝u_£t_t
 *
__˝u£t
)

405 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

411 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

412 
__THROW
 
	`__n⁄nuŒ
 ((2));

420 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

421 c⁄° 
sched_∑øm
 *
__∑øm
)

422 
__THROW
 
	`__n⁄nuŒ
 ((3));

425 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

426 *
__ª°ri˘
 
__pﬁicy
,

427 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

431 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

432 
__THROW
;

435 #ifde‡
__USE_GNU


437 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

438 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

442 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2));

447 #ifde‡
__USE_UNIX98


449 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

452 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

455 #ifde‡
__USE_GNU


460 
	$±hªad_yõld
 (Ë
__THROW
;

465 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

466 c⁄° 
˝u_£t_t
 *
__˝u£t
)

467 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

471 
˝u_£t_t
 *
__˝u£t
)

472 
__THROW
 
	`__n⁄nuŒ
 ((3));

485 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

486 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

497 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

501 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

504 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

509 
	`±hªad_ã°ˇn˚l
 ();

518 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

519 
__mask_was_ßved
;

520 } 
__ˇn˚l_jmp_buf
[1];

521 *
__∑d
[4];

522 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

525 #i‚de‡
__˛ónup_f˘_©åibuã


526 
	#__˛ónup_f˘_©åibuã


	)

531 
	s__±hªad_˛ónup_‰ame


533 (*
__ˇn˚l_routöe
) (*);

534 *
__ˇn˚l_¨g
;

535 
__do_ô
;

536 
__ˇn˚l_ty≥
;

539 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


540 #ifde‡
__˝lu•lus


542 ˛as†
	c__±hªad_˛ónup_˛ass


544 (*
__ˇn˚l_routöe
) (*);

545 *
__ˇn˚l_¨g
;

546 
__do_ô
;

547 
__ˇn˚l_ty≥
;

549 
public
:

550 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

551 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

552 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

553 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

554 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

555 &
__ˇn˚l_ty≥
); 
	}
}

556 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

566 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

568 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

572 
	#±hªad_˛ónup_p›
(
execuã
) \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

576 #ifde‡
__USE_GNU


580 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

582 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

583 
__˛‰ame
.
	`__de„r
 ()

	)

588 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

589 
__˛‰ame
.
	`__ª°‹e
 (); \

590 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

591 } 0)

	)

598 
__exã∫_ölöe
 

599 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

601 i‡(
__‰ame
->
__do_ô
)

602 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

603 
	}
}

612 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 };

	)

621 
	#±hªad_˛ónup_p›
(
execuã
) \

622 
__˛‰ame
.
__do_ô
 = (
execuã
); \

623 } 0)

	)

625 #ifde‡
__USE_GNU


629 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

631 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

632 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

633 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

634 .
__do_ô
 = 1 }; \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

636 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

641 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

642 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

643 
__˛‰ame
.
__do_ô
 = (
execuã
); \

644 } 0)

	)

655 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

657 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

658 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

659 *
__ˇn˚l_¨g
 = (
¨g
); \

660 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

661 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

662 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

669 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

670 dÿ{

	)

671 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

672 
__˛ónup_f˘_©åibuã
;

676 
	#±hªad_˛ónup_p›
(
execuã
) \

679 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 i‡(
execuã
) \

681 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

682 } 0)

	)

683 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

684 
__˛ónup_f˘_©åibuã
;

686 #ifde‡
__USE_GNU


690 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

692 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

693 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

694 *
__ˇn˚l_¨g
 = (
¨g
); \

695 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

696 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

697 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

699 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

700 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

704 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

705 dÿ{

	)

706 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

707 
__˛ónup_f˘_©åibuã
;

712 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

715 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

716 i‡(
execuã
) \

717 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

718 
	}
} 0)

	)

719 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

720 
__˛ónup_f˘_©åibuã
;

724 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

725 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

726 #i‚de‡
SHARED


727 
	`__©åibuã__
 ((
__wók__
))

733 
__jmp_buf_èg
;

734 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

740 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

741 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

742 
__THROW
 
	`__n⁄nuŒ
 ((1));

745 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

750 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

753 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

754 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 #ifde‡
__USE_XOPEN2K


758 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 c⁄° 
time•ec
 *
__ª°ri˘


760 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

764 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

770 
__ª°ri˘
 
__muãx
,

771 *
__ª°ri˘
 
__¥io˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

776 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

777 
__¥io˚ûög
,

778 *
__ª°ri˘
 
__ﬁd_˚ûög
)

779 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

782 #ifde‡
__USE_XOPEN2K8


784 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 #ifde‡
__USE_GNU


787 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

801 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

802 
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

806 
__ª°ri˘
 
__©å
,

807 *
__ª°ri˘
 
__psh¨ed
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

811 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

812 
__psh¨ed
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


817 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


818 
__©å
, *
__ª°ri˘
 
__köd
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

824 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1));

829 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

830 
__ª°ri˘
 
__©å
,

831 *
__ª°ri˘
 
__¥Ÿocﬁ
)

832 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

836 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

837 
__¥Ÿocﬁ
)

838 
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

842 
__ª°ri˘
 
__©å
,

843 *
__ª°ri˘
 
__¥io˚ûög
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

848 
__¥io˚ûög
)

849 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_XOPEN2K


853 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

854 *
__robu°√ss
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 #ifde‡
__USE_GNU


857 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

858 *
__robu°√ss
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

863 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

864 
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

880 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


881 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 c⁄° 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

907 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

908 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2K


912 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

913 c⁄° 
time•ec
 *
__ª°ri˘


914 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

918 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

925 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

930 
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

934 
__ª°ri˘
 
__©å
,

935 *
__ª°ri˘
 
__psh¨ed
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

939 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

940 
__psh¨ed
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

945 
__ª°ri˘
 
__©å
,

946 *
__ª°ri˘
 
__¥ef
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

950 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

951 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

959 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

960 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

965 
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

969 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

973 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

981 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

982 
	`__n⁄nuŒ
 ((1, 2));

991 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

992 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

994 
	`__n⁄nuŒ
 ((1, 2, 3));

999 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1000 
__THROW
 
	`__n⁄nuŒ
 ((1));

1003 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1008 
__ª°ri˘
 
__©å
,

1009 *
__ª°ri˘
 
__psh¨ed
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1013 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1014 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 #ifde‡
__USE_XOPEN2K


1018 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1019 
__ª°ri˘
 
__©å
,

1020 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1025 
__˛ockid_t
 
__˛ock_id
)

1026 
__THROW
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1035 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1040 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1044 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1048 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1052 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1060 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1061 
__©å
, 
__cou¡
)

1062 
__THROW
 
	`__n⁄nuŒ
 ((1));

1065 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1066 
__THROW
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1070 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1083 
__ª°ri˘
 
__©å
,

1084 *
__ª°ri˘
 
__psh¨ed
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1088 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1089 
__psh¨ed
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1103 (*
__de°r_fun˘i⁄
) (*))

1104 
__THROW
 
	`__n⁄nuŒ
 ((1));

1107 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1110 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1114 c⁄° *
__poöãr
Ë
__THROW
 ;

1117 #ifde‡
__USE_XOPEN2K


1119 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1120 
__˛ockid_t
 *
__˛ock_id
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((2));

1136 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1137 (*
__∑ª¡
) (),

1138 (*
__chûd
Ë()Ë
__THROW
;

1141 #ifde‡
__USE_EXTERN_INLINES


1143 
__exã∫_ölöe
 

1144 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1146  
__thªad1
 =
__thªad2
;

1147 
	}
}

1150 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@
1
.
1
/usr/include
207
5149
G/nvram_data_G.h
G/nvram_ezpacket-app_G.h
G/nvram_ezpacket-rt305x_G.h
G/nvram_ezpacket_G.h
I/nvram_data_I.h
I/nvram_ezpacket-app_I.h
I/nvram_ezpacket-rt305x_I.h
I/nvram_ezpacket_I.h
K/nvram_data_K.h
K/nvram_ezpacket-app_K.h
K/nvram_ezpacket-rt305x_K.h
K/nvram_ezpacket_K.h
P/nvram_data_P.h
P/nvram_ezpacket-app_P.h
P/nvram_ezpacket-rt305x_P.h
P/nvram_ezpacket_P.h
base64.c
bcmtimer.h
crc32.c
ezp-lib.c
ezp-lib.h
ezpcom-lib.h
files.c
include/bcmnvram.h
include/bcmutils.h
include/shutils.h
include/typedefs.h
include/wlutils.h
linux_timer.c
main.c
nvram.c
nvram_data.h
nvram_ezpacket-app.h
nvram_ezpacket-as500.h
nvram_ezpacket-brand_abocom.h
nvram_ezpacket-brand_allis.h
nvram_ezpacket-brand_axim.h
nvram_ezpacket-brand_mymo.h
nvram_ezpacket-brand_planet.h
nvram_ezpacket-brand_prox.h
nvram_ezpacket-brand_sony.h
nvram_ezpacket-brand_white.h
nvram_ezpacket-brand_zyxel.h
nvram_ezpacket-brcm.h
nvram_ezpacket-ox810.h
nvram_ezpacket-rt305x.h
nvram_ezpacket-rtl865x.h
nvram_ezpacket.h
nvram_fw.h
nvram_linux.c
process.c
semaphore.c
semaphore_mfp.h
shared.h
shutils.c
strings.c
wl.c
wl_linux.c
zconf.h
zlib.h
/usr/include/assert.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/netinet/in.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/types.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/error.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mman.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/if_ether.h
/usr/include/linux/posix_types.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/stddef.h
/usr/include/stdc-predef.h
/usr/include/sys/uio.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/socket.h
/usr/include/bits/libc-lock.h
/usr/include/bits/predefs.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm-generic/socket.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/ioctl.h
/usr/include/asm/sockios.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/sockios.h
/usr/include/bits/sched.h
